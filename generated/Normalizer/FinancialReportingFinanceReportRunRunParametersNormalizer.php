<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FinancialReportingFinanceReportRunRunParametersNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\FinancialReportingFinanceReportRunRunParameters';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\FinancialReportingFinanceReportRunRunParameters;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\FinancialReportingFinanceReportRunRunParameters();
        if (property_exists($data, 'columns')) {
            $values = [];
            foreach ($data->{'columns'} as $value) {
                $values[] = $value;
            }
            $object->setColumns($values);
        }
        if (property_exists($data, 'connected_account')) {
            $object->setConnectedAccount($data->{'connected_account'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'interval_end')) {
            $object->setIntervalEnd($data->{'interval_end'});
        }
        if (property_exists($data, 'interval_start')) {
            $object->setIntervalStart($data->{'interval_start'});
        }
        if (property_exists($data, 'payout')) {
            $object->setPayout($data->{'payout'});
        }
        if (property_exists($data, 'reporting_category')) {
            $object->setReportingCategory($data->{'reporting_category'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getColumns()) {
            $values = [];
            foreach ($object->getColumns() as $value) {
                $values[] = $value;
            }
            $data->{'columns'} = $values;
        }
        if (null !== $object->getConnectedAccount()) {
            $data->{'connected_account'} = $object->getConnectedAccount();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getIntervalEnd()) {
            $data->{'interval_end'} = $object->getIntervalEnd();
        }
        if (null !== $object->getIntervalStart()) {
            $data->{'interval_start'} = $object->getIntervalStart();
        }
        if (null !== $object->getPayout()) {
            $data->{'payout'} = $object->getPayout();
        }
        if (null !== $object->getReportingCategory()) {
            $data->{'reporting_category'} = $object->getReportingCategory();
        }

        return $data;
    }
}
