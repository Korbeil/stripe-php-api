<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class V1SubscriptionSchedulesPostBodyPhasesItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\V1SubscriptionSchedulesPostBodyPhasesItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\V1SubscriptionSchedulesPostBodyPhasesItem;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\V1SubscriptionSchedulesPostBodyPhasesItem();
        if (property_exists($data, 'application_fee_percent')) {
            $object->setApplicationFeePercent($data->{'application_fee_percent'});
        }
        if (property_exists($data, 'coupon')) {
            $object->setCoupon($data->{'coupon'});
        }
        if (property_exists($data, 'end_date')) {
            $object->setEndDate($data->{'end_date'});
        }
        if (property_exists($data, 'iterations')) {
            $object->setIterations($data->{'iterations'});
        }
        if (property_exists($data, 'plans')) {
            $values = [];
            foreach ($data->{'plans'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Stripe\\Api\\Model\\V1SubscriptionSchedulesPostBodyPhasesItemPlansItem', 'json', $context);
            }
            $object->setPlans($values);
        }
        if (property_exists($data, 'tax_percent')) {
            $object->setTaxPercent($data->{'tax_percent'});
        }
        if (property_exists($data, 'trial')) {
            $object->setTrial($data->{'trial'});
        }
        if (property_exists($data, 'trial_end')) {
            $object->setTrialEnd($data->{'trial_end'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApplicationFeePercent()) {
            $data->{'application_fee_percent'} = $object->getApplicationFeePercent();
        }
        if (null !== $object->getCoupon()) {
            $data->{'coupon'} = $object->getCoupon();
        }
        if (null !== $object->getEndDate()) {
            $data->{'end_date'} = $object->getEndDate();
        }
        if (null !== $object->getIterations()) {
            $data->{'iterations'} = $object->getIterations();
        }
        if (null !== $object->getPlans()) {
            $values = [];
            foreach ($object->getPlans() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'plans'} = $values;
        }
        if (null !== $object->getTaxPercent()) {
            $data->{'tax_percent'} = $object->getTaxPercent();
        }
        if (null !== $object->getTrial()) {
            $data->{'trial'} = $object->getTrial();
        }
        if (null !== $object->getTrialEnd()) {
            $data->{'trial_end'} = $object->getTrialEnd();
        }

        return $data;
    }
}
