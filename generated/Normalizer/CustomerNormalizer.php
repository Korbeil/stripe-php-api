<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CustomerNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Customer';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Customer;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Customer();
        if (property_exists($data, 'account_balance')) {
            $object->setAccountBalance($data->{'account_balance'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'default_source')) {
            $object->setDefaultSource($data->{'default_source'});
        }
        if (property_exists($data, 'delinquent')) {
            $object->setDelinquent($data->{'delinquent'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'discount')) {
            $object->setDiscount($this->denormalizer->denormalize($data->{'discount'}, 'Stripe\\Api\\Model\\Discount', 'json', $context));
        }
        if (property_exists($data, 'email')) {
            $object->setEmail($data->{'email'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'invoice_prefix')) {
            $object->setInvoicePrefix($data->{'invoice_prefix'});
        }
        if (property_exists($data, 'invoice_settings')) {
            $object->setInvoiceSettings($this->denormalizer->denormalize($data->{'invoice_settings'}, 'Stripe\\Api\\Model\\InvoiceSettingCustomerSetting', 'json', $context));
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'shipping')) {
            $object->setShipping($this->denormalizer->denormalize($data->{'shipping'}, 'Stripe\\Api\\Model\\Shipping', 'json', $context));
        }
        if (property_exists($data, 'sources')) {
            $object->setSources($this->denormalizer->denormalize($data->{'sources'}, 'Stripe\\Api\\Model\\CustomerSources', 'json', $context));
        }
        if (property_exists($data, 'subscriptions')) {
            $object->setSubscriptions($this->denormalizer->denormalize($data->{'subscriptions'}, 'Stripe\\Api\\Model\\CustomerSubscriptions', 'json', $context));
        }
        if (property_exists($data, 'tax_info')) {
            $object->setTaxInfo($this->denormalizer->denormalize($data->{'tax_info'}, 'Stripe\\Api\\Model\\TaxInfo', 'json', $context));
        }
        if (property_exists($data, 'tax_info_verification')) {
            $object->setTaxInfoVerification($this->denormalizer->denormalize($data->{'tax_info_verification'}, 'Stripe\\Api\\Model\\TaxInfoVerification', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAccountBalance()) {
            $data->{'account_balance'} = $object->getAccountBalance();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getDefaultSource()) {
            $data->{'default_source'} = $object->getDefaultSource();
        }
        if (null !== $object->getDelinquent()) {
            $data->{'delinquent'} = $object->getDelinquent();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getDiscount()) {
            $data->{'discount'} = $this->normalizer->normalize($object->getDiscount(), 'json', $context);
        }
        if (null !== $object->getEmail()) {
            $data->{'email'} = $object->getEmail();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getInvoicePrefix()) {
            $data->{'invoice_prefix'} = $object->getInvoicePrefix();
        }
        if (null !== $object->getInvoiceSettings()) {
            $data->{'invoice_settings'} = $this->normalizer->normalize($object->getInvoiceSettings(), 'json', $context);
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getShipping()) {
            $data->{'shipping'} = $this->normalizer->normalize($object->getShipping(), 'json', $context);
        }
        if (null !== $object->getSources()) {
            $data->{'sources'} = $this->normalizer->normalize($object->getSources(), 'json', $context);
        }
        if (null !== $object->getSubscriptions()) {
            $data->{'subscriptions'} = $this->normalizer->normalize($object->getSubscriptions(), 'json', $context);
        }
        if (null !== $object->getTaxInfo()) {
            $data->{'tax_info'} = $this->normalizer->normalize($object->getTaxInfo(), 'json', $context);
        }
        if (null !== $object->getTaxInfoVerification()) {
            $data->{'tax_info_verification'} = $this->normalizer->normalize($object->getTaxInfoVerification(), 'json', $context);
        }

        return $data;
    }
}
