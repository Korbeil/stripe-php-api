<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ApplicationFeeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\ApplicationFee';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\ApplicationFee;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\ApplicationFee();
        if (property_exists($data, 'account')) {
            $object->setAccount($data->{'account'});
        }
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'amount_refunded')) {
            $object->setAmountRefunded($data->{'amount_refunded'});
        }
        if (property_exists($data, 'application')) {
            $object->setApplication($data->{'application'});
        }
        if (property_exists($data, 'balance_transaction')) {
            $object->setBalanceTransaction($data->{'balance_transaction'});
        }
        if (property_exists($data, 'charge')) {
            $object->setCharge($data->{'charge'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'originating_transaction')) {
            $object->setOriginatingTransaction($data->{'originating_transaction'});
        }
        if (property_exists($data, 'refunded')) {
            $object->setRefunded($data->{'refunded'});
        }
        if (property_exists($data, 'refunds')) {
            $object->setRefunds($this->denormalizer->denormalize($data->{'refunds'}, 'Stripe\\Api\\Model\\ApplicationFeeRefunds', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAccount()) {
            $data->{'account'} = $object->getAccount();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAmountRefunded()) {
            $data->{'amount_refunded'} = $object->getAmountRefunded();
        }
        if (null !== $object->getApplication()) {
            $data->{'application'} = $object->getApplication();
        }
        if (null !== $object->getBalanceTransaction()) {
            $data->{'balance_transaction'} = $object->getBalanceTransaction();
        }
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $object->getCharge();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getOriginatingTransaction()) {
            $data->{'originating_transaction'} = $object->getOriginatingTransaction();
        }
        if (null !== $object->getRefunded()) {
            $data->{'refunded'} = $object->getRefunded();
        }
        if (null !== $object->getRefunds()) {
            $data->{'refunds'} = $this->normalizer->normalize($object->getRefunds(), 'json', $context);
        }

        return $data;
    }
}
