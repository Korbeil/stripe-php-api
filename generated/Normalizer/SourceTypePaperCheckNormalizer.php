<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SourceTypePaperCheckNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\SourceTypePaperCheck';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\SourceTypePaperCheck;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\SourceTypePaperCheck();
        if (property_exists($data, 'mailing_address_city')) {
            $object->setMailingAddressCity($data->{'mailing_address_city'});
        }
        if (property_exists($data, 'mailing_address_country')) {
            $object->setMailingAddressCountry($data->{'mailing_address_country'});
        }
        if (property_exists($data, 'mailing_address_line1')) {
            $object->setMailingAddressLine1($data->{'mailing_address_line1'});
        }
        if (property_exists($data, 'mailing_address_line2')) {
            $object->setMailingAddressLine2($data->{'mailing_address_line2'});
        }
        if (property_exists($data, 'mailing_address_postal_code')) {
            $object->setMailingAddressPostalCode($data->{'mailing_address_postal_code'});
        }
        if (property_exists($data, 'mailing_address_state')) {
            $object->setMailingAddressState($data->{'mailing_address_state'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getMailingAddressCity()) {
            $data->{'mailing_address_city'} = $object->getMailingAddressCity();
        }
        if (null !== $object->getMailingAddressCountry()) {
            $data->{'mailing_address_country'} = $object->getMailingAddressCountry();
        }
        if (null !== $object->getMailingAddressLine1()) {
            $data->{'mailing_address_line1'} = $object->getMailingAddressLine1();
        }
        if (null !== $object->getMailingAddressLine2()) {
            $data->{'mailing_address_line2'} = $object->getMailingAddressLine2();
        }
        if (null !== $object->getMailingAddressPostalCode()) {
            $data->{'mailing_address_postal_code'} = $object->getMailingAddressPostalCode();
        }
        if (null !== $object->getMailingAddressState()) {
            $data->{'mailing_address_state'} = $object->getMailingAddressState();
        }

        return $data;
    }
}
