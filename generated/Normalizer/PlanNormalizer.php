<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PlanNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Plan';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Plan;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Plan();
        if (property_exists($data, 'active')) {
            $object->setActive($data->{'active'});
        }
        if (property_exists($data, 'aggregate_usage')) {
            $object->setAggregateUsage($data->{'aggregate_usage'});
        }
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'billing_scheme')) {
            $object->setBillingScheme($data->{'billing_scheme'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'interval')) {
            $object->setInterval($data->{'interval'});
        }
        if (property_exists($data, 'interval_count')) {
            $object->setIntervalCount($data->{'interval_count'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'nickname')) {
            $object->setNickname($data->{'nickname'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'product')) {
            $object->setProduct($data->{'product'});
        }
        if (property_exists($data, 'tiers')) {
            $values = [];
            foreach ($data->{'tiers'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Stripe\\Api\\Model\\PlanTier', 'json', $context);
            }
            $object->setTiers($values);
        }
        if (property_exists($data, 'tiers_mode')) {
            $object->setTiersMode($data->{'tiers_mode'});
        }
        if (property_exists($data, 'transform_usage')) {
            $object->setTransformUsage($this->denormalizer->denormalize($data->{'transform_usage'}, 'Stripe\\Api\\Model\\TransformUsage', 'json', $context));
        }
        if (property_exists($data, 'trial_period_days')) {
            $object->setTrialPeriodDays($data->{'trial_period_days'});
        }
        if (property_exists($data, 'usage_type')) {
            $object->setUsageType($data->{'usage_type'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getActive()) {
            $data->{'active'} = $object->getActive();
        }
        if (null !== $object->getAggregateUsage()) {
            $data->{'aggregate_usage'} = $object->getAggregateUsage();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getBillingScheme()) {
            $data->{'billing_scheme'} = $object->getBillingScheme();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getInterval()) {
            $data->{'interval'} = $object->getInterval();
        }
        if (null !== $object->getIntervalCount()) {
            $data->{'interval_count'} = $object->getIntervalCount();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getNickname()) {
            $data->{'nickname'} = $object->getNickname();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getProduct()) {
            $data->{'product'} = $object->getProduct();
        }
        if (null !== $object->getTiers()) {
            $values = [];
            foreach ($object->getTiers() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'tiers'} = $values;
        }
        if (null !== $object->getTiersMode()) {
            $data->{'tiers_mode'} = $object->getTiersMode();
        }
        if (null !== $object->getTransformUsage()) {
            $data->{'transform_usage'} = $this->normalizer->normalize($object->getTransformUsage(), 'json', $context);
        }
        if (null !== $object->getTrialPeriodDays()) {
            $data->{'trial_period_days'} = $object->getTrialPeriodDays();
        }
        if (null !== $object->getUsageType()) {
            $data->{'usage_type'} = $object->getUsageType();
        }

        return $data;
    }
}
