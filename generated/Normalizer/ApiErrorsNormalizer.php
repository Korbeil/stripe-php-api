<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ApiErrorsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\ApiErrors';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\ApiErrors;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\ApiErrors();
        if (property_exists($data, 'charge')) {
            $object->setCharge($data->{'charge'});
        }
        if (property_exists($data, 'code')) {
            $object->setCode($data->{'code'});
        }
        if (property_exists($data, 'decline_code')) {
            $object->setDeclineCode($data->{'decline_code'});
        }
        if (property_exists($data, 'doc_url')) {
            $object->setDocUrl($data->{'doc_url'});
        }
        if (property_exists($data, 'message')) {
            $object->setMessage($data->{'message'});
        }
        if (property_exists($data, 'param')) {
            $object->setParam($data->{'param'});
        }
        if (property_exists($data, 'payment_intent')) {
            $object->setPaymentIntent($this->denormalizer->denormalize($data->{'payment_intent'}, 'Stripe\\Api\\Model\\PaymentIntent', 'json', $context));
        }
        if (property_exists($data, 'payment_method')) {
            $object->setPaymentMethod($this->denormalizer->denormalize($data->{'payment_method'}, 'Stripe\\Api\\Model\\PaymentMethod', 'json', $context));
        }
        if (property_exists($data, 'source')) {
            $object->setSource($this->denormalizer->denormalize($data->{'source'}, 'Stripe\\Api\\Model\\BankAccount', 'json', $context));
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $object->getCharge();
        }
        if (null !== $object->getCode()) {
            $data->{'code'} = $object->getCode();
        }
        if (null !== $object->getDeclineCode()) {
            $data->{'decline_code'} = $object->getDeclineCode();
        }
        if (null !== $object->getDocUrl()) {
            $data->{'doc_url'} = $object->getDocUrl();
        }
        if (null !== $object->getMessage()) {
            $data->{'message'} = $object->getMessage();
        }
        if (null !== $object->getParam()) {
            $data->{'param'} = $object->getParam();
        }
        if (null !== $object->getPaymentIntent()) {
            $data->{'payment_intent'} = $this->normalizer->normalize($object->getPaymentIntent(), 'json', $context);
        }
        if (null !== $object->getPaymentMethod()) {
            $data->{'payment_method'} = $this->normalizer->normalize($object->getPaymentMethod(), 'json', $context);
        }
        if (null !== $object->getSource()) {
            $data->{'source'} = $this->normalizer->normalize($object->getSource(), 'json', $context);
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }

        return $data;
    }
}
