<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ReviewNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Review';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Review;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Review();
        if (property_exists($data, 'billing_zip')) {
            $object->setBillingZip($data->{'billing_zip'});
        }
        if (property_exists($data, 'charge')) {
            $object->setCharge($data->{'charge'});
        }
        if (property_exists($data, 'closed_reason')) {
            $object->setClosedReason($data->{'closed_reason'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'ip_address')) {
            $object->setIpAddress($data->{'ip_address'});
        }
        if (property_exists($data, 'ip_address_location')) {
            $object->setIpAddressLocation($this->denormalizer->denormalize($data->{'ip_address_location'}, 'Stripe\\Api\\Model\\RadarReviewResourceLocation', 'json', $context));
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'open')) {
            $object->setOpen($data->{'open'});
        }
        if (property_exists($data, 'opened_reason')) {
            $object->setOpenedReason($data->{'opened_reason'});
        }
        if (property_exists($data, 'payment_intent')) {
            $object->setPaymentIntent($data->{'payment_intent'});
        }
        if (property_exists($data, 'reason')) {
            $object->setReason($data->{'reason'});
        }
        if (property_exists($data, 'session')) {
            $object->setSession($this->denormalizer->denormalize($data->{'session'}, 'Stripe\\Api\\Model\\RadarReviewResourceSession', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBillingZip()) {
            $data->{'billing_zip'} = $object->getBillingZip();
        }
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $object->getCharge();
        }
        if (null !== $object->getClosedReason()) {
            $data->{'closed_reason'} = $object->getClosedReason();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIpAddress()) {
            $data->{'ip_address'} = $object->getIpAddress();
        }
        if (null !== $object->getIpAddressLocation()) {
            $data->{'ip_address_location'} = $this->normalizer->normalize($object->getIpAddressLocation(), 'json', $context);
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getOpen()) {
            $data->{'open'} = $object->getOpen();
        }
        if (null !== $object->getOpenedReason()) {
            $data->{'opened_reason'} = $object->getOpenedReason();
        }
        if (null !== $object->getPaymentIntent()) {
            $data->{'payment_intent'} = $object->getPaymentIntent();
        }
        if (null !== $object->getReason()) {
            $data->{'reason'} = $object->getReason();
        }
        if (null !== $object->getSession()) {
            $data->{'session'} = $this->normalizer->normalize($object->getSession(), 'json', $context);
        }

        return $data;
    }
}
