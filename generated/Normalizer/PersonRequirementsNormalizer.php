<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PersonRequirementsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\PersonRequirements';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\PersonRequirements;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\PersonRequirements();
        if (property_exists($data, 'currently_due')) {
            $values = [];
            foreach ($data->{'currently_due'} as $value) {
                $values[] = $value;
            }
            $object->setCurrentlyDue($values);
        }
        if (property_exists($data, 'eventually_due')) {
            $values_1 = [];
            foreach ($data->{'eventually_due'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setEventuallyDue($values_1);
        }
        if (property_exists($data, 'past_due')) {
            $values_2 = [];
            foreach ($data->{'past_due'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setPastDue($values_2);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCurrentlyDue()) {
            $values = [];
            foreach ($object->getCurrentlyDue() as $value) {
                $values[] = $value;
            }
            $data->{'currently_due'} = $values;
        }
        if (null !== $object->getEventuallyDue()) {
            $values_1 = [];
            foreach ($object->getEventuallyDue() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'eventually_due'} = $values_1;
        }
        if (null !== $object->getPastDue()) {
            $values_2 = [];
            foreach ($object->getPastDue() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'past_due'} = $values_2;
        }

        return $data;
    }
}
