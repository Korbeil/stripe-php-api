<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IssuingAuthorizationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\IssuingAuthorization';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\IssuingAuthorization;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\IssuingAuthorization();
        if (property_exists($data, 'approved')) {
            $object->setApproved($data->{'approved'});
        }
        if (property_exists($data, 'authorization_method')) {
            $object->setAuthorizationMethod($data->{'authorization_method'});
        }
        if (property_exists($data, 'authorized_amount')) {
            $object->setAuthorizedAmount($data->{'authorized_amount'});
        }
        if (property_exists($data, 'authorized_currency')) {
            $object->setAuthorizedCurrency($data->{'authorized_currency'});
        }
        if (property_exists($data, 'balance_transactions')) {
            $values = [];
            foreach ($data->{'balance_transactions'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Stripe\\Api\\Model\\BalanceTransaction', 'json', $context);
            }
            $object->setBalanceTransactions($values);
        }
        if (property_exists($data, 'card')) {
            $object->setCard($this->denormalizer->denormalize($data->{'card'}, 'Stripe\\Api\\Model\\IssuingCard', 'json', $context));
        }
        if (property_exists($data, 'cardholder')) {
            $object->setCardholder($data->{'cardholder'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'held_amount')) {
            $object->setHeldAmount($data->{'held_amount'});
        }
        if (property_exists($data, 'held_currency')) {
            $object->setHeldCurrency($data->{'held_currency'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'is_held_amount_controllable')) {
            $object->setIsHeldAmountControllable($data->{'is_held_amount_controllable'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'merchant_data')) {
            $object->setMerchantData($this->denormalizer->denormalize($data->{'merchant_data'}, 'Stripe\\Api\\Model\\IssuingAuthorizationMerchantData', 'json', $context));
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'pending_authorized_amount')) {
            $object->setPendingAuthorizedAmount($data->{'pending_authorized_amount'});
        }
        if (property_exists($data, 'pending_held_amount')) {
            $object->setPendingHeldAmount($data->{'pending_held_amount'});
        }
        if (property_exists($data, 'request_history')) {
            $values_1 = [];
            foreach ($data->{'request_history'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Stripe\\Api\\Model\\IssuingAuthorizationRequest', 'json', $context);
            }
            $object->setRequestHistory($values_1);
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'transactions')) {
            $values_2 = [];
            foreach ($data->{'transactions'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Stripe\\Api\\Model\\IssuingTransaction', 'json', $context);
            }
            $object->setTransactions($values_2);
        }
        if (property_exists($data, 'verification_data')) {
            $object->setVerificationData($this->denormalizer->denormalize($data->{'verification_data'}, 'Stripe\\Api\\Model\\IssuingAuthorizationVerificationData', 'json', $context));
        }
        if (property_exists($data, 'wallet_provider')) {
            $object->setWalletProvider($data->{'wallet_provider'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApproved()) {
            $data->{'approved'} = $object->getApproved();
        }
        if (null !== $object->getAuthorizationMethod()) {
            $data->{'authorization_method'} = $object->getAuthorizationMethod();
        }
        if (null !== $object->getAuthorizedAmount()) {
            $data->{'authorized_amount'} = $object->getAuthorizedAmount();
        }
        if (null !== $object->getAuthorizedCurrency()) {
            $data->{'authorized_currency'} = $object->getAuthorizedCurrency();
        }
        if (null !== $object->getBalanceTransactions()) {
            $values = [];
            foreach ($object->getBalanceTransactions() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'balance_transactions'} = $values;
        }
        if (null !== $object->getCard()) {
            $data->{'card'} = $this->normalizer->normalize($object->getCard(), 'json', $context);
        }
        if (null !== $object->getCardholder()) {
            $data->{'cardholder'} = $object->getCardholder();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getHeldAmount()) {
            $data->{'held_amount'} = $object->getHeldAmount();
        }
        if (null !== $object->getHeldCurrency()) {
            $data->{'held_currency'} = $object->getHeldCurrency();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsHeldAmountControllable()) {
            $data->{'is_held_amount_controllable'} = $object->getIsHeldAmountControllable();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMerchantData()) {
            $data->{'merchant_data'} = $this->normalizer->normalize($object->getMerchantData(), 'json', $context);
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getPendingAuthorizedAmount()) {
            $data->{'pending_authorized_amount'} = $object->getPendingAuthorizedAmount();
        }
        if (null !== $object->getPendingHeldAmount()) {
            $data->{'pending_held_amount'} = $object->getPendingHeldAmount();
        }
        if (null !== $object->getRequestHistory()) {
            $values_1 = [];
            foreach ($object->getRequestHistory() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'request_history'} = $values_1;
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getTransactions()) {
            $values_2 = [];
            foreach ($object->getTransactions() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'transactions'} = $values_2;
        }
        if (null !== $object->getVerificationData()) {
            $data->{'verification_data'} = $this->normalizer->normalize($object->getVerificationData(), 'json', $context);
        }
        if (null !== $object->getWalletProvider()) {
            $data->{'wallet_provider'} = $object->getWalletProvider();
        }

        return $data;
    }
}
