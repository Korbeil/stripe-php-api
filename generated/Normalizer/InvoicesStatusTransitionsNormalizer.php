<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InvoicesStatusTransitionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\InvoicesStatusTransitions';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\InvoicesStatusTransitions;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\InvoicesStatusTransitions();
        if (property_exists($data, 'finalized_at')) {
            $object->setFinalizedAt($data->{'finalized_at'});
        }
        if (property_exists($data, 'marked_uncollectible_at')) {
            $object->setMarkedUncollectibleAt($data->{'marked_uncollectible_at'});
        }
        if (property_exists($data, 'paid_at')) {
            $object->setPaidAt($data->{'paid_at'});
        }
        if (property_exists($data, 'voided_at')) {
            $object->setVoidedAt($data->{'voided_at'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getFinalizedAt()) {
            $data->{'finalized_at'} = $object->getFinalizedAt();
        }
        if (null !== $object->getMarkedUncollectibleAt()) {
            $data->{'marked_uncollectible_at'} = $object->getMarkedUncollectibleAt();
        }
        if (null !== $object->getPaidAt()) {
            $data->{'paid_at'} = $object->getPaidAt();
        }
        if (null !== $object->getVoidedAt()) {
            $data->{'voided_at'} = $object->getVoidedAt();
        }

        return $data;
    }
}
