<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BitcoinReceiverNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\BitcoinReceiver';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\BitcoinReceiver;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\BitcoinReceiver();
        if (property_exists($data, 'active')) {
            $object->setActive($data->{'active'});
        }
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'amount_received')) {
            $object->setAmountReceived($data->{'amount_received'});
        }
        if (property_exists($data, 'bitcoin_amount')) {
            $object->setBitcoinAmount($data->{'bitcoin_amount'});
        }
        if (property_exists($data, 'bitcoin_amount_received')) {
            $object->setBitcoinAmountReceived($data->{'bitcoin_amount_received'});
        }
        if (property_exists($data, 'bitcoin_uri')) {
            $object->setBitcoinUri($data->{'bitcoin_uri'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'email')) {
            $object->setEmail($data->{'email'});
        }
        if (property_exists($data, 'filled')) {
            $object->setFilled($data->{'filled'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'inbound_address')) {
            $object->setInboundAddress($data->{'inbound_address'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'payment')) {
            $object->setPayment($data->{'payment'});
        }
        if (property_exists($data, 'refund_address')) {
            $object->setRefundAddress($data->{'refund_address'});
        }
        if (property_exists($data, 'transactions')) {
            $object->setTransactions($this->denormalizer->denormalize($data->{'transactions'}, 'Stripe\\Api\\Model\\BitcoinReceiverTransactions', 'json', $context));
        }
        if (property_exists($data, 'uncaptured_funds')) {
            $object->setUncapturedFunds($data->{'uncaptured_funds'});
        }
        if (property_exists($data, 'used_for_payment')) {
            $object->setUsedForPayment($data->{'used_for_payment'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getActive()) {
            $data->{'active'} = $object->getActive();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAmountReceived()) {
            $data->{'amount_received'} = $object->getAmountReceived();
        }
        if (null !== $object->getBitcoinAmount()) {
            $data->{'bitcoin_amount'} = $object->getBitcoinAmount();
        }
        if (null !== $object->getBitcoinAmountReceived()) {
            $data->{'bitcoin_amount_received'} = $object->getBitcoinAmountReceived();
        }
        if (null !== $object->getBitcoinUri()) {
            $data->{'bitcoin_uri'} = $object->getBitcoinUri();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getEmail()) {
            $data->{'email'} = $object->getEmail();
        }
        if (null !== $object->getFilled()) {
            $data->{'filled'} = $object->getFilled();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getInboundAddress()) {
            $data->{'inbound_address'} = $object->getInboundAddress();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getPayment()) {
            $data->{'payment'} = $object->getPayment();
        }
        if (null !== $object->getRefundAddress()) {
            $data->{'refund_address'} = $object->getRefundAddress();
        }
        if (null !== $object->getTransactions()) {
            $data->{'transactions'} = $this->normalizer->normalize($object->getTransactions(), 'json', $context);
        }
        if (null !== $object->getUncapturedFunds()) {
            $data->{'uncaptured_funds'} = $object->getUncapturedFunds();
        }
        if (null !== $object->getUsedForPayment()) {
            $data->{'used_for_payment'} = $object->getUsedForPayment();
        }

        return $data;
    }
}
