<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CardNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Card';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Card;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Card();
        if (property_exists($data, 'account')) {
            $object->setAccount($data->{'account'});
        }
        if (property_exists($data, 'address_city')) {
            $object->setAddressCity($data->{'address_city'});
        }
        if (property_exists($data, 'address_country')) {
            $object->setAddressCountry($data->{'address_country'});
        }
        if (property_exists($data, 'address_line1')) {
            $object->setAddressLine1($data->{'address_line1'});
        }
        if (property_exists($data, 'address_line1_check')) {
            $object->setAddressLine1Check($data->{'address_line1_check'});
        }
        if (property_exists($data, 'address_line2')) {
            $object->setAddressLine2($data->{'address_line2'});
        }
        if (property_exists($data, 'address_state')) {
            $object->setAddressState($data->{'address_state'});
        }
        if (property_exists($data, 'address_zip')) {
            $object->setAddressZip($data->{'address_zip'});
        }
        if (property_exists($data, 'address_zip_check')) {
            $object->setAddressZipCheck($data->{'address_zip_check'});
        }
        if (property_exists($data, 'available_payout_methods')) {
            $values = [];
            foreach ($data->{'available_payout_methods'} as $value) {
                $values[] = $value;
            }
            $object->setAvailablePayoutMethods($values);
        }
        if (property_exists($data, 'brand')) {
            $object->setBrand($data->{'brand'});
        }
        if (property_exists($data, 'country')) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'cvc_check')) {
            $object->setCvcCheck($data->{'cvc_check'});
        }
        if (property_exists($data, 'default_for_currency')) {
            $object->setDefaultForCurrency($data->{'default_for_currency'});
        }
        if (property_exists($data, 'dynamic_last4')) {
            $object->setDynamicLast4($data->{'dynamic_last4'});
        }
        if (property_exists($data, 'exp_month')) {
            $object->setExpMonth($data->{'exp_month'});
        }
        if (property_exists($data, 'exp_year')) {
            $object->setExpYear($data->{'exp_year'});
        }
        if (property_exists($data, 'fingerprint')) {
            $object->setFingerprint($data->{'fingerprint'});
        }
        if (property_exists($data, 'funding')) {
            $object->setFunding($data->{'funding'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'last4')) {
            $object->setLast4($data->{'last4'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'recipient')) {
            $object->setRecipient($data->{'recipient'});
        }
        if (property_exists($data, 'tokenization_method')) {
            $object->setTokenizationMethod($data->{'tokenization_method'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAccount()) {
            $data->{'account'} = $object->getAccount();
        }
        if (null !== $object->getAddressCity()) {
            $data->{'address_city'} = $object->getAddressCity();
        }
        if (null !== $object->getAddressCountry()) {
            $data->{'address_country'} = $object->getAddressCountry();
        }
        if (null !== $object->getAddressLine1()) {
            $data->{'address_line1'} = $object->getAddressLine1();
        }
        if (null !== $object->getAddressLine1Check()) {
            $data->{'address_line1_check'} = $object->getAddressLine1Check();
        }
        if (null !== $object->getAddressLine2()) {
            $data->{'address_line2'} = $object->getAddressLine2();
        }
        if (null !== $object->getAddressState()) {
            $data->{'address_state'} = $object->getAddressState();
        }
        if (null !== $object->getAddressZip()) {
            $data->{'address_zip'} = $object->getAddressZip();
        }
        if (null !== $object->getAddressZipCheck()) {
            $data->{'address_zip_check'} = $object->getAddressZipCheck();
        }
        if (null !== $object->getAvailablePayoutMethods()) {
            $values = [];
            foreach ($object->getAvailablePayoutMethods() as $value) {
                $values[] = $value;
            }
            $data->{'available_payout_methods'} = $values;
        }
        if (null !== $object->getBrand()) {
            $data->{'brand'} = $object->getBrand();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getCvcCheck()) {
            $data->{'cvc_check'} = $object->getCvcCheck();
        }
        if (null !== $object->getDefaultForCurrency()) {
            $data->{'default_for_currency'} = $object->getDefaultForCurrency();
        }
        if (null !== $object->getDynamicLast4()) {
            $data->{'dynamic_last4'} = $object->getDynamicLast4();
        }
        if (null !== $object->getExpMonth()) {
            $data->{'exp_month'} = $object->getExpMonth();
        }
        if (null !== $object->getExpYear()) {
            $data->{'exp_year'} = $object->getExpYear();
        }
        if (null !== $object->getFingerprint()) {
            $data->{'fingerprint'} = $object->getFingerprint();
        }
        if (null !== $object->getFunding()) {
            $data->{'funding'} = $object->getFunding();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getLast4()) {
            $data->{'last4'} = $object->getLast4();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getRecipient()) {
            $data->{'recipient'} = $object->getRecipient();
        }
        if (null !== $object->getTokenizationMethod()) {
            $data->{'tokenization_method'} = $object->getTokenizationMethod();
        }

        return $data;
    }
}
