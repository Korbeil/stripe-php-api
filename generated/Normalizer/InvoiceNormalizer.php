<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InvoiceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Invoice';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Invoice;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Invoice();
        if (property_exists($data, 'amount_due')) {
            $object->setAmountDue($data->{'amount_due'});
        }
        if (property_exists($data, 'amount_paid')) {
            $object->setAmountPaid($data->{'amount_paid'});
        }
        if (property_exists($data, 'amount_remaining')) {
            $object->setAmountRemaining($data->{'amount_remaining'});
        }
        if (property_exists($data, 'application_fee_amount')) {
            $object->setApplicationFeeAmount($data->{'application_fee_amount'});
        }
        if (property_exists($data, 'attempt_count')) {
            $object->setAttemptCount($data->{'attempt_count'});
        }
        if (property_exists($data, 'attempted')) {
            $object->setAttempted($data->{'attempted'});
        }
        if (property_exists($data, 'auto_advance')) {
            $object->setAutoAdvance($data->{'auto_advance'});
        }
        if (property_exists($data, 'billing')) {
            $object->setBilling($data->{'billing'});
        }
        if (property_exists($data, 'billing_reason')) {
            $object->setBillingReason($data->{'billing_reason'});
        }
        if (property_exists($data, 'charge')) {
            $object->setCharge($data->{'charge'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'custom_fields')) {
            $values = [];
            foreach ($data->{'custom_fields'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Stripe\\Api\\Model\\InvoiceSettingCustomField', 'json', $context);
            }
            $object->setCustomFields($values);
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'default_source')) {
            $object->setDefaultSource($data->{'default_source'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'discount')) {
            $object->setDiscount($this->denormalizer->denormalize($data->{'discount'}, 'Stripe\\Api\\Model\\Discount', 'json', $context));
        }
        if (property_exists($data, 'due_date')) {
            $object->setDueDate($data->{'due_date'});
        }
        if (property_exists($data, 'ending_balance')) {
            $object->setEndingBalance($data->{'ending_balance'});
        }
        if (property_exists($data, 'footer')) {
            $object->setFooter($data->{'footer'});
        }
        if (property_exists($data, 'hosted_invoice_url')) {
            $object->setHostedInvoiceUrl($data->{'hosted_invoice_url'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'invoice_pdf')) {
            $object->setInvoicePdf($data->{'invoice_pdf'});
        }
        if (property_exists($data, 'lines')) {
            $object->setLines($this->denormalizer->denormalize($data->{'lines'}, 'Stripe\\Api\\Model\\InvoiceLines', 'json', $context));
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'next_payment_attempt')) {
            $object->setNextPaymentAttempt($data->{'next_payment_attempt'});
        }
        if (property_exists($data, 'number')) {
            $object->setNumber($data->{'number'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'paid')) {
            $object->setPaid($data->{'paid'});
        }
        if (property_exists($data, 'period_end')) {
            $object->setPeriodEnd($data->{'period_end'});
        }
        if (property_exists($data, 'period_start')) {
            $object->setPeriodStart($data->{'period_start'});
        }
        if (property_exists($data, 'receipt_number')) {
            $object->setReceiptNumber($data->{'receipt_number'});
        }
        if (property_exists($data, 'starting_balance')) {
            $object->setStartingBalance($data->{'starting_balance'});
        }
        if (property_exists($data, 'statement_descriptor')) {
            $object->setStatementDescriptor($data->{'statement_descriptor'});
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'status_transitions')) {
            $object->setStatusTransitions($this->denormalizer->denormalize($data->{'status_transitions'}, 'Stripe\\Api\\Model\\InvoicesStatusTransitions', 'json', $context));
        }
        if (property_exists($data, 'subscription')) {
            $object->setSubscription($data->{'subscription'});
        }
        if (property_exists($data, 'subscription_proration_date')) {
            $object->setSubscriptionProrationDate($data->{'subscription_proration_date'});
        }
        if (property_exists($data, 'subtotal')) {
            $object->setSubtotal($data->{'subtotal'});
        }
        if (property_exists($data, 'tax')) {
            $object->setTax($data->{'tax'});
        }
        if (property_exists($data, 'tax_percent')) {
            $object->setTaxPercent($data->{'tax_percent'});
        }
        if (property_exists($data, 'threshold_reason')) {
            $object->setThresholdReason($this->denormalizer->denormalize($data->{'threshold_reason'}, 'Stripe\\Api\\Model\\InvoiceThresholdReason', 'json', $context));
        }
        if (property_exists($data, 'total')) {
            $object->setTotal($data->{'total'});
        }
        if (property_exists($data, 'webhooks_delivered_at')) {
            $object->setWebhooksDeliveredAt($data->{'webhooks_delivered_at'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmountDue()) {
            $data->{'amount_due'} = $object->getAmountDue();
        }
        if (null !== $object->getAmountPaid()) {
            $data->{'amount_paid'} = $object->getAmountPaid();
        }
        if (null !== $object->getAmountRemaining()) {
            $data->{'amount_remaining'} = $object->getAmountRemaining();
        }
        if (null !== $object->getApplicationFeeAmount()) {
            $data->{'application_fee_amount'} = $object->getApplicationFeeAmount();
        }
        if (null !== $object->getAttemptCount()) {
            $data->{'attempt_count'} = $object->getAttemptCount();
        }
        if (null !== $object->getAttempted()) {
            $data->{'attempted'} = $object->getAttempted();
        }
        if (null !== $object->getAutoAdvance()) {
            $data->{'auto_advance'} = $object->getAutoAdvance();
        }
        if (null !== $object->getBilling()) {
            $data->{'billing'} = $object->getBilling();
        }
        if (null !== $object->getBillingReason()) {
            $data->{'billing_reason'} = $object->getBillingReason();
        }
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $object->getCharge();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomFields()) {
            $values = [];
            foreach ($object->getCustomFields() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'custom_fields'} = $values;
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getDefaultSource()) {
            $data->{'default_source'} = $object->getDefaultSource();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getDiscount()) {
            $data->{'discount'} = $this->normalizer->normalize($object->getDiscount(), 'json', $context);
        }
        if (null !== $object->getDueDate()) {
            $data->{'due_date'} = $object->getDueDate();
        }
        if (null !== $object->getEndingBalance()) {
            $data->{'ending_balance'} = $object->getEndingBalance();
        }
        if (null !== $object->getFooter()) {
            $data->{'footer'} = $object->getFooter();
        }
        if (null !== $object->getHostedInvoiceUrl()) {
            $data->{'hosted_invoice_url'} = $object->getHostedInvoiceUrl();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getInvoicePdf()) {
            $data->{'invoice_pdf'} = $object->getInvoicePdf();
        }
        if (null !== $object->getLines()) {
            $data->{'lines'} = $this->normalizer->normalize($object->getLines(), 'json', $context);
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getNextPaymentAttempt()) {
            $data->{'next_payment_attempt'} = $object->getNextPaymentAttempt();
        }
        if (null !== $object->getNumber()) {
            $data->{'number'} = $object->getNumber();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getPaid()) {
            $data->{'paid'} = $object->getPaid();
        }
        if (null !== $object->getPeriodEnd()) {
            $data->{'period_end'} = $object->getPeriodEnd();
        }
        if (null !== $object->getPeriodStart()) {
            $data->{'period_start'} = $object->getPeriodStart();
        }
        if (null !== $object->getReceiptNumber()) {
            $data->{'receipt_number'} = $object->getReceiptNumber();
        }
        if (null !== $object->getStartingBalance()) {
            $data->{'starting_balance'} = $object->getStartingBalance();
        }
        if (null !== $object->getStatementDescriptor()) {
            $data->{'statement_descriptor'} = $object->getStatementDescriptor();
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getStatusTransitions()) {
            $data->{'status_transitions'} = $this->normalizer->normalize($object->getStatusTransitions(), 'json', $context);
        }
        if (null !== $object->getSubscription()) {
            $data->{'subscription'} = $object->getSubscription();
        }
        if (null !== $object->getSubscriptionProrationDate()) {
            $data->{'subscription_proration_date'} = $object->getSubscriptionProrationDate();
        }
        if (null !== $object->getSubtotal()) {
            $data->{'subtotal'} = $object->getSubtotal();
        }
        if (null !== $object->getTax()) {
            $data->{'tax'} = $object->getTax();
        }
        if (null !== $object->getTaxPercent()) {
            $data->{'tax_percent'} = $object->getTaxPercent();
        }
        if (null !== $object->getThresholdReason()) {
            $data->{'threshold_reason'} = $this->normalizer->normalize($object->getThresholdReason(), 'json', $context);
        }
        if (null !== $object->getTotal()) {
            $data->{'total'} = $object->getTotal();
        }
        if (null !== $object->getWebhooksDeliveredAt()) {
            $data->{'webhooks_delivered_at'} = $object->getWebhooksDeliveredAt();
        }

        return $data;
    }
}
