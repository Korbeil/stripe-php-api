<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ChargeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Charge';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Charge;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Charge();
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'amount_refunded')) {
            $object->setAmountRefunded($data->{'amount_refunded'});
        }
        if (property_exists($data, 'application')) {
            $object->setApplication($data->{'application'});
        }
        if (property_exists($data, 'application_fee')) {
            $object->setApplicationFee($data->{'application_fee'});
        }
        if (property_exists($data, 'application_fee_amount')) {
            $object->setApplicationFeeAmount($data->{'application_fee_amount'});
        }
        if (property_exists($data, 'balance_transaction')) {
            $object->setBalanceTransaction($data->{'balance_transaction'});
        }
        if (property_exists($data, 'captured')) {
            $object->setCaptured($data->{'captured'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'dispute')) {
            $object->setDispute($data->{'dispute'});
        }
        if (property_exists($data, 'failure_code')) {
            $object->setFailureCode($data->{'failure_code'});
        }
        if (property_exists($data, 'failure_message')) {
            $object->setFailureMessage($data->{'failure_message'});
        }
        if (property_exists($data, 'fraud_details')) {
            $object->setFraudDetails($this->denormalizer->denormalize($data->{'fraud_details'}, 'Stripe\\Api\\Model\\ChargeFraudDetails', 'json', $context));
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'invoice')) {
            $object->setInvoice($data->{'invoice'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'on_behalf_of')) {
            $object->setOnBehalfOf($data->{'on_behalf_of'});
        }
        if (property_exists($data, 'order')) {
            $object->setOrder($data->{'order'});
        }
        if (property_exists($data, 'outcome')) {
            $object->setOutcome($this->denormalizer->denormalize($data->{'outcome'}, 'Stripe\\Api\\Model\\ChargeOutcome', 'json', $context));
        }
        if (property_exists($data, 'paid')) {
            $object->setPaid($data->{'paid'});
        }
        if (property_exists($data, 'payment_intent')) {
            $object->setPaymentIntent($data->{'payment_intent'});
        }
        if (property_exists($data, 'payment_method')) {
            $object->setPaymentMethod($data->{'payment_method'});
        }
        if (property_exists($data, 'payment_method_details')) {
            $object->setPaymentMethodDetails($this->denormalizer->denormalize($data->{'payment_method_details'}, 'Stripe\\Api\\Model\\PaymentMethodDetails', 'json', $context));
        }
        if (property_exists($data, 'receipt_email')) {
            $object->setReceiptEmail($data->{'receipt_email'});
        }
        if (property_exists($data, 'receipt_number')) {
            $object->setReceiptNumber($data->{'receipt_number'});
        }
        if (property_exists($data, 'receipt_url')) {
            $object->setReceiptUrl($data->{'receipt_url'});
        }
        if (property_exists($data, 'refunded')) {
            $object->setRefunded($data->{'refunded'});
        }
        if (property_exists($data, 'refunds')) {
            $object->setRefunds($this->denormalizer->denormalize($data->{'refunds'}, 'Stripe\\Api\\Model\\ChargeRefunds', 'json', $context));
        }
        if (property_exists($data, 'review')) {
            $object->setReview($data->{'review'});
        }
        if (property_exists($data, 'shipping')) {
            $object->setShipping($this->denormalizer->denormalize($data->{'shipping'}, 'Stripe\\Api\\Model\\Shipping', 'json', $context));
        }
        if (property_exists($data, 'source')) {
            $object->setSource($this->denormalizer->denormalize($data->{'source'}, 'Stripe\\Api\\Model\\Account', 'json', $context));
        }
        if (property_exists($data, 'source_transfer')) {
            $object->setSourceTransfer($data->{'source_transfer'});
        }
        if (property_exists($data, 'statement_descriptor')) {
            $object->setStatementDescriptor($data->{'statement_descriptor'});
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'transfer')) {
            $object->setTransfer($data->{'transfer'});
        }
        if (property_exists($data, 'transfer_data')) {
            $object->setTransferData($this->denormalizer->denormalize($data->{'transfer_data'}, 'Stripe\\Api\\Model\\ChargeTransferData', 'json', $context));
        }
        if (property_exists($data, 'transfer_group')) {
            $object->setTransferGroup($data->{'transfer_group'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAmountRefunded()) {
            $data->{'amount_refunded'} = $object->getAmountRefunded();
        }
        if (null !== $object->getApplication()) {
            $data->{'application'} = $object->getApplication();
        }
        if (null !== $object->getApplicationFee()) {
            $data->{'application_fee'} = $object->getApplicationFee();
        }
        if (null !== $object->getApplicationFeeAmount()) {
            $data->{'application_fee_amount'} = $object->getApplicationFeeAmount();
        }
        if (null !== $object->getBalanceTransaction()) {
            $data->{'balance_transaction'} = $object->getBalanceTransaction();
        }
        if (null !== $object->getCaptured()) {
            $data->{'captured'} = $object->getCaptured();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getDispute()) {
            $data->{'dispute'} = $object->getDispute();
        }
        if (null !== $object->getFailureCode()) {
            $data->{'failure_code'} = $object->getFailureCode();
        }
        if (null !== $object->getFailureMessage()) {
            $data->{'failure_message'} = $object->getFailureMessage();
        }
        if (null !== $object->getFraudDetails()) {
            $data->{'fraud_details'} = $this->normalizer->normalize($object->getFraudDetails(), 'json', $context);
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getInvoice()) {
            $data->{'invoice'} = $object->getInvoice();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getOnBehalfOf()) {
            $data->{'on_behalf_of'} = $object->getOnBehalfOf();
        }
        if (null !== $object->getOrder()) {
            $data->{'order'} = $object->getOrder();
        }
        if (null !== $object->getOutcome()) {
            $data->{'outcome'} = $this->normalizer->normalize($object->getOutcome(), 'json', $context);
        }
        if (null !== $object->getPaid()) {
            $data->{'paid'} = $object->getPaid();
        }
        if (null !== $object->getPaymentIntent()) {
            $data->{'payment_intent'} = $object->getPaymentIntent();
        }
        if (null !== $object->getPaymentMethod()) {
            $data->{'payment_method'} = $object->getPaymentMethod();
        }
        if (null !== $object->getPaymentMethodDetails()) {
            $data->{'payment_method_details'} = $this->normalizer->normalize($object->getPaymentMethodDetails(), 'json', $context);
        }
        if (null !== $object->getReceiptEmail()) {
            $data->{'receipt_email'} = $object->getReceiptEmail();
        }
        if (null !== $object->getReceiptNumber()) {
            $data->{'receipt_number'} = $object->getReceiptNumber();
        }
        if (null !== $object->getReceiptUrl()) {
            $data->{'receipt_url'} = $object->getReceiptUrl();
        }
        if (null !== $object->getRefunded()) {
            $data->{'refunded'} = $object->getRefunded();
        }
        if (null !== $object->getRefunds()) {
            $data->{'refunds'} = $this->normalizer->normalize($object->getRefunds(), 'json', $context);
        }
        if (null !== $object->getReview()) {
            $data->{'review'} = $object->getReview();
        }
        if (null !== $object->getShipping()) {
            $data->{'shipping'} = $this->normalizer->normalize($object->getShipping(), 'json', $context);
        }
        if (null !== $object->getSource()) {
            $data->{'source'} = $this->normalizer->normalize($object->getSource(), 'json', $context);
        }
        if (null !== $object->getSourceTransfer()) {
            $data->{'source_transfer'} = $object->getSourceTransfer();
        }
        if (null !== $object->getStatementDescriptor()) {
            $data->{'statement_descriptor'} = $object->getStatementDescriptor();
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getTransfer()) {
            $data->{'transfer'} = $object->getTransfer();
        }
        if (null !== $object->getTransferData()) {
            $data->{'transfer_data'} = $this->normalizer->normalize($object->getTransferData(), 'json', $context);
        }
        if (null !== $object->getTransferGroup()) {
            $data->{'transfer_group'} = $object->getTransferGroup();
        }

        return $data;
    }
}
