<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IssuingAuthorizationRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\IssuingAuthorizationRequest';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\IssuingAuthorizationRequest;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\IssuingAuthorizationRequest();
        if (property_exists($data, 'approved')) {
            $object->setApproved($data->{'approved'});
        }
        if (property_exists($data, 'authorized_amount')) {
            $object->setAuthorizedAmount($data->{'authorized_amount'});
        }
        if (property_exists($data, 'authorized_currency')) {
            $object->setAuthorizedCurrency($data->{'authorized_currency'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'held_amount')) {
            $object->setHeldAmount($data->{'held_amount'});
        }
        if (property_exists($data, 'held_currency')) {
            $object->setHeldCurrency($data->{'held_currency'});
        }
        if (property_exists($data, 'reason')) {
            $object->setReason($data->{'reason'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApproved()) {
            $data->{'approved'} = $object->getApproved();
        }
        if (null !== $object->getAuthorizedAmount()) {
            $data->{'authorized_amount'} = $object->getAuthorizedAmount();
        }
        if (null !== $object->getAuthorizedCurrency()) {
            $data->{'authorized_currency'} = $object->getAuthorizedCurrency();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getHeldAmount()) {
            $data->{'held_amount'} = $object->getHeldAmount();
        }
        if (null !== $object->getHeldCurrency()) {
            $data->{'held_currency'} = $object->getHeldCurrency();
        }
        if (null !== $object->getReason()) {
            $data->{'reason'} = $object->getReason();
        }

        return $data;
    }
}
