<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SourceTypeCardNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\SourceTypeCard';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\SourceTypeCard;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\SourceTypeCard();
        if (property_exists($data, 'address_line1_check')) {
            $object->setAddressLine1Check($data->{'address_line1_check'});
        }
        if (property_exists($data, 'address_zip_check')) {
            $object->setAddressZipCheck($data->{'address_zip_check'});
        }
        if (property_exists($data, 'brand')) {
            $object->setBrand($data->{'brand'});
        }
        if (property_exists($data, 'country')) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'cvc_check')) {
            $object->setCvcCheck($data->{'cvc_check'});
        }
        if (property_exists($data, 'dynamic_last4')) {
            $object->setDynamicLast4($data->{'dynamic_last4'});
        }
        if (property_exists($data, 'exp_month')) {
            $object->setExpMonth($data->{'exp_month'});
        }
        if (property_exists($data, 'exp_year')) {
            $object->setExpYear($data->{'exp_year'});
        }
        if (property_exists($data, 'fingerprint')) {
            $object->setFingerprint($data->{'fingerprint'});
        }
        if (property_exists($data, 'funding')) {
            $object->setFunding($data->{'funding'});
        }
        if (property_exists($data, 'last4')) {
            $object->setLast4($data->{'last4'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'three_d_secure')) {
            $object->setThreeDSecure($data->{'three_d_secure'});
        }
        if (property_exists($data, 'tokenization_method')) {
            $object->setTokenizationMethod($data->{'tokenization_method'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddressLine1Check()) {
            $data->{'address_line1_check'} = $object->getAddressLine1Check();
        }
        if (null !== $object->getAddressZipCheck()) {
            $data->{'address_zip_check'} = $object->getAddressZipCheck();
        }
        if (null !== $object->getBrand()) {
            $data->{'brand'} = $object->getBrand();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getCvcCheck()) {
            $data->{'cvc_check'} = $object->getCvcCheck();
        }
        if (null !== $object->getDynamicLast4()) {
            $data->{'dynamic_last4'} = $object->getDynamicLast4();
        }
        if (null !== $object->getExpMonth()) {
            $data->{'exp_month'} = $object->getExpMonth();
        }
        if (null !== $object->getExpYear()) {
            $data->{'exp_year'} = $object->getExpYear();
        }
        if (null !== $object->getFingerprint()) {
            $data->{'fingerprint'} = $object->getFingerprint();
        }
        if (null !== $object->getFunding()) {
            $data->{'funding'} = $object->getFunding();
        }
        if (null !== $object->getLast4()) {
            $data->{'last4'} = $object->getLast4();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getThreeDSecure()) {
            $data->{'three_d_secure'} = $object->getThreeDSecure();
        }
        if (null !== $object->getTokenizationMethod()) {
            $data->{'tokenization_method'} = $object->getTokenizationMethod();
        }

        return $data;
    }
}
