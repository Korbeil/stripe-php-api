<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AccountNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Account';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Account;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Account();
        if (property_exists($data, 'business_profile')) {
            $object->setBusinessProfile($this->denormalizer->denormalize($data->{'business_profile'}, 'Stripe\\Api\\Model\\AccountBusinessProfile', 'json', $context));
        }
        if (property_exists($data, 'business_type')) {
            $object->setBusinessType($data->{'business_type'});
        }
        if (property_exists($data, 'capabilities')) {
            $object->setCapabilities($this->denormalizer->denormalize($data->{'capabilities'}, 'Stripe\\Api\\Model\\AccountCapabilities', 'json', $context));
        }
        if (property_exists($data, 'charges_enabled')) {
            $object->setChargesEnabled($data->{'charges_enabled'});
        }
        if (property_exists($data, 'company')) {
            $object->setCompany($this->denormalizer->denormalize($data->{'company'}, 'Stripe\\Api\\Model\\LegalEntityCompany', 'json', $context));
        }
        if (property_exists($data, 'country')) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'default_currency')) {
            $object->setDefaultCurrency($data->{'default_currency'});
        }
        if (property_exists($data, 'details_submitted')) {
            $object->setDetailsSubmitted($data->{'details_submitted'});
        }
        if (property_exists($data, 'email')) {
            $object->setEmail($data->{'email'});
        }
        if (property_exists($data, 'external_accounts')) {
            $object->setExternalAccounts($this->denormalizer->denormalize($data->{'external_accounts'}, 'Stripe\\Api\\Model\\AccountExternalAccounts', 'json', $context));
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'individual')) {
            $object->setIndividual($this->denormalizer->denormalize($data->{'individual'}, 'Stripe\\Api\\Model\\Person', 'json', $context));
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'payouts_enabled')) {
            $object->setPayoutsEnabled($data->{'payouts_enabled'});
        }
        if (property_exists($data, 'requirements')) {
            $object->setRequirements($this->denormalizer->denormalize($data->{'requirements'}, 'Stripe\\Api\\Model\\AccountRequirements', 'json', $context));
        }
        if (property_exists($data, 'settings')) {
            $object->setSettings($this->denormalizer->denormalize($data->{'settings'}, 'Stripe\\Api\\Model\\AccountSettings', 'json', $context));
        }
        if (property_exists($data, 'tos_acceptance')) {
            $object->setTosAcceptance($this->denormalizer->denormalize($data->{'tos_acceptance'}, 'Stripe\\Api\\Model\\AccountTosAcceptance', 'json', $context));
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBusinessProfile()) {
            $data->{'business_profile'} = $this->normalizer->normalize($object->getBusinessProfile(), 'json', $context);
        }
        if (null !== $object->getBusinessType()) {
            $data->{'business_type'} = $object->getBusinessType();
        }
        if (null !== $object->getCapabilities()) {
            $data->{'capabilities'} = $this->normalizer->normalize($object->getCapabilities(), 'json', $context);
        }
        if (null !== $object->getChargesEnabled()) {
            $data->{'charges_enabled'} = $object->getChargesEnabled();
        }
        if (null !== $object->getCompany()) {
            $data->{'company'} = $this->normalizer->normalize($object->getCompany(), 'json', $context);
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getDefaultCurrency()) {
            $data->{'default_currency'} = $object->getDefaultCurrency();
        }
        if (null !== $object->getDetailsSubmitted()) {
            $data->{'details_submitted'} = $object->getDetailsSubmitted();
        }
        if (null !== $object->getEmail()) {
            $data->{'email'} = $object->getEmail();
        }
        if (null !== $object->getExternalAccounts()) {
            $data->{'external_accounts'} = $this->normalizer->normalize($object->getExternalAccounts(), 'json', $context);
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIndividual()) {
            $data->{'individual'} = $this->normalizer->normalize($object->getIndividual(), 'json', $context);
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getPayoutsEnabled()) {
            $data->{'payouts_enabled'} = $object->getPayoutsEnabled();
        }
        if (null !== $object->getRequirements()) {
            $data->{'requirements'} = $this->normalizer->normalize($object->getRequirements(), 'json', $context);
        }
        if (null !== $object->getSettings()) {
            $data->{'settings'} = $this->normalizer->normalize($object->getSettings(), 'json', $context);
        }
        if (null !== $object->getTosAcceptance()) {
            $data->{'tos_acceptance'} = $this->normalizer->normalize($object->getTosAcceptance(), 'json', $context);
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }

        return $data;
    }
}
