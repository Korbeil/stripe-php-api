<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PaymentMethodDetailsCardPresentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\PaymentMethodDetailsCardPresent';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\PaymentMethodDetailsCardPresent;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\PaymentMethodDetailsCardPresent();
        if (property_exists($data, 'brand')) {
            $object->setBrand($data->{'brand'});
        }
        if (property_exists($data, 'country')) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'emv_auth_data')) {
            $object->setEmvAuthData($data->{'emv_auth_data'});
        }
        if (property_exists($data, 'exp_month')) {
            $object->setExpMonth($data->{'exp_month'});
        }
        if (property_exists($data, 'exp_year')) {
            $object->setExpYear($data->{'exp_year'});
        }
        if (property_exists($data, 'fingerprint')) {
            $object->setFingerprint($data->{'fingerprint'});
        }
        if (property_exists($data, 'funding')) {
            $object->setFunding($data->{'funding'});
        }
        if (property_exists($data, 'generated_card')) {
            $object->setGeneratedCard($data->{'generated_card'});
        }
        if (property_exists($data, 'last4')) {
            $object->setLast4($data->{'last4'});
        }
        if (property_exists($data, 'read_method')) {
            $object->setReadMethod($data->{'read_method'});
        }
        if (property_exists($data, 'receipt')) {
            $object->setReceipt($this->denormalizer->denormalize($data->{'receipt'}, 'Stripe\\Api\\Model\\PaymentMethodDetailsCardPresentReceipt', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getBrand()) {
            $data->{'brand'} = $object->getBrand();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getEmvAuthData()) {
            $data->{'emv_auth_data'} = $object->getEmvAuthData();
        }
        if (null !== $object->getExpMonth()) {
            $data->{'exp_month'} = $object->getExpMonth();
        }
        if (null !== $object->getExpYear()) {
            $data->{'exp_year'} = $object->getExpYear();
        }
        if (null !== $object->getFingerprint()) {
            $data->{'fingerprint'} = $object->getFingerprint();
        }
        if (null !== $object->getFunding()) {
            $data->{'funding'} = $object->getFunding();
        }
        if (null !== $object->getGeneratedCard()) {
            $data->{'generated_card'} = $object->getGeneratedCard();
        }
        if (null !== $object->getLast4()) {
            $data->{'last4'} = $object->getLast4();
        }
        if (null !== $object->getReadMethod()) {
            $data->{'read_method'} = $object->getReadMethod();
        }
        if (null !== $object->getReceipt()) {
            $data->{'receipt'} = $this->normalizer->normalize($object->getReceipt(), 'json', $context);
        }

        return $data;
    }
}
