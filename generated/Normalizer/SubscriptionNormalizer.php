<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SubscriptionNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Subscription';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Subscription;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Subscription();
        if (property_exists($data, 'application_fee_percent')) {
            $object->setApplicationFeePercent($data->{'application_fee_percent'});
        }
        if (property_exists($data, 'billing')) {
            $object->setBilling($data->{'billing'});
        }
        if (property_exists($data, 'billing_cycle_anchor')) {
            $object->setBillingCycleAnchor($data->{'billing_cycle_anchor'});
        }
        if (property_exists($data, 'billing_thresholds')) {
            $object->setBillingThresholds($this->denormalizer->denormalize($data->{'billing_thresholds'}, 'Stripe\\Api\\Model\\SubscriptionBillingThresholds', 'json', $context));
        }
        if (property_exists($data, 'cancel_at_period_end')) {
            $object->setCancelAtPeriodEnd($data->{'cancel_at_period_end'});
        }
        if (property_exists($data, 'canceled_at')) {
            $object->setCanceledAt($data->{'canceled_at'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'current_period_end')) {
            $object->setCurrentPeriodEnd($data->{'current_period_end'});
        }
        if (property_exists($data, 'current_period_start')) {
            $object->setCurrentPeriodStart($data->{'current_period_start'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'days_until_due')) {
            $object->setDaysUntilDue($data->{'days_until_due'});
        }
        if (property_exists($data, 'default_source')) {
            $object->setDefaultSource($data->{'default_source'});
        }
        if (property_exists($data, 'discount')) {
            $object->setDiscount($this->denormalizer->denormalize($data->{'discount'}, 'Stripe\\Api\\Model\\Discount', 'json', $context));
        }
        if (property_exists($data, 'ended_at')) {
            $object->setEndedAt($data->{'ended_at'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'items')) {
            $object->setItems($this->denormalizer->denormalize($data->{'items'}, 'Stripe\\Api\\Model\\SubscriptionItems', 'json', $context));
        }
        if (property_exists($data, 'latest_invoice')) {
            $object->setLatestInvoice($data->{'latest_invoice'});
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'plan')) {
            $object->setPlan($this->denormalizer->denormalize($data->{'plan'}, 'Stripe\\Api\\Model\\Plan', 'json', $context));
        }
        if (property_exists($data, 'quantity')) {
            $object->setQuantity($data->{'quantity'});
        }
        if (property_exists($data, 'start')) {
            $object->setStart($data->{'start'});
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'tax_percent')) {
            $object->setTaxPercent($data->{'tax_percent'});
        }
        if (property_exists($data, 'trial_end')) {
            $object->setTrialEnd($data->{'trial_end'});
        }
        if (property_exists($data, 'trial_start')) {
            $object->setTrialStart($data->{'trial_start'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApplicationFeePercent()) {
            $data->{'application_fee_percent'} = $object->getApplicationFeePercent();
        }
        if (null !== $object->getBilling()) {
            $data->{'billing'} = $object->getBilling();
        }
        if (null !== $object->getBillingCycleAnchor()) {
            $data->{'billing_cycle_anchor'} = $object->getBillingCycleAnchor();
        }
        if (null !== $object->getBillingThresholds()) {
            $data->{'billing_thresholds'} = $this->normalizer->normalize($object->getBillingThresholds(), 'json', $context);
        }
        if (null !== $object->getCancelAtPeriodEnd()) {
            $data->{'cancel_at_period_end'} = $object->getCancelAtPeriodEnd();
        }
        if (null !== $object->getCanceledAt()) {
            $data->{'canceled_at'} = $object->getCanceledAt();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrentPeriodEnd()) {
            $data->{'current_period_end'} = $object->getCurrentPeriodEnd();
        }
        if (null !== $object->getCurrentPeriodStart()) {
            $data->{'current_period_start'} = $object->getCurrentPeriodStart();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getDaysUntilDue()) {
            $data->{'days_until_due'} = $object->getDaysUntilDue();
        }
        if (null !== $object->getDefaultSource()) {
            $data->{'default_source'} = $object->getDefaultSource();
        }
        if (null !== $object->getDiscount()) {
            $data->{'discount'} = $this->normalizer->normalize($object->getDiscount(), 'json', $context);
        }
        if (null !== $object->getEndedAt()) {
            $data->{'ended_at'} = $object->getEndedAt();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getItems()) {
            $data->{'items'} = $this->normalizer->normalize($object->getItems(), 'json', $context);
        }
        if (null !== $object->getLatestInvoice()) {
            $data->{'latest_invoice'} = $object->getLatestInvoice();
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getPlan()) {
            $data->{'plan'} = $this->normalizer->normalize($object->getPlan(), 'json', $context);
        }
        if (null !== $object->getQuantity()) {
            $data->{'quantity'} = $object->getQuantity();
        }
        if (null !== $object->getStart()) {
            $data->{'start'} = $object->getStart();
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getTaxPercent()) {
            $data->{'tax_percent'} = $object->getTaxPercent();
        }
        if (null !== $object->getTrialEnd()) {
            $data->{'trial_end'} = $object->getTrialEnd();
        }
        if (null !== $object->getTrialStart()) {
            $data->{'trial_start'} = $object->getTrialStart();
        }

        return $data;
    }
}
