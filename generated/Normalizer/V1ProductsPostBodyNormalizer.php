<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class V1ProductsPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\V1ProductsPostBody';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\V1ProductsPostBody;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\V1ProductsPostBody();
        if (property_exists($data, 'active')) {
            $object->setActive($data->{'active'});
        }
        if (property_exists($data, 'attributes')) {
            $values = [];
            foreach ($data->{'attributes'} as $value) {
                $values[] = $value;
            }
            $object->setAttributes($values);
        }
        if (property_exists($data, 'caption')) {
            $object->setCaption($data->{'caption'});
        }
        if (property_exists($data, 'deactivate_on')) {
            $values_1 = [];
            foreach ($data->{'deactivate_on'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setDeactivateOn($values_1);
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'expand')) {
            $values_2 = [];
            foreach ($data->{'expand'} as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setExpand($values_2);
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'images')) {
            $values_3 = [];
            foreach ($data->{'images'} as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setImages($values_3);
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'name')) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'package_dimensions')) {
            $object->setPackageDimensions($this->denormalizer->denormalize($data->{'package_dimensions'}, 'Stripe\\Api\\Model\\V1ProductsPostBodyPackageDimensions', 'json', $context));
        }
        if (property_exists($data, 'shippable')) {
            $object->setShippable($data->{'shippable'});
        }
        if (property_exists($data, 'statement_descriptor')) {
            $object->setStatementDescriptor($data->{'statement_descriptor'});
        }
        if (property_exists($data, 'type')) {
            $object->setType($data->{'type'});
        }
        if (property_exists($data, 'unit_label')) {
            $object->setUnitLabel($data->{'unit_label'});
        }
        if (property_exists($data, 'url')) {
            $object->setUrl($data->{'url'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getActive()) {
            $data->{'active'} = $object->getActive();
        }
        if (null !== $object->getAttributes()) {
            $values = [];
            foreach ($object->getAttributes() as $value) {
                $values[] = $value;
            }
            $data->{'attributes'} = $values;
        }
        if (null !== $object->getCaption()) {
            $data->{'caption'} = $object->getCaption();
        }
        if (null !== $object->getDeactivateOn()) {
            $values_1 = [];
            foreach ($object->getDeactivateOn() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'deactivate_on'} = $values_1;
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getExpand()) {
            $values_2 = [];
            foreach ($object->getExpand() as $value_2) {
                $values_2[] = $value_2;
            }
            $data->{'expand'} = $values_2;
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getImages()) {
            $values_3 = [];
            foreach ($object->getImages() as $value_3) {
                $values_3[] = $value_3;
            }
            $data->{'images'} = $values_3;
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getPackageDimensions()) {
            $data->{'package_dimensions'} = $this->normalizer->normalize($object->getPackageDimensions(), 'json', $context);
        }
        if (null !== $object->getShippable()) {
            $data->{'shippable'} = $object->getShippable();
        }
        if (null !== $object->getStatementDescriptor()) {
            $data->{'statement_descriptor'} = $object->getStatementDescriptor();
        }
        if (null !== $object->getType()) {
            $data->{'type'} = $object->getType();
        }
        if (null !== $object->getUnitLabel()) {
            $data->{'unit_label'} = $object->getUnitLabel();
        }
        if (null !== $object->getUrl()) {
            $data->{'url'} = $object->getUrl();
        }

        return $data;
    }
}
