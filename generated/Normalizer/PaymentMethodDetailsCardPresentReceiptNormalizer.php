<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PaymentMethodDetailsCardPresentReceiptNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\PaymentMethodDetailsCardPresentReceipt';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\PaymentMethodDetailsCardPresentReceipt;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\PaymentMethodDetailsCardPresentReceipt();
        if (property_exists($data, 'application_cryptogram')) {
            $object->setApplicationCryptogram($data->{'application_cryptogram'});
        }
        if (property_exists($data, 'application_preferred_name')) {
            $object->setApplicationPreferredName($data->{'application_preferred_name'});
        }
        if (property_exists($data, 'authorization_code')) {
            $object->setAuthorizationCode($data->{'authorization_code'});
        }
        if (property_exists($data, 'authorization_response_code')) {
            $object->setAuthorizationResponseCode($data->{'authorization_response_code'});
        }
        if (property_exists($data, 'cardholder_verification_method')) {
            $object->setCardholderVerificationMethod($data->{'cardholder_verification_method'});
        }
        if (property_exists($data, 'dedicated_file_name')) {
            $object->setDedicatedFileName($data->{'dedicated_file_name'});
        }
        if (property_exists($data, 'terminal_verification_results')) {
            $object->setTerminalVerificationResults($data->{'terminal_verification_results'});
        }
        if (property_exists($data, 'transaction_status_information')) {
            $object->setTransactionStatusInformation($data->{'transaction_status_information'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getApplicationCryptogram()) {
            $data->{'application_cryptogram'} = $object->getApplicationCryptogram();
        }
        if (null !== $object->getApplicationPreferredName()) {
            $data->{'application_preferred_name'} = $object->getApplicationPreferredName();
        }
        if (null !== $object->getAuthorizationCode()) {
            $data->{'authorization_code'} = $object->getAuthorizationCode();
        }
        if (null !== $object->getAuthorizationResponseCode()) {
            $data->{'authorization_response_code'} = $object->getAuthorizationResponseCode();
        }
        if (null !== $object->getCardholderVerificationMethod()) {
            $data->{'cardholder_verification_method'} = $object->getCardholderVerificationMethod();
        }
        if (null !== $object->getDedicatedFileName()) {
            $data->{'dedicated_file_name'} = $object->getDedicatedFileName();
        }
        if (null !== $object->getTerminalVerificationResults()) {
            $data->{'terminal_verification_results'} = $object->getTerminalVerificationResults();
        }
        if (null !== $object->getTransactionStatusInformation()) {
            $data->{'transaction_status_information'} = $object->getTransactionStatusInformation();
        }

        return $data;
    }
}
