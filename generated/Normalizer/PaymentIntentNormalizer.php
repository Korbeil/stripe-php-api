<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PaymentIntentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\PaymentIntent';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\PaymentIntent;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\PaymentIntent();
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'amount_capturable')) {
            $object->setAmountCapturable($data->{'amount_capturable'});
        }
        if (property_exists($data, 'amount_received')) {
            $object->setAmountReceived($data->{'amount_received'});
        }
        if (property_exists($data, 'application')) {
            $object->setApplication($data->{'application'});
        }
        if (property_exists($data, 'application_fee_amount')) {
            $object->setApplicationFeeAmount($data->{'application_fee_amount'});
        }
        if (property_exists($data, 'canceled_at')) {
            $object->setCanceledAt($data->{'canceled_at'});
        }
        if (property_exists($data, 'cancellation_reason')) {
            $object->setCancellationReason($data->{'cancellation_reason'});
        }
        if (property_exists($data, 'capture_method')) {
            $object->setCaptureMethod($data->{'capture_method'});
        }
        if (property_exists($data, 'charges')) {
            $object->setCharges($this->denormalizer->denormalize($data->{'charges'}, 'Stripe\\Api\\Model\\PaymentIntentCharges', 'json', $context));
        }
        if (property_exists($data, 'client_secret')) {
            $object->setClientSecret($data->{'client_secret'});
        }
        if (property_exists($data, 'confirmation_method')) {
            $object->setConfirmationMethod($data->{'confirmation_method'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'description')) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'last_payment_error')) {
            $object->setLastPaymentError($this->denormalizer->denormalize($data->{'last_payment_error'}, 'Stripe\\Api\\Model\\ApiErrors', 'json', $context));
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'next_action')) {
            $object->setNextAction($this->denormalizer->denormalize($data->{'next_action'}, 'Stripe\\Api\\Model\\PaymentIntentNextAction', 'json', $context));
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'on_behalf_of')) {
            $object->setOnBehalfOf($data->{'on_behalf_of'});
        }
        if (property_exists($data, 'payment_method')) {
            $object->setPaymentMethod($data->{'payment_method'});
        }
        if (property_exists($data, 'payment_method_types')) {
            $values = [];
            foreach ($data->{'payment_method_types'} as $value) {
                $values[] = $value;
            }
            $object->setPaymentMethodTypes($values);
        }
        if (property_exists($data, 'receipt_email')) {
            $object->setReceiptEmail($data->{'receipt_email'});
        }
        if (property_exists($data, 'review')) {
            $object->setReview($data->{'review'});
        }
        if (property_exists($data, 'shipping')) {
            $object->setShipping($this->denormalizer->denormalize($data->{'shipping'}, 'Stripe\\Api\\Model\\Shipping', 'json', $context));
        }
        if (property_exists($data, 'source')) {
            $object->setSource($data->{'source'});
        }
        if (property_exists($data, 'statement_descriptor')) {
            $object->setStatementDescriptor($data->{'statement_descriptor'});
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'transfer_data')) {
            $object->setTransferData($this->denormalizer->denormalize($data->{'transfer_data'}, 'Stripe\\Api\\Model\\TransferData', 'json', $context));
        }
        if (property_exists($data, 'transfer_group')) {
            $object->setTransferGroup($data->{'transfer_group'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAmountCapturable()) {
            $data->{'amount_capturable'} = $object->getAmountCapturable();
        }
        if (null !== $object->getAmountReceived()) {
            $data->{'amount_received'} = $object->getAmountReceived();
        }
        if (null !== $object->getApplication()) {
            $data->{'application'} = $object->getApplication();
        }
        if (null !== $object->getApplicationFeeAmount()) {
            $data->{'application_fee_amount'} = $object->getApplicationFeeAmount();
        }
        if (null !== $object->getCanceledAt()) {
            $data->{'canceled_at'} = $object->getCanceledAt();
        }
        if (null !== $object->getCancellationReason()) {
            $data->{'cancellation_reason'} = $object->getCancellationReason();
        }
        if (null !== $object->getCaptureMethod()) {
            $data->{'capture_method'} = $object->getCaptureMethod();
        }
        if (null !== $object->getCharges()) {
            $data->{'charges'} = $this->normalizer->normalize($object->getCharges(), 'json', $context);
        }
        if (null !== $object->getClientSecret()) {
            $data->{'client_secret'} = $object->getClientSecret();
        }
        if (null !== $object->getConfirmationMethod()) {
            $data->{'confirmation_method'} = $object->getConfirmationMethod();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getLastPaymentError()) {
            $data->{'last_payment_error'} = $this->normalizer->normalize($object->getLastPaymentError(), 'json', $context);
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getNextAction()) {
            $data->{'next_action'} = $this->normalizer->normalize($object->getNextAction(), 'json', $context);
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getOnBehalfOf()) {
            $data->{'on_behalf_of'} = $object->getOnBehalfOf();
        }
        if (null !== $object->getPaymentMethod()) {
            $data->{'payment_method'} = $object->getPaymentMethod();
        }
        if (null !== $object->getPaymentMethodTypes()) {
            $values = [];
            foreach ($object->getPaymentMethodTypes() as $value) {
                $values[] = $value;
            }
            $data->{'payment_method_types'} = $values;
        }
        if (null !== $object->getReceiptEmail()) {
            $data->{'receipt_email'} = $object->getReceiptEmail();
        }
        if (null !== $object->getReview()) {
            $data->{'review'} = $object->getReview();
        }
        if (null !== $object->getShipping()) {
            $data->{'shipping'} = $this->normalizer->normalize($object->getShipping(), 'json', $context);
        }
        if (null !== $object->getSource()) {
            $data->{'source'} = $object->getSource();
        }
        if (null !== $object->getStatementDescriptor()) {
            $data->{'statement_descriptor'} = $object->getStatementDescriptor();
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getTransferData()) {
            $data->{'transfer_data'} = $this->normalizer->normalize($object->getTransferData(), 'json', $context);
        }
        if (null !== $object->getTransferGroup()) {
            $data->{'transfer_group'} = $object->getTransferGroup();
        }

        return $data;
    }
}
