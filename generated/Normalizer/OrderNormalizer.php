<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class OrderNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\Order';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\Order;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\Order();
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'amount_returned')) {
            $object->setAmountReturned($data->{'amount_returned'});
        }
        if (property_exists($data, 'application')) {
            $object->setApplication($data->{'application'});
        }
        if (property_exists($data, 'application_fee')) {
            $object->setApplicationFee($data->{'application_fee'});
        }
        if (property_exists($data, 'charge')) {
            $object->setCharge($data->{'charge'});
        }
        if (property_exists($data, 'created')) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'customer')) {
            $object->setCustomer($data->{'customer'});
        }
        if (property_exists($data, 'email')) {
            $object->setEmail($data->{'email'});
        }
        if (property_exists($data, 'external_coupon_code')) {
            $object->setExternalCouponCode($data->{'external_coupon_code'});
        }
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'items')) {
            $values = [];
            foreach ($data->{'items'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Stripe\\Api\\Model\\OrderItem', 'json', $context);
            }
            $object->setItems($values);
        }
        if (property_exists($data, 'livemode')) {
            $object->setLivemode($data->{'livemode'});
        }
        if (property_exists($data, 'metadata')) {
            $object->setMetadata($data->{'metadata'});
        }
        if (property_exists($data, 'object')) {
            $object->setObject($data->{'object'});
        }
        if (property_exists($data, 'returns')) {
            $object->setReturns($this->denormalizer->denormalize($data->{'returns'}, 'Stripe\\Api\\Model\\OrderReturns', 'json', $context));
        }
        if (property_exists($data, 'selected_shipping_method')) {
            $object->setSelectedShippingMethod($data->{'selected_shipping_method'});
        }
        if (property_exists($data, 'shipping')) {
            $object->setShipping($this->denormalizer->denormalize($data->{'shipping'}, 'Stripe\\Api\\Model\\Shipping', 'json', $context));
        }
        if (property_exists($data, 'shipping_methods')) {
            $values_1 = [];
            foreach ($data->{'shipping_methods'} as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'Stripe\\Api\\Model\\ShippingMethod', 'json', $context);
            }
            $object->setShippingMethods($values_1);
        }
        if (property_exists($data, 'status')) {
            $object->setStatus($data->{'status'});
        }
        if (property_exists($data, 'status_transitions')) {
            $object->setStatusTransitions($this->denormalizer->denormalize($data->{'status_transitions'}, 'Stripe\\Api\\Model\\StatusTransitions', 'json', $context));
        }
        if (property_exists($data, 'updated')) {
            $object->setUpdated($data->{'updated'});
        }
        if (property_exists($data, 'upstream_id')) {
            $object->setUpstreamId($data->{'upstream_id'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getAmountReturned()) {
            $data->{'amount_returned'} = $object->getAmountReturned();
        }
        if (null !== $object->getApplication()) {
            $data->{'application'} = $object->getApplication();
        }
        if (null !== $object->getApplicationFee()) {
            $data->{'application_fee'} = $object->getApplicationFee();
        }
        if (null !== $object->getCharge()) {
            $data->{'charge'} = $object->getCharge();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getCustomer()) {
            $data->{'customer'} = $object->getCustomer();
        }
        if (null !== $object->getEmail()) {
            $data->{'email'} = $object->getEmail();
        }
        if (null !== $object->getExternalCouponCode()) {
            $data->{'external_coupon_code'} = $object->getExternalCouponCode();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getItems()) {
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'items'} = $values;
        }
        if (null !== $object->getLivemode()) {
            $data->{'livemode'} = $object->getLivemode();
        }
        if (null !== $object->getMetadata()) {
            $data->{'metadata'} = $object->getMetadata();
        }
        if (null !== $object->getObject()) {
            $data->{'object'} = $object->getObject();
        }
        if (null !== $object->getReturns()) {
            $data->{'returns'} = $this->normalizer->normalize($object->getReturns(), 'json', $context);
        }
        if (null !== $object->getSelectedShippingMethod()) {
            $data->{'selected_shipping_method'} = $object->getSelectedShippingMethod();
        }
        if (null !== $object->getShipping()) {
            $data->{'shipping'} = $this->normalizer->normalize($object->getShipping(), 'json', $context);
        }
        if (null !== $object->getShippingMethods()) {
            $values_1 = [];
            foreach ($object->getShippingMethods() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data->{'shipping_methods'} = $values_1;
        }
        if (null !== $object->getStatus()) {
            $data->{'status'} = $object->getStatus();
        }
        if (null !== $object->getStatusTransitions()) {
            $data->{'status_transitions'} = $this->normalizer->normalize($object->getStatusTransitions(), 'json', $context);
        }
        if (null !== $object->getUpdated()) {
            $data->{'updated'} = $object->getUpdated();
        }
        if (null !== $object->getUpstreamId()) {
            $data->{'upstream_id'} = $object->getUpstreamId();
        }

        return $data;
    }
}
