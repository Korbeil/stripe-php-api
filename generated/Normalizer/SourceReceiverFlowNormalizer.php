<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SourceReceiverFlowNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\SourceReceiverFlow';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\SourceReceiverFlow;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\SourceReceiverFlow();
        if (property_exists($data, 'address')) {
            $object->setAddress($data->{'address'});
        }
        if (property_exists($data, 'amount_charged')) {
            $object->setAmountCharged($data->{'amount_charged'});
        }
        if (property_exists($data, 'amount_received')) {
            $object->setAmountReceived($data->{'amount_received'});
        }
        if (property_exists($data, 'amount_returned')) {
            $object->setAmountReturned($data->{'amount_returned'});
        }
        if (property_exists($data, 'refund_attributes_method')) {
            $object->setRefundAttributesMethod($data->{'refund_attributes_method'});
        }
        if (property_exists($data, 'refund_attributes_status')) {
            $object->setRefundAttributesStatus($data->{'refund_attributes_status'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAddress()) {
            $data->{'address'} = $object->getAddress();
        }
        if (null !== $object->getAmountCharged()) {
            $data->{'amount_charged'} = $object->getAmountCharged();
        }
        if (null !== $object->getAmountReceived()) {
            $data->{'amount_received'} = $object->getAmountReceived();
        }
        if (null !== $object->getAmountReturned()) {
            $data->{'amount_returned'} = $object->getAmountReturned();
        }
        if (null !== $object->getRefundAttributesMethod()) {
            $data->{'refund_attributes_method'} = $object->getRefundAttributesMethod();
        }
        if (null !== $object->getRefundAttributesStatus()) {
            $data->{'refund_attributes_status'} = $object->getRefundAttributesStatus();
        }

        return $data;
    }
}
