<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SourceTypeMultibancoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Stripe\\Api\\Model\\SourceTypeMultibanco';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \Stripe\Api\Model\SourceTypeMultibanco;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \Stripe\Api\Model\SourceTypeMultibanco();
        if (property_exists($data, 'entity')) {
            $object->setEntity($data->{'entity'});
        }
        if (property_exists($data, 'reference')) {
            $object->setReference($data->{'reference'});
        }
        if (property_exists($data, 'refund_account_holder_address_city')) {
            $object->setRefundAccountHolderAddressCity($data->{'refund_account_holder_address_city'});
        }
        if (property_exists($data, 'refund_account_holder_address_country')) {
            $object->setRefundAccountHolderAddressCountry($data->{'refund_account_holder_address_country'});
        }
        if (property_exists($data, 'refund_account_holder_address_line1')) {
            $object->setRefundAccountHolderAddressLine1($data->{'refund_account_holder_address_line1'});
        }
        if (property_exists($data, 'refund_account_holder_address_line2')) {
            $object->setRefundAccountHolderAddressLine2($data->{'refund_account_holder_address_line2'});
        }
        if (property_exists($data, 'refund_account_holder_address_postal_code')) {
            $object->setRefundAccountHolderAddressPostalCode($data->{'refund_account_holder_address_postal_code'});
        }
        if (property_exists($data, 'refund_account_holder_address_state')) {
            $object->setRefundAccountHolderAddressState($data->{'refund_account_holder_address_state'});
        }
        if (property_exists($data, 'refund_account_holder_name')) {
            $object->setRefundAccountHolderName($data->{'refund_account_holder_name'});
        }
        if (property_exists($data, 'refund_iban')) {
            $object->setRefundIban($data->{'refund_iban'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getEntity()) {
            $data->{'entity'} = $object->getEntity();
        }
        if (null !== $object->getReference()) {
            $data->{'reference'} = $object->getReference();
        }
        if (null !== $object->getRefundAccountHolderAddressCity()) {
            $data->{'refund_account_holder_address_city'} = $object->getRefundAccountHolderAddressCity();
        }
        if (null !== $object->getRefundAccountHolderAddressCountry()) {
            $data->{'refund_account_holder_address_country'} = $object->getRefundAccountHolderAddressCountry();
        }
        if (null !== $object->getRefundAccountHolderAddressLine1()) {
            $data->{'refund_account_holder_address_line1'} = $object->getRefundAccountHolderAddressLine1();
        }
        if (null !== $object->getRefundAccountHolderAddressLine2()) {
            $data->{'refund_account_holder_address_line2'} = $object->getRefundAccountHolderAddressLine2();
        }
        if (null !== $object->getRefundAccountHolderAddressPostalCode()) {
            $data->{'refund_account_holder_address_postal_code'} = $object->getRefundAccountHolderAddressPostalCode();
        }
        if (null !== $object->getRefundAccountHolderAddressState()) {
            $data->{'refund_account_holder_address_state'} = $object->getRefundAccountHolderAddressState();
        }
        if (null !== $object->getRefundAccountHolderName()) {
            $data->{'refund_account_holder_name'} = $object->getRefundAccountHolderName();
        }
        if (null !== $object->getRefundIban()) {
            $data->{'refund_iban'} = $object->getRefundIban();
        }

        return $data;
    }
}
