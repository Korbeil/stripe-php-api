<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Endpoint;

class GetInvoicesUpcomingLines extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    /**
     * <p>When retrieving an upcoming invoice, youâ€™ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $coupon The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
     *     @var string $customer the identifier of the customer whose upcoming invoice you'd like to retrieve
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var array $invoice_items list of invoice items to add or update in the upcoming invoice preview
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $subscription The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
     *     @var string $subscription_billing_cycle_anchor For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
     *     @var bool $subscription_cancel_at_period_end boolean indicating whether this subscription should cancel at the end of the current period
     *     @var bool $subscription_cancel_now
     *     @var array $subscription_items list of subscription items, each with an attached plan
     *     @var bool $subscription_prorate If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required.
     *     @var int $subscription_proration_date If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false.
     *     @var float $subscription_tax_percent If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required.
     *     @var string $subscription_trial_end If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
     *     @var bool $subscription_trial_from_plan Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed.
     * }
     */
    public function __construct(array $queryParameters = [])
    {
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/v1/invoices/upcoming/lines';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['expand', 'coupon', 'customer', 'ending_before', 'invoice_items', 'limit', 'starting_after', 'subscription', 'subscription_billing_cycle_anchor', 'subscription_cancel_at_period_end', 'subscription_cancel_now', 'subscription_items', 'subscription_prorate', 'subscription_proration_date', 'subscription_tax_percent', 'subscription_trial_end', 'subscription_trial_from_plan']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('expand', ['array']);
        $optionsResolver->setAllowedTypes('coupon', ['string']);
        $optionsResolver->setAllowedTypes('customer', ['string']);
        $optionsResolver->setAllowedTypes('ending_before', ['string']);
        $optionsResolver->setAllowedTypes('invoice_items', ['array']);
        $optionsResolver->setAllowedTypes('limit', ['int']);
        $optionsResolver->setAllowedTypes('starting_after', ['string']);
        $optionsResolver->setAllowedTypes('subscription', ['string']);
        $optionsResolver->setAllowedTypes('subscription_billing_cycle_anchor', ['string']);
        $optionsResolver->setAllowedTypes('subscription_cancel_at_period_end', ['bool']);
        $optionsResolver->setAllowedTypes('subscription_cancel_now', ['bool']);
        $optionsResolver->setAllowedTypes('subscription_items', ['array']);
        $optionsResolver->setAllowedTypes('subscription_prorate', ['bool']);
        $optionsResolver->setAllowedTypes('subscription_proration_date', ['int']);
        $optionsResolver->setAllowedTypes('subscription_tax_percent', ['float']);
        $optionsResolver->setAllowedTypes('subscription_trial_end', ['string']);
        $optionsResolver->setAllowedTypes('subscription_trial_from_plan', ['bool']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     *
     * @return \Stripe\Api\Model\V1InvoicesUpcomingLinesGetResponse200|\Stripe\Api\Model\Error|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'Stripe\\Api\\Model\\V1InvoicesUpcomingLinesGetResponse200', 'json');
        }

        return $serializer->deserialize($body, 'Stripe\\Api\\Model\\Error', 'json');
    }
}
