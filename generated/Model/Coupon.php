<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Coupon
{
    /**
     * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
     *
     * @var int
     */
    protected $amountOff;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
     *
     * @var string
     */
    protected $currency;
    /**
     * One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
     *
     * @var string
     */
    protected $duration;
    /**
     * If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
     *
     * @var int
     */
    protected $durationInMonths;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
     *
     * @var int
     */
    protected $maxRedemptions;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * Name of the coupon displayed to customers on for instance invoices or receipts.
     *
     * @var string
     */
    protected $name;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
     *
     * @var float
     */
    protected $percentOff;
    /**
     * Date after which the coupon can no longer be redeemed.
     *
     * @var int
     */
    protected $redeemBy;
    /**
     * Number of times this coupon has been applied to a customer.
     *
     * @var int
     */
    protected $timesRedeemed;
    /**
     * Taking account of the above properties, whether this coupon can still be applied to a customer.
     *
     * @var bool
     */
    protected $valid;

    /**
     * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
     *
     * @return int
     */
    public function getAmountOff(): ?int
    {
        return $this->amountOff;
    }

    /**
     * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
     *
     * @param int $amountOff
     *
     * @return self
     */
    public function setAmountOff(?int $amountOff): self
    {
        $this->amountOff = $amountOff;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
     *
     * @return string
     */
    public function getDuration(): ?string
    {
        return $this->duration;
    }

    /**
     * One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
     *
     * @param string $duration
     *
     * @return self
     */
    public function setDuration(?string $duration): self
    {
        $this->duration = $duration;

        return $this;
    }

    /**
     * If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
     *
     * @return int
     */
    public function getDurationInMonths(): ?int
    {
        return $this->durationInMonths;
    }

    /**
     * If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
     *
     * @param int $durationInMonths
     *
     * @return self
     */
    public function setDurationInMonths(?int $durationInMonths): self
    {
        $this->durationInMonths = $durationInMonths;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
     *
     * @return int
     */
    public function getMaxRedemptions(): ?int
    {
        return $this->maxRedemptions;
    }

    /**
     * Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
     *
     * @param int $maxRedemptions
     *
     * @return self
     */
    public function setMaxRedemptions(?int $maxRedemptions): self
    {
        $this->maxRedemptions = $maxRedemptions;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Name of the coupon displayed to customers on for instance invoices or receipts.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name of the coupon displayed to customers on for instance invoices or receipts.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
     *
     * @return float
     */
    public function getPercentOff(): ?float
    {
        return $this->percentOff;
    }

    /**
     * Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
     *
     * @param float $percentOff
     *
     * @return self
     */
    public function setPercentOff(?float $percentOff): self
    {
        $this->percentOff = $percentOff;

        return $this;
    }

    /**
     * Date after which the coupon can no longer be redeemed.
     *
     * @return int
     */
    public function getRedeemBy(): ?int
    {
        return $this->redeemBy;
    }

    /**
     * Date after which the coupon can no longer be redeemed.
     *
     * @param int $redeemBy
     *
     * @return self
     */
    public function setRedeemBy(?int $redeemBy): self
    {
        $this->redeemBy = $redeemBy;

        return $this;
    }

    /**
     * Number of times this coupon has been applied to a customer.
     *
     * @return int
     */
    public function getTimesRedeemed(): ?int
    {
        return $this->timesRedeemed;
    }

    /**
     * Number of times this coupon has been applied to a customer.
     *
     * @param int $timesRedeemed
     *
     * @return self
     */
    public function setTimesRedeemed(?int $timesRedeemed): self
    {
        $this->timesRedeemed = $timesRedeemed;

        return $this;
    }

    /**
     * Taking account of the above properties, whether this coupon can still be applied to a customer.
     *
     * @return bool
     */
    public function getValid(): ?bool
    {
        return $this->valid;
    }

    /**
     * Taking account of the above properties, whether this coupon can still be applied to a customer.
     *
     * @param bool $valid
     *
     * @return self
     */
    public function setValid(?bool $valid): self
    {
        $this->valid = $valid;

        return $this;
    }
}
