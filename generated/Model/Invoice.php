<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Invoice
{
    /**
     * Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
     *
     * @var int
     */
    protected $amountDue;
    /**
     * The amount, in %s, that was paid.
     *
     * @var int
     */
    protected $amountPaid;
    /**
     * The amount remaining, in %s, that is due.
     *
     * @var int
     */
    protected $amountRemaining;
    /**
     * The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
     *
     * @var int
     */
    protected $applicationFeeAmount;
    /**
     * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
     *
     * @var int
     */
    protected $attemptCount;
    /**
     * Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
     *
     * @var bool
     */
    protected $attempted;
    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @var bool
     */
    protected $autoAdvance;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
     *
     * @var string
     */
    protected $billing;
    /**
     * Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
     *
     * @var string
     */
    protected $billingReason;
    /**
     * ID of the latest charge generated for this invoice, if any.
     *
     * @var string
     */
    protected $charge;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Custom fields displayed on the invoice.
     *
     * @var InvoiceSettingCustomField[]
     */
    protected $customFields;
    /**
     * @var string
     */
    protected $customer;
    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @var string
     */
    protected $defaultSource;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
     *
     * @var string
     */
    protected $description;
    /**
     * @var Discount
     */
    protected $discount;
    /**
     * The date on which payment for this invoice is due. This value will be `null` for invoices where `billing=charge_automatically`.
     *
     * @var int
     */
    protected $dueDate;
    /**
     * Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @var int
     */
    protected $endingBalance;
    /**
     * Footer displayed on the invoice.
     *
     * @var string
     */
    protected $footer;
    /**
     * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @var string
     */
    protected $hostedInvoiceUrl;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @var string
     */
    protected $invoicePdf;
    /**
     * The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
     *
     * @var InvoiceLines
     */
    protected $lines;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The time at which payment will next be attempted. This value will be `null` for invoices where `billing=send_invoice`.
     *
     * @var int
     */
    protected $nextPaymentAttempt;
    /**
     * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
     *
     * @var string
     */
    protected $number;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
     *
     * @var bool
     */
    protected $paid;
    /**
     * End of the usage period during which invoice items were added to this invoice.
     *
     * @var int
     */
    protected $periodEnd;
    /**
     * Start of the usage period during which invoice items were added to this invoice.
     *
     * @var int
     */
    protected $periodStart;
    /**
     * This is the transaction number that appears on email receipts sent for this invoice.
     *
     * @var string
     */
    protected $receiptNumber;
    /**
     * Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
     *
     * @var int
     */
    protected $startingBalance;
    /**
     * Extra information about an invoice for the customer's credit card statement.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
     *
     * @var string
     */
    protected $status;
    /**
     * @var InvoicesStatusTransitions
     */
    protected $statusTransitions;
    /**
     * The subscription that this invoice was prepared for, if any.
     *
     * @var string
     */
    protected $subscription;
    /**
     * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
     *
     * @var int
     */
    protected $subscriptionProrationDate;
    /**
     * Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied.
     *
     * @var int
     */
    protected $subtotal;
    /**
     * The amount of tax included in the total, calculated from `tax_percent` and the subtotal. If no `tax_percent` is defined, this value will be null.
     *
     * @var int
     */
    protected $tax;
    /**
     * This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null.
     *
     * @var float
     */
    protected $taxPercent;
    /**
     * @var InvoiceThresholdReason
     */
    protected $thresholdReason;
    /**
     * Total after discount.
     *
     * @var int
     */
    protected $total;
    /**
     * The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `created`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
     *
     * @var int
     */
    protected $webhooksDeliveredAt;

    /**
     * Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
     *
     * @return int
     */
    public function getAmountDue(): ?int
    {
        return $this->amountDue;
    }

    /**
     * Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
     *
     * @param int $amountDue
     *
     * @return self
     */
    public function setAmountDue(?int $amountDue): self
    {
        $this->amountDue = $amountDue;

        return $this;
    }

    /**
     * The amount, in %s, that was paid.
     *
     * @return int
     */
    public function getAmountPaid(): ?int
    {
        return $this->amountPaid;
    }

    /**
     * The amount, in %s, that was paid.
     *
     * @param int $amountPaid
     *
     * @return self
     */
    public function setAmountPaid(?int $amountPaid): self
    {
        $this->amountPaid = $amountPaid;

        return $this;
    }

    /**
     * The amount remaining, in %s, that is due.
     *
     * @return int
     */
    public function getAmountRemaining(): ?int
    {
        return $this->amountRemaining;
    }

    /**
     * The amount remaining, in %s, that is due.
     *
     * @param int $amountRemaining
     *
     * @return self
     */
    public function setAmountRemaining(?int $amountRemaining): self
    {
        $this->amountRemaining = $amountRemaining;

        return $this;
    }

    /**
     * The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
     *
     * @return int
     */
    public function getApplicationFeeAmount(): ?int
    {
        return $this->applicationFeeAmount;
    }

    /**
     * The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
     *
     * @param int $applicationFeeAmount
     *
     * @return self
     */
    public function setApplicationFeeAmount(?int $applicationFeeAmount): self
    {
        $this->applicationFeeAmount = $applicationFeeAmount;

        return $this;
    }

    /**
     * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
     *
     * @return int
     */
    public function getAttemptCount(): ?int
    {
        return $this->attemptCount;
    }

    /**
     * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
     *
     * @param int $attemptCount
     *
     * @return self
     */
    public function setAttemptCount(?int $attemptCount): self
    {
        $this->attemptCount = $attemptCount;

        return $this;
    }

    /**
     * Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
     *
     * @return bool
     */
    public function getAttempted(): ?bool
    {
        return $this->attempted;
    }

    /**
     * Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
     *
     * @param bool $attempted
     *
     * @return self
     */
    public function setAttempted(?bool $attempted): self
    {
        $this->attempted = $attempted;

        return $this;
    }

    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @return bool
     */
    public function getAutoAdvance(): ?bool
    {
        return $this->autoAdvance;
    }

    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @param bool $autoAdvance
     *
     * @return self
     */
    public function setAutoAdvance(?bool $autoAdvance): self
    {
        $this->autoAdvance = $autoAdvance;

        return $this;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
     *
     * @return string
     */
    public function getBilling(): ?string
    {
        return $this->billing;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
     *
     * @param string $billing
     *
     * @return self
     */
    public function setBilling(?string $billing): self
    {
        $this->billing = $billing;

        return $this;
    }

    /**
     * Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
     *
     * @return string
     */
    public function getBillingReason(): ?string
    {
        return $this->billingReason;
    }

    /**
     * Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
     *
     * @param string $billingReason
     *
     * @return self
     */
    public function setBillingReason(?string $billingReason): self
    {
        $this->billingReason = $billingReason;

        return $this;
    }

    /**
     * ID of the latest charge generated for this invoice, if any.
     *
     * @return string
     */
    public function getCharge(): ?string
    {
        return $this->charge;
    }

    /**
     * ID of the latest charge generated for this invoice, if any.
     *
     * @param string $charge
     *
     * @return self
     */
    public function setCharge(?string $charge): self
    {
        $this->charge = $charge;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Custom fields displayed on the invoice.
     *
     * @return InvoiceSettingCustomField[]
     */
    public function getCustomFields(): ?array
    {
        return $this->customFields;
    }

    /**
     * Custom fields displayed on the invoice.
     *
     * @param InvoiceSettingCustomField[] $customFields
     *
     * @return self
     */
    public function setCustomFields(?array $customFields): self
    {
        $this->customFields = $customFields;

        return $this;
    }

    /**
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @return string
     */
    public function getDefaultSource(): ?string
    {
        return $this->defaultSource;
    }

    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @param string $defaultSource
     *
     * @return self
     */
    public function setDefaultSource(?string $defaultSource): self
    {
        $this->defaultSource = $defaultSource;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return Discount
     */
    public function getDiscount(): ?Discount
    {
        return $this->discount;
    }

    /**
     * @param Discount $discount
     *
     * @return self
     */
    public function setDiscount(?Discount $discount): self
    {
        $this->discount = $discount;

        return $this;
    }

    /**
     * The date on which payment for this invoice is due. This value will be `null` for invoices where `billing=charge_automatically`.
     *
     * @return int
     */
    public function getDueDate(): ?int
    {
        return $this->dueDate;
    }

    /**
     * The date on which payment for this invoice is due. This value will be `null` for invoices where `billing=charge_automatically`.
     *
     * @param int $dueDate
     *
     * @return self
     */
    public function setDueDate(?int $dueDate): self
    {
        $this->dueDate = $dueDate;

        return $this;
    }

    /**
     * Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @return int
     */
    public function getEndingBalance(): ?int
    {
        return $this->endingBalance;
    }

    /**
     * Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @param int $endingBalance
     *
     * @return self
     */
    public function setEndingBalance(?int $endingBalance): self
    {
        $this->endingBalance = $endingBalance;

        return $this;
    }

    /**
     * Footer displayed on the invoice.
     *
     * @return string
     */
    public function getFooter(): ?string
    {
        return $this->footer;
    }

    /**
     * Footer displayed on the invoice.
     *
     * @param string $footer
     *
     * @return self
     */
    public function setFooter(?string $footer): self
    {
        $this->footer = $footer;

        return $this;
    }

    /**
     * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @return string
     */
    public function getHostedInvoiceUrl(): ?string
    {
        return $this->hostedInvoiceUrl;
    }

    /**
     * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @param string $hostedInvoiceUrl
     *
     * @return self
     */
    public function setHostedInvoiceUrl(?string $hostedInvoiceUrl): self
    {
        $this->hostedInvoiceUrl = $hostedInvoiceUrl;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @return string
     */
    public function getInvoicePdf(): ?string
    {
        return $this->invoicePdf;
    }

    /**
     * The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
     *
     * @param string $invoicePdf
     *
     * @return self
     */
    public function setInvoicePdf(?string $invoicePdf): self
    {
        $this->invoicePdf = $invoicePdf;

        return $this;
    }

    /**
     * The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
     *
     * @return InvoiceLines
     */
    public function getLines(): ?InvoiceLines
    {
        return $this->lines;
    }

    /**
     * The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
     *
     * @param InvoiceLines $lines
     *
     * @return self
     */
    public function setLines(?InvoiceLines $lines): self
    {
        $this->lines = $lines;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The time at which payment will next be attempted. This value will be `null` for invoices where `billing=send_invoice`.
     *
     * @return int
     */
    public function getNextPaymentAttempt(): ?int
    {
        return $this->nextPaymentAttempt;
    }

    /**
     * The time at which payment will next be attempted. This value will be `null` for invoices where `billing=send_invoice`.
     *
     * @param int $nextPaymentAttempt
     *
     * @return self
     */
    public function setNextPaymentAttempt(?int $nextPaymentAttempt): self
    {
        $this->nextPaymentAttempt = $nextPaymentAttempt;

        return $this;
    }

    /**
     * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
     *
     * @return string
     */
    public function getNumber(): ?string
    {
        return $this->number;
    }

    /**
     * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
     *
     * @param string $number
     *
     * @return self
     */
    public function setNumber(?string $number): self
    {
        $this->number = $number;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
     *
     * @return bool
     */
    public function getPaid(): ?bool
    {
        return $this->paid;
    }

    /**
     * Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
     *
     * @param bool $paid
     *
     * @return self
     */
    public function setPaid(?bool $paid): self
    {
        $this->paid = $paid;

        return $this;
    }

    /**
     * End of the usage period during which invoice items were added to this invoice.
     *
     * @return int
     */
    public function getPeriodEnd(): ?int
    {
        return $this->periodEnd;
    }

    /**
     * End of the usage period during which invoice items were added to this invoice.
     *
     * @param int $periodEnd
     *
     * @return self
     */
    public function setPeriodEnd(?int $periodEnd): self
    {
        $this->periodEnd = $periodEnd;

        return $this;
    }

    /**
     * Start of the usage period during which invoice items were added to this invoice.
     *
     * @return int
     */
    public function getPeriodStart(): ?int
    {
        return $this->periodStart;
    }

    /**
     * Start of the usage period during which invoice items were added to this invoice.
     *
     * @param int $periodStart
     *
     * @return self
     */
    public function setPeriodStart(?int $periodStart): self
    {
        $this->periodStart = $periodStart;

        return $this;
    }

    /**
     * This is the transaction number that appears on email receipts sent for this invoice.
     *
     * @return string
     */
    public function getReceiptNumber(): ?string
    {
        return $this->receiptNumber;
    }

    /**
     * This is the transaction number that appears on email receipts sent for this invoice.
     *
     * @param string $receiptNumber
     *
     * @return self
     */
    public function setReceiptNumber(?string $receiptNumber): self
    {
        $this->receiptNumber = $receiptNumber;

        return $this;
    }

    /**
     * Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
     *
     * @return int
     */
    public function getStartingBalance(): ?int
    {
        return $this->startingBalance;
    }

    /**
     * Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
     *
     * @param int $startingBalance
     *
     * @return self
     */
    public function setStartingBalance(?int $startingBalance): self
    {
        $this->startingBalance = $startingBalance;

        return $this;
    }

    /**
     * Extra information about an invoice for the customer's credit card statement.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Extra information about an invoice for the customer's credit card statement.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @return InvoicesStatusTransitions
     */
    public function getStatusTransitions(): ?InvoicesStatusTransitions
    {
        return $this->statusTransitions;
    }

    /**
     * @param InvoicesStatusTransitions $statusTransitions
     *
     * @return self
     */
    public function setStatusTransitions(?InvoicesStatusTransitions $statusTransitions): self
    {
        $this->statusTransitions = $statusTransitions;

        return $this;
    }

    /**
     * The subscription that this invoice was prepared for, if any.
     *
     * @return string
     */
    public function getSubscription(): ?string
    {
        return $this->subscription;
    }

    /**
     * The subscription that this invoice was prepared for, if any.
     *
     * @param string $subscription
     *
     * @return self
     */
    public function setSubscription(?string $subscription): self
    {
        $this->subscription = $subscription;

        return $this;
    }

    /**
     * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
     *
     * @return int
     */
    public function getSubscriptionProrationDate(): ?int
    {
        return $this->subscriptionProrationDate;
    }

    /**
     * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
     *
     * @param int $subscriptionProrationDate
     *
     * @return self
     */
    public function setSubscriptionProrationDate(?int $subscriptionProrationDate): self
    {
        $this->subscriptionProrationDate = $subscriptionProrationDate;

        return $this;
    }

    /**
     * Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied.
     *
     * @return int
     */
    public function getSubtotal(): ?int
    {
        return $this->subtotal;
    }

    /**
     * Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied.
     *
     * @param int $subtotal
     *
     * @return self
     */
    public function setSubtotal(?int $subtotal): self
    {
        $this->subtotal = $subtotal;

        return $this;
    }

    /**
     * The amount of tax included in the total, calculated from `tax_percent` and the subtotal. If no `tax_percent` is defined, this value will be null.
     *
     * @return int
     */
    public function getTax(): ?int
    {
        return $this->tax;
    }

    /**
     * The amount of tax included in the total, calculated from `tax_percent` and the subtotal. If no `tax_percent` is defined, this value will be null.
     *
     * @param int $tax
     *
     * @return self
     */
    public function setTax(?int $tax): self
    {
        $this->tax = $tax;

        return $this;
    }

    /**
     * This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null.
     *
     * @return float
     */
    public function getTaxPercent(): ?float
    {
        return $this->taxPercent;
    }

    /**
     * This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null.
     *
     * @param float $taxPercent
     *
     * @return self
     */
    public function setTaxPercent(?float $taxPercent): self
    {
        $this->taxPercent = $taxPercent;

        return $this;
    }

    /**
     * @return InvoiceThresholdReason
     */
    public function getThresholdReason(): ?InvoiceThresholdReason
    {
        return $this->thresholdReason;
    }

    /**
     * @param InvoiceThresholdReason $thresholdReason
     *
     * @return self
     */
    public function setThresholdReason(?InvoiceThresholdReason $thresholdReason): self
    {
        $this->thresholdReason = $thresholdReason;

        return $this;
    }

    /**
     * Total after discount.
     *
     * @return int
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }

    /**
     * Total after discount.
     *
     * @param int $total
     *
     * @return self
     */
    public function setTotal(?int $total): self
    {
        $this->total = $total;

        return $this;
    }

    /**
     * The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `created`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
     *
     * @return int
     */
    public function getWebhooksDeliveredAt(): ?int
    {
        return $this->webhooksDeliveredAt;
    }

    /**
     * The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match `created`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
     *
     * @param int $webhooksDeliveredAt
     *
     * @return self
     */
    public function setWebhooksDeliveredAt(?int $webhooksDeliveredAt): self
    {
        $this->webhooksDeliveredAt = $webhooksDeliveredAt;

        return $this;
    }
}
