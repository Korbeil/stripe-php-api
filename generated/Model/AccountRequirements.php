<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class AccountRequirements
{
    /**
     * The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected.
     *
     * @var int
     */
    protected $currentDeadline;
    /**
     * The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields will appear in `past_due` as well, and the account will be disabled.
     *
     * @var string[]
     */
    protected $currentlyDue;
    /**
     * If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`.
     *
     * @var string
     */
    protected $disabledReason;
    /**
     * The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields will appear in `currently_due` as well, and the `current_deadline` will be set.
     *
     * @var string[]
     */
    protected $eventuallyDue;
    /**
     * The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account.
     *
     * @var string[]
     */
    protected $pastDue;

    /**
     * The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected.
     *
     * @return int
     */
    public function getCurrentDeadline(): ?int
    {
        return $this->currentDeadline;
    }

    /**
     * The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected.
     *
     * @param int $currentDeadline
     *
     * @return self
     */
    public function setCurrentDeadline(?int $currentDeadline): self
    {
        $this->currentDeadline = $currentDeadline;

        return $this;
    }

    /**
     * The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields will appear in `past_due` as well, and the account will be disabled.
     *
     * @return string[]
     */
    public function getCurrentlyDue(): ?array
    {
        return $this->currentlyDue;
    }

    /**
     * The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields will appear in `past_due` as well, and the account will be disabled.
     *
     * @param string[] $currentlyDue
     *
     * @return self
     */
    public function setCurrentlyDue(?array $currentlyDue): self
    {
        $this->currentlyDue = $currentlyDue;

        return $this;
    }

    /**
     * If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`.
     *
     * @return string
     */
    public function getDisabledReason(): ?string
    {
        return $this->disabledReason;
    }

    /**
     * If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`.
     *
     * @param string $disabledReason
     *
     * @return self
     */
    public function setDisabledReason(?string $disabledReason): self
    {
        $this->disabledReason = $disabledReason;

        return $this;
    }

    /**
     * The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields will appear in `currently_due` as well, and the `current_deadline` will be set.
     *
     * @return string[]
     */
    public function getEventuallyDue(): ?array
    {
        return $this->eventuallyDue;
    }

    /**
     * The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields will appear in `currently_due` as well, and the `current_deadline` will be set.
     *
     * @param string[] $eventuallyDue
     *
     * @return self
     */
    public function setEventuallyDue(?array $eventuallyDue): self
    {
        $this->eventuallyDue = $eventuallyDue;

        return $this;
    }

    /**
     * The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account.
     *
     * @return string[]
     */
    public function getPastDue(): ?array
    {
        return $this->pastDue;
    }

    /**
     * The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account.
     *
     * @param string[] $pastDue
     *
     * @return self
     */
    public function setPastDue(?array $pastDue): self
    {
        $this->pastDue = $pastDue;

        return $this;
    }
}
