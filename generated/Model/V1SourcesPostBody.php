<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1SourcesPostBody
{
    /**
     * Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @var int
     */
    protected $amount;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
     *
     * @var string
     */
    protected $currency;
    /**
     * The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
     *
     * @var string
     */
    protected $customer;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
     *
     * @var string
     */
    protected $flow;
    /**
     * Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
     *
     * @var V1SourcesPostBodyMandate
     */
    protected $mandate;
    /**
     * A set of key-value pairs that you can attach to a source object. It can be useful for storing additional information about the source in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The source to share.
     *
     * @var string
     */
    protected $originalSource;
    /**
     * Information about the owner of the payment instrument that may be used or required by particular source types.
     *
     * @var V1SourcesPostBodyOwner
     */
    protected $owner;
    /**
     * Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
     *
     * @var V1SourcesPostBodyReceiver
     */
    protected $receiver;
    /**
     * Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
     *
     * @var V1SourcesPostBodyRedirect
     */
    protected $redirect;
    /**
     * An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * An optional token used to create the source. When passed, token properties will override source parameters.
     *
     * @var string
     */
    protected $token;
    /**
     * The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Shared card Sources](https://stripe.com/docs/sources/connect#shared-card-sources) guide).
     *
     * @var string
     */
    protected $type;
    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @var string
     */
    protected $usage;

    /**
     * Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
     *
     * @return string
     */
    public function getFlow(): ?string
    {
        return $this->flow;
    }

    /**
     * The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
     *
     * @param string $flow
     *
     * @return self
     */
    public function setFlow(?string $flow): self
    {
        $this->flow = $flow;

        return $this;
    }

    /**
     * Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
     *
     * @return V1SourcesPostBodyMandate
     */
    public function getMandate(): ?V1SourcesPostBodyMandate
    {
        return $this->mandate;
    }

    /**
     * Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
     *
     * @param V1SourcesPostBodyMandate $mandate
     *
     * @return self
     */
    public function setMandate(?V1SourcesPostBodyMandate $mandate): self
    {
        $this->mandate = $mandate;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a source object. It can be useful for storing additional information about the source in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a source object. It can be useful for storing additional information about the source in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The source to share.
     *
     * @return string
     */
    public function getOriginalSource(): ?string
    {
        return $this->originalSource;
    }

    /**
     * The source to share.
     *
     * @param string $originalSource
     *
     * @return self
     */
    public function setOriginalSource(?string $originalSource): self
    {
        $this->originalSource = $originalSource;

        return $this;
    }

    /**
     * Information about the owner of the payment instrument that may be used or required by particular source types.
     *
     * @return V1SourcesPostBodyOwner
     */
    public function getOwner(): ?V1SourcesPostBodyOwner
    {
        return $this->owner;
    }

    /**
     * Information about the owner of the payment instrument that may be used or required by particular source types.
     *
     * @param V1SourcesPostBodyOwner $owner
     *
     * @return self
     */
    public function setOwner(?V1SourcesPostBodyOwner $owner): self
    {
        $this->owner = $owner;

        return $this;
    }

    /**
     * Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
     *
     * @return V1SourcesPostBodyReceiver
     */
    public function getReceiver(): ?V1SourcesPostBodyReceiver
    {
        return $this->receiver;
    }

    /**
     * Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
     *
     * @param V1SourcesPostBodyReceiver $receiver
     *
     * @return self
     */
    public function setReceiver(?V1SourcesPostBodyReceiver $receiver): self
    {
        $this->receiver = $receiver;

        return $this;
    }

    /**
     * Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
     *
     * @return V1SourcesPostBodyRedirect
     */
    public function getRedirect(): ?V1SourcesPostBodyRedirect
    {
        return $this->redirect;
    }

    /**
     * Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
     *
     * @param V1SourcesPostBodyRedirect $redirect
     *
     * @return self
     */
    public function setRedirect(?V1SourcesPostBodyRedirect $redirect): self
    {
        $this->redirect = $redirect;

        return $this;
    }

    /**
     * An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * An optional token used to create the source. When passed, token properties will override source parameters.
     *
     * @return string
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
     * An optional token used to create the source. When passed, token properties will override source parameters.
     *
     * @param string $token
     *
     * @return self
     */
    public function setToken(?string $token): self
    {
        $this->token = $token;

        return $this;
    }

    /**
     * The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Shared card Sources](https://stripe.com/docs/sources/connect#shared-card-sources) guide).
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Shared card Sources](https://stripe.com/docs/sources/connect#shared-card-sources) guide).
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @return string
     */
    public function getUsage(): ?string
    {
        return $this->usage;
    }

    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @param string $usage
     *
     * @return self
     */
    public function setUsage(?string $usage): self
    {
        $this->usage = $usage;

        return $this;
    }
}
