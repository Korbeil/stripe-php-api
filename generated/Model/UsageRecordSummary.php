<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class UsageRecordSummary
{
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The invoice in which this usage period has been billed for.
     *
     * @var string
     */
    protected $invoice;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var Period
     */
    protected $period;
    /**
     * The ID of the subscription item this summary is describing.
     *
     * @var string
     */
    protected $subscriptionItem;
    /**
     * The total usage within this usage period.
     *
     * @var int
     */
    protected $totalUsage;

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The invoice in which this usage period has been billed for.
     *
     * @return string
     */
    public function getInvoice(): ?string
    {
        return $this->invoice;
    }

    /**
     * The invoice in which this usage period has been billed for.
     *
     * @param string $invoice
     *
     * @return self
     */
    public function setInvoice(?string $invoice): self
    {
        $this->invoice = $invoice;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return Period
     */
    public function getPeriod(): ?Period
    {
        return $this->period;
    }

    /**
     * @param Period $period
     *
     * @return self
     */
    public function setPeriod(?Period $period): self
    {
        $this->period = $period;

        return $this;
    }

    /**
     * The ID of the subscription item this summary is describing.
     *
     * @return string
     */
    public function getSubscriptionItem(): ?string
    {
        return $this->subscriptionItem;
    }

    /**
     * The ID of the subscription item this summary is describing.
     *
     * @param string $subscriptionItem
     *
     * @return self
     */
    public function setSubscriptionItem(?string $subscriptionItem): self
    {
        $this->subscriptionItem = $subscriptionItem;

        return $this;
    }

    /**
     * The total usage within this usage period.
     *
     * @return int
     */
    public function getTotalUsage(): ?int
    {
        return $this->totalUsage;
    }

    /**
     * The total usage within this usage period.
     *
     * @param int $totalUsage
     *
     * @return self
     */
    public function setTotalUsage(?int $totalUsage): self
    {
        $this->totalUsage = $totalUsage;

        return $this;
    }
}
