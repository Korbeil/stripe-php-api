<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1CheckoutSessionsPostBody
{
    /**
     * Specify whether Checkout should collect the customer's billing address. If set to `required`, Checkout will always collect the customer's billing address. If left blank or set to `auto` Checkout will only collect the billing address when necessary.
     *
     * @var string
     */
    protected $billingAddressCollection;
    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @var string
     */
    protected $cancelUrl;
    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @var string
     */
    protected $clientReferenceId;
    /**
     * ID of the customer this Checkout Session is for if one exists. May only be used with line_items. Usage with subscription_data is not yet available.
     *
     * @var string
     */
    protected $customer;
    /**
     * The email address used to create the customer object. If you already know your customer's email address, use this attribute to prefill it on Checkout.
     *
     * @var string
     */
    protected $customerEmail;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * A list of items your customer is purchasing.
     *
     * @var V1CheckoutSessionsPostBodyLineItemsItem[]
     */
    protected $lineItems;
    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. Supported values are `auto`, `da`, `de`, `en`, `es`, `fi`, `fr`, `it`, `ja`, `nb`, `nl`, `pl`, `pt`, `sv`, or `zh`.
     *
     * @var string
     */
    protected $locale;
    /**
     * A subset of parameters to be passed to PaymentIntent creation.
     *
     * @var V1CheckoutSessionsPostBodyPaymentIntentData
     */
    protected $paymentIntentData;
    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @var string[]
     */
    protected $paymentMethodTypes;
    /**
     * A subset of parameters to be passed to subscription creation.
     *
     * @var V1CheckoutSessionsPostBodySubscriptionData
     */
    protected $subscriptionData;
    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @var string
     */
    protected $successUrl;

    /**
     * Specify whether Checkout should collect the customer's billing address. If set to `required`, Checkout will always collect the customer's billing address. If left blank or set to `auto` Checkout will only collect the billing address when necessary.
     *
     * @return string
     */
    public function getBillingAddressCollection(): ?string
    {
        return $this->billingAddressCollection;
    }

    /**
     * Specify whether Checkout should collect the customer's billing address. If set to `required`, Checkout will always collect the customer's billing address. If left blank or set to `auto` Checkout will only collect the billing address when necessary.
     *
     * @param string $billingAddressCollection
     *
     * @return self
     */
    public function setBillingAddressCollection(?string $billingAddressCollection): self
    {
        $this->billingAddressCollection = $billingAddressCollection;

        return $this;
    }

    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @return string
     */
    public function getCancelUrl(): ?string
    {
        return $this->cancelUrl;
    }

    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @param string $cancelUrl
     *
     * @return self
     */
    public function setCancelUrl(?string $cancelUrl): self
    {
        $this->cancelUrl = $cancelUrl;

        return $this;
    }

    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @return string
     */
    public function getClientReferenceId(): ?string
    {
        return $this->clientReferenceId;
    }

    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @param string $clientReferenceId
     *
     * @return self
     */
    public function setClientReferenceId(?string $clientReferenceId): self
    {
        $this->clientReferenceId = $clientReferenceId;

        return $this;
    }

    /**
     * ID of the customer this Checkout Session is for if one exists. May only be used with line_items. Usage with subscription_data is not yet available.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * ID of the customer this Checkout Session is for if one exists. May only be used with line_items. Usage with subscription_data is not yet available.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * The email address used to create the customer object. If you already know your customer's email address, use this attribute to prefill it on Checkout.
     *
     * @return string
     */
    public function getCustomerEmail(): ?string
    {
        return $this->customerEmail;
    }

    /**
     * The email address used to create the customer object. If you already know your customer's email address, use this attribute to prefill it on Checkout.
     *
     * @param string $customerEmail
     *
     * @return self
     */
    public function setCustomerEmail(?string $customerEmail): self
    {
        $this->customerEmail = $customerEmail;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * A list of items your customer is purchasing.
     *
     * @return V1CheckoutSessionsPostBodyLineItemsItem[]
     */
    public function getLineItems(): ?array
    {
        return $this->lineItems;
    }

    /**
     * A list of items your customer is purchasing.
     *
     * @param V1CheckoutSessionsPostBodyLineItemsItem[] $lineItems
     *
     * @return self
     */
    public function setLineItems(?array $lineItems): self
    {
        $this->lineItems = $lineItems;

        return $this;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. Supported values are `auto`, `da`, `de`, `en`, `es`, `fi`, `fr`, `it`, `ja`, `nb`, `nl`, `pl`, `pt`, `sv`, or `zh`.
     *
     * @return string
     */
    public function getLocale(): ?string
    {
        return $this->locale;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. Supported values are `auto`, `da`, `de`, `en`, `es`, `fi`, `fr`, `it`, `ja`, `nb`, `nl`, `pl`, `pt`, `sv`, or `zh`.
     *
     * @param string $locale
     *
     * @return self
     */
    public function setLocale(?string $locale): self
    {
        $this->locale = $locale;

        return $this;
    }

    /**
     * A subset of parameters to be passed to PaymentIntent creation.
     *
     * @return V1CheckoutSessionsPostBodyPaymentIntentData
     */
    public function getPaymentIntentData(): ?V1CheckoutSessionsPostBodyPaymentIntentData
    {
        return $this->paymentIntentData;
    }

    /**
     * A subset of parameters to be passed to PaymentIntent creation.
     *
     * @param V1CheckoutSessionsPostBodyPaymentIntentData $paymentIntentData
     *
     * @return self
     */
    public function setPaymentIntentData(?V1CheckoutSessionsPostBodyPaymentIntentData $paymentIntentData): self
    {
        $this->paymentIntentData = $paymentIntentData;

        return $this;
    }

    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @return string[]
     */
    public function getPaymentMethodTypes(): ?array
    {
        return $this->paymentMethodTypes;
    }

    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @param string[] $paymentMethodTypes
     *
     * @return self
     */
    public function setPaymentMethodTypes(?array $paymentMethodTypes): self
    {
        $this->paymentMethodTypes = $paymentMethodTypes;

        return $this;
    }

    /**
     * A subset of parameters to be passed to subscription creation.
     *
     * @return V1CheckoutSessionsPostBodySubscriptionData
     */
    public function getSubscriptionData(): ?V1CheckoutSessionsPostBodySubscriptionData
    {
        return $this->subscriptionData;
    }

    /**
     * A subset of parameters to be passed to subscription creation.
     *
     * @param V1CheckoutSessionsPostBodySubscriptionData $subscriptionData
     *
     * @return self
     */
    public function setSubscriptionData(?V1CheckoutSessionsPostBodySubscriptionData $subscriptionData): self
    {
        $this->subscriptionData = $subscriptionData;

        return $this;
    }

    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @return string
     */
    public function getSuccessUrl(): ?string
    {
        return $this->successUrl;
    }

    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @param string $successUrl
     *
     * @return self
     */
    public function setSuccessUrl(?string $successUrl): self
    {
        $this->successUrl = $successUrl;

        return $this;
    }
}
