<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Order
{
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
     *
     * @var int
     */
    protected $amount;
    /**
     * @var int
     */
    protected $amountReturned;
    /**
     * ID of the Connect Application that created the order.
     *
     * @var string
     */
    protected $application;
    /**
     * @var int
     */
    protected $applicationFee;
    /**
     * The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
     *
     * @var string
     */
    protected $charge;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * The customer used for the order.
     *
     * @var string
     */
    protected $customer;
    /**
     * The email address of the customer placing the order.
     *
     * @var string
     */
    protected $email;
    /**
     * @var string
     */
    protected $externalCouponCode;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * List of items constituting the order. An order can have up to 25 items.
     *
     * @var OrderItem[]
     */
    protected $items;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var OrderReturns
     */
    protected $returns;
    /**
     * The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
     *
     * @var string
     */
    protected $selectedShippingMethod;
    /**
     * @var Shipping
     */
    protected $shipping;
    /**
     * A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
     *
     * @var ShippingMethod[]
     */
    protected $shippingMethods;
    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @var string
     */
    protected $status;
    /**
     * @var StatusTransitions
     */
    protected $statusTransitions;
    /**
     * @var int
     */
    protected $updated;
    /**
     * The user's order ID if it is different from the Stripe order ID.
     *
     * @var string
     */
    protected $upstreamId;

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * @return int
     */
    public function getAmountReturned(): ?int
    {
        return $this->amountReturned;
    }

    /**
     * @param int $amountReturned
     *
     * @return self
     */
    public function setAmountReturned(?int $amountReturned): self
    {
        $this->amountReturned = $amountReturned;

        return $this;
    }

    /**
     * ID of the Connect Application that created the order.
     *
     * @return string
     */
    public function getApplication(): ?string
    {
        return $this->application;
    }

    /**
     * ID of the Connect Application that created the order.
     *
     * @param string $application
     *
     * @return self
     */
    public function setApplication(?string $application): self
    {
        $this->application = $application;

        return $this;
    }

    /**
     * @return int
     */
    public function getApplicationFee(): ?int
    {
        return $this->applicationFee;
    }

    /**
     * @param int $applicationFee
     *
     * @return self
     */
    public function setApplicationFee(?int $applicationFee): self
    {
        $this->applicationFee = $applicationFee;

        return $this;
    }

    /**
     * The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
     *
     * @return string
     */
    public function getCharge(): ?string
    {
        return $this->charge;
    }

    /**
     * The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
     *
     * @param string $charge
     *
     * @return self
     */
    public function setCharge(?string $charge): self
    {
        $this->charge = $charge;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The customer used for the order.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The customer used for the order.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * The email address of the customer placing the order.
     *
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * The email address of the customer placing the order.
     *
     * @param string $email
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * @return string
     */
    public function getExternalCouponCode(): ?string
    {
        return $this->externalCouponCode;
    }

    /**
     * @param string $externalCouponCode
     *
     * @return self
     */
    public function setExternalCouponCode(?string $externalCouponCode): self
    {
        $this->externalCouponCode = $externalCouponCode;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * List of items constituting the order. An order can have up to 25 items.
     *
     * @return OrderItem[]
     */
    public function getItems(): ?array
    {
        return $this->items;
    }

    /**
     * List of items constituting the order. An order can have up to 25 items.
     *
     * @param OrderItem[] $items
     *
     * @return self
     */
    public function setItems(?array $items): self
    {
        $this->items = $items;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return OrderReturns
     */
    public function getReturns(): ?OrderReturns
    {
        return $this->returns;
    }

    /**
     * @param OrderReturns $returns
     *
     * @return self
     */
    public function setReturns(?OrderReturns $returns): self
    {
        $this->returns = $returns;

        return $this;
    }

    /**
     * The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
     *
     * @return string
     */
    public function getSelectedShippingMethod(): ?string
    {
        return $this->selectedShippingMethod;
    }

    /**
     * The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
     *
     * @param string $selectedShippingMethod
     *
     * @return self
     */
    public function setSelectedShippingMethod(?string $selectedShippingMethod): self
    {
        $this->selectedShippingMethod = $selectedShippingMethod;

        return $this;
    }

    /**
     * @return Shipping
     */
    public function getShipping(): ?Shipping
    {
        return $this->shipping;
    }

    /**
     * @param Shipping $shipping
     *
     * @return self
     */
    public function setShipping(?Shipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
     *
     * @return ShippingMethod[]
     */
    public function getShippingMethods(): ?array
    {
        return $this->shippingMethods;
    }

    /**
     * A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
     *
     * @param ShippingMethod[] $shippingMethods
     *
     * @return self
     */
    public function setShippingMethods(?array $shippingMethods): self
    {
        $this->shippingMethods = $shippingMethods;

        return $this;
    }

    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @return StatusTransitions
     */
    public function getStatusTransitions(): ?StatusTransitions
    {
        return $this->statusTransitions;
    }

    /**
     * @param StatusTransitions $statusTransitions
     *
     * @return self
     */
    public function setStatusTransitions(?StatusTransitions $statusTransitions): self
    {
        $this->statusTransitions = $statusTransitions;

        return $this;
    }

    /**
     * @return int
     */
    public function getUpdated(): ?int
    {
        return $this->updated;
    }

    /**
     * @param int $updated
     *
     * @return self
     */
    public function setUpdated(?int $updated): self
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * The user's order ID if it is different from the Stripe order ID.
     *
     * @return string
     */
    public function getUpstreamId(): ?string
    {
        return $this->upstreamId;
    }

    /**
     * The user's order ID if it is different from the Stripe order ID.
     *
     * @param string $upstreamId
     *
     * @return self
     */
    public function setUpstreamId(?string $upstreamId): self
    {
        $this->upstreamId = $upstreamId;

        return $this;
    }
}
