<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1ProductsIdPostBody
{
    /**
     * Whether the product is available for purchase.
     *
     * @var bool
     */
    protected $active;
    /**
     * A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `["color", "size"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product.
     *
     * @var string[]
     */
    protected $attributes;
    /**
     * A short one-line description of the product, meant to be displayable to the customer.
     *
     * @var string
     */
    protected $caption;
    /**
     * An array of Connect application names or identifiers that should not be able to order the SKUs for this product.
     *
     * @var string[]
     */
    protected $deactivateOn;
    /**
     * The product's description, meant to be displayable to the customer.
     *
     * @var string
     */
    protected $description;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
     *
     * @var string[]
     */
    protected $images;
    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.
     *
     * @var string
     */
    protected $name;
    /**
     * The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`.
     *
     * @var V1ProductsIdPostBodyPackageDimensions
     */
    protected $packageDimensions;
    /**
     * Whether this product is shipped (i.e., physical goods). Defaults to `true`.
     *
     * @var bool
     */
    protected $shippable;
    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter. May only be set if type=`service`.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * A label that represents units of this product, such as seat(s), in Stripe and on customersâ€™ receipts and invoices. Only available on products of type=`service`.
     *
     * @var string
     */
    protected $unitLabel;
    /**
     * A URL of a publicly-accessible webpage for this product.
     *
     * @var string
     */
    protected $url;

    /**
     * Whether the product is available for purchase.
     *
     * @return bool
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Whether the product is available for purchase.
     *
     * @param bool $active
     *
     * @return self
     */
    public function setActive(?bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `["color", "size"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product.
     *
     * @return string[]
     */
    public function getAttributes(): ?array
    {
        return $this->attributes;
    }

    /**
     * A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `["color", "size"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product.
     *
     * @param string[] $attributes
     *
     * @return self
     */
    public function setAttributes(?array $attributes): self
    {
        $this->attributes = $attributes;

        return $this;
    }

    /**
     * A short one-line description of the product, meant to be displayable to the customer.
     *
     * @return string
     */
    public function getCaption(): ?string
    {
        return $this->caption;
    }

    /**
     * A short one-line description of the product, meant to be displayable to the customer.
     *
     * @param string $caption
     *
     * @return self
     */
    public function setCaption(?string $caption): self
    {
        $this->caption = $caption;

        return $this;
    }

    /**
     * An array of Connect application names or identifiers that should not be able to order the SKUs for this product.
     *
     * @return string[]
     */
    public function getDeactivateOn(): ?array
    {
        return $this->deactivateOn;
    }

    /**
     * An array of Connect application names or identifiers that should not be able to order the SKUs for this product.
     *
     * @param string[] $deactivateOn
     *
     * @return self
     */
    public function setDeactivateOn(?array $deactivateOn): self
    {
        $this->deactivateOn = $deactivateOn;

        return $this;
    }

    /**
     * The product's description, meant to be displayable to the customer.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * The product's description, meant to be displayable to the customer.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
     *
     * @return string[]
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
     * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
     *
     * @param string[] $images
     *
     * @return self
     */
    public function setImages(?array $images): self
    {
        $this->images = $images;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`.
     *
     * @return V1ProductsIdPostBodyPackageDimensions
     */
    public function getPackageDimensions(): ?V1ProductsIdPostBodyPackageDimensions
    {
        return $this->packageDimensions;
    }

    /**
     * The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`.
     *
     * @param V1ProductsIdPostBodyPackageDimensions $packageDimensions
     *
     * @return self
     */
    public function setPackageDimensions(?V1ProductsIdPostBodyPackageDimensions $packageDimensions): self
    {
        $this->packageDimensions = $packageDimensions;

        return $this;
    }

    /**
     * Whether this product is shipped (i.e., physical goods). Defaults to `true`.
     *
     * @return bool
     */
    public function getShippable(): ?bool
    {
        return $this->shippable;
    }

    /**
     * Whether this product is shipped (i.e., physical goods). Defaults to `true`.
     *
     * @param bool $shippable
     *
     * @return self
     */
    public function setShippable(?bool $shippable): self
    {
        $this->shippable = $shippable;

        return $this;
    }

    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter. May only be set if type=`service`.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter. May only be set if type=`service`.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * A label that represents units of this product, such as seat(s), in Stripe and on customersâ€™ receipts and invoices. Only available on products of type=`service`.
     *
     * @return string
     */
    public function getUnitLabel(): ?string
    {
        return $this->unitLabel;
    }

    /**
     * A label that represents units of this product, such as seat(s), in Stripe and on customersâ€™ receipts and invoices. Only available on products of type=`service`.
     *
     * @param string $unitLabel
     *
     * @return self
     */
    public function setUnitLabel(?string $unitLabel): self
    {
        $this->unitLabel = $unitLabel;

        return $this;
    }

    /**
     * A URL of a publicly-accessible webpage for this product.
     *
     * @return string
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * A URL of a publicly-accessible webpage for this product.
     *
     * @param string $url
     *
     * @return self
     */
    public function setUrl(?string $url): self
    {
        $this->url = $url;

        return $this;
    }
}
