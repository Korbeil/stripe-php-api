<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class SourceTransaction
{
    /**
     * @var SourceTransactionAchCreditTransferData
     */
    protected $achCreditTransfer;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
     *
     * @var int
     */
    protected $amount;
    /**
     * @var SourceTransactionChfCreditTransferData
     */
    protected $chfCreditTransfer;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var SourceTransactionPaperCheckData
     */
    protected $paperCheck;
    /**
     * @var SourceTransactionSepaCreditTransferData
     */
    protected $sepaCreditTransfer;
    /**
     * The ID of the source this transaction is attached to.
     *
     * @var string
     */
    protected $source;
    /**
     * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
     *
     * @var string
     */
    protected $status;
    /**
     * The type of source this transaction is attached to.
     *
     * @var string
     */
    protected $type;

    /**
     * @return SourceTransactionAchCreditTransferData
     */
    public function getAchCreditTransfer(): ?SourceTransactionAchCreditTransferData
    {
        return $this->achCreditTransfer;
    }

    /**
     * @param SourceTransactionAchCreditTransferData $achCreditTransfer
     *
     * @return self
     */
    public function setAchCreditTransfer(?SourceTransactionAchCreditTransferData $achCreditTransfer): self
    {
        $this->achCreditTransfer = $achCreditTransfer;

        return $this;
    }

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * @return SourceTransactionChfCreditTransferData
     */
    public function getChfCreditTransfer(): ?SourceTransactionChfCreditTransferData
    {
        return $this->chfCreditTransfer;
    }

    /**
     * @param SourceTransactionChfCreditTransferData $chfCreditTransfer
     *
     * @return self
     */
    public function setChfCreditTransfer(?SourceTransactionChfCreditTransferData $chfCreditTransfer): self
    {
        $this->chfCreditTransfer = $chfCreditTransfer;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return SourceTransactionPaperCheckData
     */
    public function getPaperCheck(): ?SourceTransactionPaperCheckData
    {
        return $this->paperCheck;
    }

    /**
     * @param SourceTransactionPaperCheckData $paperCheck
     *
     * @return self
     */
    public function setPaperCheck(?SourceTransactionPaperCheckData $paperCheck): self
    {
        $this->paperCheck = $paperCheck;

        return $this;
    }

    /**
     * @return SourceTransactionSepaCreditTransferData
     */
    public function getSepaCreditTransfer(): ?SourceTransactionSepaCreditTransferData
    {
        return $this->sepaCreditTransfer;
    }

    /**
     * @param SourceTransactionSepaCreditTransferData $sepaCreditTransfer
     *
     * @return self
     */
    public function setSepaCreditTransfer(?SourceTransactionSepaCreditTransferData $sepaCreditTransfer): self
    {
        $this->sepaCreditTransfer = $sepaCreditTransfer;

        return $this;
    }

    /**
     * The ID of the source this transaction is attached to.
     *
     * @return string
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * The ID of the source this transaction is attached to.
     *
     * @param string $source
     *
     * @return self
     */
    public function setSource(?string $source): self
    {
        $this->source = $source;

        return $this;
    }

    /**
     * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * The type of source this transaction is attached to.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The type of source this transaction is attached to.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
