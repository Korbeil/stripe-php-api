<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1CouponsPostBody
{
    /**
     * A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).
     *
     * @var int
     */
    protected $amountOff;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).
     *
     * @var string
     */
    protected $currency;
    /**
     * Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`.
     *
     * @var string
     */
    protected $duration;
    /**
     * Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
     *
     * @var int
     */
    protected $durationInMonths;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.
     *
     * @var string
     */
    protected $id;
    /**
     * A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
     *
     * @var int
     */
    protected $maxRedemptions;
    /**
     * A set of key-value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
     *
     * @var string
     */
    protected $name;
    /**
     * A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).
     *
     * @var float
     */
    protected $percentOff;
    /**
     * Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
     *
     * @var int
     */
    protected $redeemBy;

    /**
     * A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).
     *
     * @return int
     */
    public function getAmountOff(): ?int
    {
        return $this->amountOff;
    }

    /**
     * A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).
     *
     * @param int $amountOff
     *
     * @return self
     */
    public function setAmountOff(?int $amountOff): self
    {
        $this->amountOff = $amountOff;

        return $this;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`.
     *
     * @return string
     */
    public function getDuration(): ?string
    {
        return $this->duration;
    }

    /**
     * Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`.
     *
     * @param string $duration
     *
     * @return self
     */
    public function setDuration(?string $duration): self
    {
        $this->duration = $duration;

        return $this;
    }

    /**
     * Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
     *
     * @return int
     */
    public function getDurationInMonths(): ?int
    {
        return $this->durationInMonths;
    }

    /**
     * Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
     *
     * @param int $durationInMonths
     *
     * @return self
     */
    public function setDurationInMonths(?int $durationInMonths): self
    {
        $this->durationInMonths = $durationInMonths;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
     *
     * @return int
     */
    public function getMaxRedemptions(): ?int
    {
        return $this->maxRedemptions;
    }

    /**
     * A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
     *
     * @param int $maxRedemptions
     *
     * @return self
     */
    public function setMaxRedemptions(?int $maxRedemptions): self
    {
        $this->maxRedemptions = $maxRedemptions;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a coupon object. It can be useful for storing additional information about the coupon in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).
     *
     * @return float
     */
    public function getPercentOff(): ?float
    {
        return $this->percentOff;
    }

    /**
     * A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).
     *
     * @param float $percentOff
     *
     * @return self
     */
    public function setPercentOff(?float $percentOff): self
    {
        $this->percentOff = $percentOff;

        return $this;
    }

    /**
     * Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
     *
     * @return int
     */
    public function getRedeemBy(): ?int
    {
        return $this->redeemBy;
    }

    /**
     * Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
     *
     * @param int $redeemBy
     *
     * @return self
     */
    public function setRedeemBy(?int $redeemBy): self
    {
        $this->redeemBy = $redeemBy;

        return $this;
    }
}
