<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuerFraudRecord
{
    /**
     * An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
     *
     * @var bool
     */
    protected $actionable;
    /**
     * ID of the charge this issuer fraud record is for, optionally expanded.
     *
     * @var string
     */
    protected $charge;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
     *
     * @var string
     */
    protected $fraudType;
    /**
     * If true, the associated charge is subject to [liability shift](https://stripe.com/docs/sources/three-d-secure#disputed-payments).
     *
     * @var bool
     */
    protected $hasLiabilityShift;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The timestamp at which the card issuer posted the issuer fraud record.
     *
     * @var int
     */
    protected $postDate;

    /**
     * An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
     *
     * @return bool
     */
    public function getActionable(): ?bool
    {
        return $this->actionable;
    }

    /**
     * An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
     *
     * @param bool $actionable
     *
     * @return self
     */
    public function setActionable(?bool $actionable): self
    {
        $this->actionable = $actionable;

        return $this;
    }

    /**
     * ID of the charge this issuer fraud record is for, optionally expanded.
     *
     * @return string
     */
    public function getCharge(): ?string
    {
        return $this->charge;
    }

    /**
     * ID of the charge this issuer fraud record is for, optionally expanded.
     *
     * @param string $charge
     *
     * @return self
     */
    public function setCharge(?string $charge): self
    {
        $this->charge = $charge;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
     *
     * @return string
     */
    public function getFraudType(): ?string
    {
        return $this->fraudType;
    }

    /**
     * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
     *
     * @param string $fraudType
     *
     * @return self
     */
    public function setFraudType(?string $fraudType): self
    {
        $this->fraudType = $fraudType;

        return $this;
    }

    /**
     * If true, the associated charge is subject to [liability shift](https://stripe.com/docs/sources/three-d-secure#disputed-payments).
     *
     * @return bool
     */
    public function getHasLiabilityShift(): ?bool
    {
        return $this->hasLiabilityShift;
    }

    /**
     * If true, the associated charge is subject to [liability shift](https://stripe.com/docs/sources/three-d-secure#disputed-payments).
     *
     * @param bool $hasLiabilityShift
     *
     * @return self
     */
    public function setHasLiabilityShift(?bool $hasLiabilityShift): self
    {
        $this->hasLiabilityShift = $hasLiabilityShift;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The timestamp at which the card issuer posted the issuer fraud record.
     *
     * @return int
     */
    public function getPostDate(): ?int
    {
        return $this->postDate;
    }

    /**
     * The timestamp at which the card issuer posted the issuer fraud record.
     *
     * @param int $postDate
     *
     * @return self
     */
    public function setPostDate(?int $postDate): self
    {
        $this->postDate = $postDate;

        return $this;
    }
}
