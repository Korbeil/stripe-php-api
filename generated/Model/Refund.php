<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Refund
{
    /**
     * Amount, in %s.
     *
     * @var int
     */
    protected $amount;
    /**
     * Balance transaction that describes the impact on your account balance.
     *
     * @var string
     */
    protected $balanceTransaction;
    /**
     * ID of the charge that was refunded.
     *
     * @var string
     */
    protected $charge;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only).
     *
     * @var string
     */
    protected $description;
    /**
     * If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
     *
     * @var string
     */
    protected $failureBalanceTransaction;
    /**
     * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
     *
     * @var string
     */
    protected $failureReason;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`.
     *
     * @var string
     */
    protected $reason;
    /**
     * This is the transaction number that appears on email receipts sent for this refund.
     *
     * @var string
     */
    protected $receiptNumber;
    /**
     * The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
     *
     * @var string
     */
    protected $sourceTransferReversal;
    /**
     * Status of the refund. For credit card refunds, this can be `succeeded` or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
     *
     * @var string
     */
    protected $status;
    /**
     * If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
     *
     * @var string
     */
    protected $transferReversal;

    /**
     * Amount, in %s.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Amount, in %s.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Balance transaction that describes the impact on your account balance.
     *
     * @return string
     */
    public function getBalanceTransaction(): ?string
    {
        return $this->balanceTransaction;
    }

    /**
     * Balance transaction that describes the impact on your account balance.
     *
     * @param string $balanceTransaction
     *
     * @return self
     */
    public function setBalanceTransaction(?string $balanceTransaction): self
    {
        $this->balanceTransaction = $balanceTransaction;

        return $this;
    }

    /**
     * ID of the charge that was refunded.
     *
     * @return string
     */
    public function getCharge(): ?string
    {
        return $this->charge;
    }

    /**
     * ID of the charge that was refunded.
     *
     * @param string $charge
     *
     * @return self
     */
    public function setCharge(?string $charge): self
    {
        $this->charge = $charge;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only).
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only).
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
     *
     * @return string
     */
    public function getFailureBalanceTransaction(): ?string
    {
        return $this->failureBalanceTransaction;
    }

    /**
     * If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
     *
     * @param string $failureBalanceTransaction
     *
     * @return self
     */
    public function setFailureBalanceTransaction(?string $failureBalanceTransaction): self
    {
        $this->failureBalanceTransaction = $failureBalanceTransaction;

        return $this;
    }

    /**
     * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
     *
     * @return string
     */
    public function getFailureReason(): ?string
    {
        return $this->failureReason;
    }

    /**
     * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
     *
     * @param string $failureReason
     *
     * @return self
     */
    public function setFailureReason(?string $failureReason): self
    {
        $this->failureReason = $failureReason;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`.
     *
     * @return string
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`.
     *
     * @param string $reason
     *
     * @return self
     */
    public function setReason(?string $reason): self
    {
        $this->reason = $reason;

        return $this;
    }

    /**
     * This is the transaction number that appears on email receipts sent for this refund.
     *
     * @return string
     */
    public function getReceiptNumber(): ?string
    {
        return $this->receiptNumber;
    }

    /**
     * This is the transaction number that appears on email receipts sent for this refund.
     *
     * @param string $receiptNumber
     *
     * @return self
     */
    public function setReceiptNumber(?string $receiptNumber): self
    {
        $this->receiptNumber = $receiptNumber;

        return $this;
    }

    /**
     * The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
     *
     * @return string
     */
    public function getSourceTransferReversal(): ?string
    {
        return $this->sourceTransferReversal;
    }

    /**
     * The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
     *
     * @param string $sourceTransferReversal
     *
     * @return self
     */
    public function setSourceTransferReversal(?string $sourceTransferReversal): self
    {
        $this->sourceTransferReversal = $sourceTransferReversal;

        return $this;
    }

    /**
     * Status of the refund. For credit card refunds, this can be `succeeded` or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Status of the refund. For credit card refunds, this can be `succeeded` or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
     *
     * @return string
     */
    public function getTransferReversal(): ?string
    {
        return $this->transferReversal;
    }

    /**
     * If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
     *
     * @param string $transferReversal
     *
     * @return self
     */
    public function setTransferReversal(?string $transferReversal): self
    {
        $this->transferReversal = $transferReversal;

        return $this;
    }
}
