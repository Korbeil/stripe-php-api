<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class File
{
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * A filename for the file, suitable for saving to a filesystem.
     *
     * @var string
     */
    protected $filename;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * @var FileLinks
     */
    protected $links;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The purpose of the file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `founders_stock_document`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`.
     *
     * @var string
     */
    protected $purpose;
    /**
     * The size in bytes of the file object.
     *
     * @var int
     */
    protected $size;
    /**
     * A user friendly title for the document.
     *
     * @var string
     */
    protected $title;
    /**
     * The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
     *
     * @var string
     */
    protected $type;
    /**
     * The URL from which the file can be downloaded using your live secret API key.
     *
     * @var string
     */
    protected $url;

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * A filename for the file, suitable for saving to a filesystem.
     *
     * @return string
     */
    public function getFilename(): ?string
    {
        return $this->filename;
    }

    /**
     * A filename for the file, suitable for saving to a filesystem.
     *
     * @param string $filename
     *
     * @return self
     */
    public function setFilename(?string $filename): self
    {
        $this->filename = $filename;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * @return FileLinks
     */
    public function getLinks(): ?FileLinks
    {
        return $this->links;
    }

    /**
     * @param FileLinks $links
     *
     * @return self
     */
    public function setLinks(?FileLinks $links): self
    {
        $this->links = $links;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The purpose of the file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `founders_stock_document`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`.
     *
     * @return string
     */
    public function getPurpose(): ?string
    {
        return $this->purpose;
    }

    /**
     * The purpose of the file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `founders_stock_document`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`.
     *
     * @param string $purpose
     *
     * @return self
     */
    public function setPurpose(?string $purpose): self
    {
        $this->purpose = $purpose;

        return $this;
    }

    /**
     * The size in bytes of the file object.
     *
     * @return int
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
     * The size in bytes of the file object.
     *
     * @param int $size
     *
     * @return self
     */
    public function setSize(?int $size): self
    {
        $this->size = $size;

        return $this;
    }

    /**
     * A user friendly title for the document.
     *
     * @return string
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * A user friendly title for the document.
     *
     * @param string $title
     *
     * @return self
     */
    public function setTitle(?string $title): self
    {
        $this->title = $title;

        return $this;
    }

    /**
     * The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * The URL from which the file can be downloaded using your live secret API key.
     *
     * @return string
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * The URL from which the file can be downloaded using your live secret API key.
     *
     * @param string $url
     *
     * @return self
     */
    public function setUrl(?string $url): self
    {
        $this->url = $url;

        return $this;
    }
}
