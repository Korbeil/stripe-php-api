<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1InvoicesPostBody
{
    /**
     * A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices).
     *
     * @var int
     */
    protected $applicationFeeAmount;
    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @var bool
     */
    protected $autoAdvance;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
     *
     * @var string
     */
    protected $billing;
    /**
     * A list of up to 4 custom fields to be displayed on the invoice.
     *
     * @var mixed
     */
    protected $customFields;
    /**
     * @var string
     */
    protected $customer;
    /**
     * The number of days from when the invoice is created until it is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @var int
     */
    protected $daysUntilDue;
    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @var string
     */
    protected $defaultSource;
    /**
     * @var string
     */
    protected $description;
    /**
     * The date on which payment for this invoice is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @var int
     */
    protected $dueDate;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * Footer to be displayed on the invoice.
     *
     * @var string
     */
    protected $footer;
    /**
     * @var mixed
     */
    protected $metadata;
    /**
     * Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will exclude pending invoice items that pertain to other subscriptions. The subscription's billing cycle and regular subscription events won't be affected.
     *
     * @var string
     */
    protected $subscription;
    /**
     * The percent tax rate applied to the invoice, represented as a decimal number.
     *
     * @var float
     */
    protected $taxPercent;

    /**
     * A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices).
     *
     * @return int
     */
    public function getApplicationFeeAmount(): ?int
    {
        return $this->applicationFeeAmount;
    }

    /**
     * A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices).
     *
     * @param int $applicationFeeAmount
     *
     * @return self
     */
    public function setApplicationFeeAmount(?int $applicationFeeAmount): self
    {
        $this->applicationFeeAmount = $applicationFeeAmount;

        return $this;
    }

    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @return bool
     */
    public function getAutoAdvance(): ?bool
    {
        return $this->autoAdvance;
    }

    /**
     * Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
     *
     * @param bool $autoAdvance
     *
     * @return self
     */
    public function setAutoAdvance(?bool $autoAdvance): self
    {
        $this->autoAdvance = $autoAdvance;

        return $this;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
     *
     * @return string
     */
    public function getBilling(): ?string
    {
        return $this->billing;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
     *
     * @param string $billing
     *
     * @return self
     */
    public function setBilling(?string $billing): self
    {
        $this->billing = $billing;

        return $this;
    }

    /**
     * A list of up to 4 custom fields to be displayed on the invoice.
     *
     * @return mixed
     */
    public function getCustomFields()
    {
        return $this->customFields;
    }

    /**
     * A list of up to 4 custom fields to be displayed on the invoice.
     *
     * @param mixed $customFields
     *
     * @return self
     */
    public function setCustomFields($customFields): self
    {
        $this->customFields = $customFields;

        return $this;
    }

    /**
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * The number of days from when the invoice is created until it is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @return int
     */
    public function getDaysUntilDue(): ?int
    {
        return $this->daysUntilDue;
    }

    /**
     * The number of days from when the invoice is created until it is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @param int $daysUntilDue
     *
     * @return self
     */
    public function setDaysUntilDue(?int $daysUntilDue): self
    {
        $this->daysUntilDue = $daysUntilDue;

        return $this;
    }

    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @return string
     */
    public function getDefaultSource(): ?string
    {
        return $this->defaultSource;
    }

    /**
     * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
     *
     * @param string $defaultSource
     *
     * @return self
     */
    public function setDefaultSource(?string $defaultSource): self
    {
        $this->defaultSource = $defaultSource;

        return $this;
    }

    /**
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * The date on which payment for this invoice is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @return int
     */
    public function getDueDate(): ?int
    {
        return $this->dueDate;
    }

    /**
     * The date on which payment for this invoice is due. Valid only for invoices where `billing=send_invoice`.
     *
     * @param int $dueDate
     *
     * @return self
     */
    public function setDueDate(?int $dueDate): self
    {
        $this->dueDate = $dueDate;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * Footer to be displayed on the invoice.
     *
     * @return string
     */
    public function getFooter(): ?string
    {
        return $this->footer;
    }

    /**
     * Footer to be displayed on the invoice.
     *
     * @param string $footer
     *
     * @return self
     */
    public function setFooter(?string $footer): self
    {
        $this->footer = $footer;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will exclude pending invoice items that pertain to other subscriptions. The subscription's billing cycle and regular subscription events won't be affected.
     *
     * @return string
     */
    public function getSubscription(): ?string
    {
        return $this->subscription;
    }

    /**
     * The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will exclude pending invoice items that pertain to other subscriptions. The subscription's billing cycle and regular subscription events won't be affected.
     *
     * @param string $subscription
     *
     * @return self
     */
    public function setSubscription(?string $subscription): self
    {
        $this->subscription = $subscription;

        return $this;
    }

    /**
     * The percent tax rate applied to the invoice, represented as a decimal number.
     *
     * @return float
     */
    public function getTaxPercent(): ?float
    {
        return $this->taxPercent;
    }

    /**
     * The percent tax rate applied to the invoice, represented as a decimal number.
     *
     * @param float $taxPercent
     *
     * @return self
     */
    public function setTaxPercent(?float $taxPercent): self
    {
        $this->taxPercent = $taxPercent;

        return $this;
    }
}
