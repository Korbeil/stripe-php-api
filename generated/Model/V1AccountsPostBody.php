<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1AccountsPostBody
{
    /**
     * An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
     *
     * @var string
     */
    protected $accountToken;
    /**
     * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details.
     *
     * @var mixed
     */
    protected $bankAccount;
    /**
     * Non-essential business information about the account.
     *
     * @var V1AccountsPostBodyBusinessProfile
     */
    protected $businessProfile;
    /**
     * The business type. Can be `individual` or `company`.
     *
     * @var string
     */
    protected $businessType;
    /**
     * Information about the company or business. This field is null unless `business_type` is set to `company`.
     *
     * @var V1AccountsPostBodyCompany
     */
    protected $company;
    /**
     * The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created.
     *
     * @var string
     */
    protected $country;
    /**
     * Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
     *
     * @var string
     */
    protected $defaultCurrency;
    /**
     * The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users.
     *
     * @var string
     */
    protected $email;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.
     *
     * @var string
     */
    protected $externalAccount;
    /**
     * @var string
     */
    protected $fromRecipient;
    /**
     * Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
     *
     * @var V1AccountsPostBodyIndividual
     */
    protected $individual;
    /**
     * A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The set of capabilities you want to unlock for this account (US only). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
     *
     * @var string[]
     */
    protected $requestedCapabilities;
    /**
     * Options for customizing how the account functions within Stripe.
     *
     * @var V1AccountsPostBodySettings
     */
    protected $settings;
    /**
     * Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
     *
     * @var V1AccountsPostBodyTosAcceptance
     */
    protected $tosAcceptance;
    /**
     * The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API.
     *
     * @var string
     */
    protected $type;

    /**
     * An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
     *
     * @return string
     */
    public function getAccountToken(): ?string
    {
        return $this->accountToken;
    }

    /**
     * An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
     *
     * @param string $accountToken
     *
     * @return self
     */
    public function setAccountToken(?string $accountToken): self
    {
        $this->accountToken = $accountToken;

        return $this;
    }

    /**
     * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details.
     *
     * @return mixed
     */
    public function getBankAccount()
    {
        return $this->bankAccount;
    }

    /**
     * Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details.
     *
     * @param mixed $bankAccount
     *
     * @return self
     */
    public function setBankAccount($bankAccount): self
    {
        $this->bankAccount = $bankAccount;

        return $this;
    }

    /**
     * Non-essential business information about the account.
     *
     * @return V1AccountsPostBodyBusinessProfile
     */
    public function getBusinessProfile(): ?V1AccountsPostBodyBusinessProfile
    {
        return $this->businessProfile;
    }

    /**
     * Non-essential business information about the account.
     *
     * @param V1AccountsPostBodyBusinessProfile $businessProfile
     *
     * @return self
     */
    public function setBusinessProfile(?V1AccountsPostBodyBusinessProfile $businessProfile): self
    {
        $this->businessProfile = $businessProfile;

        return $this;
    }

    /**
     * The business type. Can be `individual` or `company`.
     *
     * @return string
     */
    public function getBusinessType(): ?string
    {
        return $this->businessType;
    }

    /**
     * The business type. Can be `individual` or `company`.
     *
     * @param string $businessType
     *
     * @return self
     */
    public function setBusinessType(?string $businessType): self
    {
        $this->businessType = $businessType;

        return $this;
    }

    /**
     * Information about the company or business. This field is null unless `business_type` is set to `company`.
     *
     * @return V1AccountsPostBodyCompany
     */
    public function getCompany(): ?V1AccountsPostBodyCompany
    {
        return $this->company;
    }

    /**
     * Information about the company or business. This field is null unless `business_type` is set to `company`.
     *
     * @param V1AccountsPostBodyCompany $company
     *
     * @return self
     */
    public function setCompany(?V1AccountsPostBodyCompany $company): self
    {
        $this->company = $company;

        return $this;
    }

    /**
     * The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created.
     *
     * @return string
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created.
     *
     * @param string $country
     *
     * @return self
     */
    public function setCountry(?string $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
     *
     * @return string
     */
    public function getDefaultCurrency(): ?string
    {
        return $this->defaultCurrency;
    }

    /**
     * Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
     *
     * @param string $defaultCurrency
     *
     * @return self
     */
    public function setDefaultCurrency(?string $defaultCurrency): self
    {
        $this->defaultCurrency = $defaultCurrency;

        return $this;
    }

    /**
     * The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users.
     *
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users.
     *
     * @param string $email
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.
     *
     * @return string
     */
    public function getExternalAccount(): ?string
    {
        return $this->externalAccount;
    }

    /**
     * A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API.
     *
     * @param string $externalAccount
     *
     * @return self
     */
    public function setExternalAccount(?string $externalAccount): self
    {
        $this->externalAccount = $externalAccount;

        return $this;
    }

    /**
     * @return string
     */
    public function getFromRecipient(): ?string
    {
        return $this->fromRecipient;
    }

    /**
     * @param string $fromRecipient
     *
     * @return self
     */
    public function setFromRecipient(?string $fromRecipient): self
    {
        $this->fromRecipient = $fromRecipient;

        return $this;
    }

    /**
     * Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
     *
     * @return V1AccountsPostBodyIndividual
     */
    public function getIndividual(): ?V1AccountsPostBodyIndividual
    {
        return $this->individual;
    }

    /**
     * Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
     *
     * @param V1AccountsPostBodyIndividual $individual
     *
     * @return self
     */
    public function setIndividual(?V1AccountsPostBodyIndividual $individual): self
    {
        $this->individual = $individual;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to an `Account` object. This can be useful for storing additional information about the account in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The set of capabilities you want to unlock for this account (US only). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
     *
     * @return string[]
     */
    public function getRequestedCapabilities(): ?array
    {
        return $this->requestedCapabilities;
    }

    /**
     * The set of capabilities you want to unlock for this account (US only). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
     *
     * @param string[] $requestedCapabilities
     *
     * @return self
     */
    public function setRequestedCapabilities(?array $requestedCapabilities): self
    {
        $this->requestedCapabilities = $requestedCapabilities;

        return $this;
    }

    /**
     * Options for customizing how the account functions within Stripe.
     *
     * @return V1AccountsPostBodySettings
     */
    public function getSettings(): ?V1AccountsPostBodySettings
    {
        return $this->settings;
    }

    /**
     * Options for customizing how the account functions within Stripe.
     *
     * @param V1AccountsPostBodySettings $settings
     *
     * @return self
     */
    public function setSettings(?V1AccountsPostBodySettings $settings): self
    {
        $this->settings = $settings;

        return $this;
    }

    /**
     * Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
     *
     * @return V1AccountsPostBodyTosAcceptance
     */
    public function getTosAcceptance(): ?V1AccountsPostBodyTosAcceptance
    {
        return $this->tosAcceptance;
    }

    /**
     * Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
     *
     * @param V1AccountsPostBodyTosAcceptance $tosAcceptance
     *
     * @return self
     */
    public function setTosAcceptance(?V1AccountsPostBodyTosAcceptance $tosAcceptance): self
    {
        $this->tosAcceptance = $tosAcceptance;

        return $this;
    }

    /**
     * The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
