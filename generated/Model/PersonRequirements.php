<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class PersonRequirements
{
    /**
     * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields are moved to `past_due` and the account is disabled.
     *
     * @var string[]
     */
    protected $currentlyDue;
    /**
     * Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set.
     *
     * @var string[]
     */
    protected $eventuallyDue;
    /**
     * Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account.
     *
     * @var string[]
     */
    protected $pastDue;

    /**
     * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields are moved to `past_due` and the account is disabled.
     *
     * @return string[]
     */
    public function getCurrentlyDue(): ?array
    {
        return $this->currentlyDue;
    }

    /**
     * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields are moved to `past_due` and the account is disabled.
     *
     * @param string[] $currentlyDue
     *
     * @return self
     */
    public function setCurrentlyDue(?array $currentlyDue): self
    {
        $this->currentlyDue = $currentlyDue;

        return $this;
    }

    /**
     * Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set.
     *
     * @return string[]
     */
    public function getEventuallyDue(): ?array
    {
        return $this->eventuallyDue;
    }

    /**
     * Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set.
     *
     * @param string[] $eventuallyDue
     *
     * @return self
     */
    public function setEventuallyDue(?array $eventuallyDue): self
    {
        $this->eventuallyDue = $eventuallyDue;

        return $this;
    }

    /**
     * Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account.
     *
     * @return string[]
     */
    public function getPastDue(): ?array
    {
        return $this->pastDue;
    }

    /**
     * Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account.
     *
     * @param string[] $pastDue
     *
     * @return self
     */
    public function setPastDue(?array $pastDue): self
    {
        $this->pastDue = $pastDue;

        return $this;
    }
}
