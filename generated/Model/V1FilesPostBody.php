<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1FilesPostBody
{
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
     *
     * @var string
     */
    protected $file;
    /**
     * Optional parameters to automatically create a [file link](#file_links) for the newly created file.
     *
     * @var V1FilesPostBodyFileLinkData
     */
    protected $fileLinkData;
    /**
     * The purpose of the uploaded file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`.
     *
     * @var string
     */
    protected $purpose;

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
     *
     * @return string
     */
    public function getFile(): ?string
    {
        return $this->file;
    }

    /**
     * A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol).
     *
     * @param string $file
     *
     * @return self
     */
    public function setFile(?string $file): self
    {
        $this->file = $file;

        return $this;
    }

    /**
     * Optional parameters to automatically create a [file link](#file_links) for the newly created file.
     *
     * @return V1FilesPostBodyFileLinkData
     */
    public function getFileLinkData(): ?V1FilesPostBodyFileLinkData
    {
        return $this->fileLinkData;
    }

    /**
     * Optional parameters to automatically create a [file link](#file_links) for the newly created file.
     *
     * @param V1FilesPostBodyFileLinkData $fileLinkData
     *
     * @return self
     */
    public function setFileLinkData(?V1FilesPostBodyFileLinkData $fileLinkData): self
    {
        $this->fileLinkData = $fileLinkData;

        return $this;
    }

    /**
     * The purpose of the uploaded file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`.
     *
     * @return string
     */
    public function getPurpose(): ?string
    {
        return $this->purpose;
    }

    /**
     * The purpose of the uploaded file. Possible values are `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`.
     *
     * @param string $purpose
     *
     * @return self
     */
    public function setPurpose(?string $purpose): self
    {
        $this->purpose = $purpose;

        return $this;
    }
}
