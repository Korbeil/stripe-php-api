<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuingSettlement
{
    /**
     * The Bank Identification Number reflecting this settlement record.
     *
     * @var string
     */
    protected $bin;
    /**
     * The date that the transactions are cleared and posted to user's accounts.
     *
     * @var int
     */
    protected $clearingDate;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The total interchange received as reimbursement for the transactions.
     *
     * @var int
     */
    protected $interchangeFees;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The total net amount required to settle with the network.
     *
     * @var int
     */
    protected $netTotal;
    /**
     * The total amount of fees owed to the network.
     *
     * @var int
     */
    protected $networkFees;
    /**
     * The Settlement Identification Number assigned by the network.
     *
     * @var string
     */
    protected $networkSettlementIdentifier;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * One of `international` or `uk_national_net`.
     *
     * @var string
     */
    protected $settlementService;
    /**
     * The total number of transactions reflected in this settlement.
     *
     * @var int
     */
    protected $transactionCount;
    /**
     * The total transaction amount reflected in this settlement.
     *
     * @var int
     */
    protected $transactionVolume;

    /**
     * The Bank Identification Number reflecting this settlement record.
     *
     * @return string
     */
    public function getBin(): ?string
    {
        return $this->bin;
    }

    /**
     * The Bank Identification Number reflecting this settlement record.
     *
     * @param string $bin
     *
     * @return self
     */
    public function setBin(?string $bin): self
    {
        $this->bin = $bin;

        return $this;
    }

    /**
     * The date that the transactions are cleared and posted to user's accounts.
     *
     * @return int
     */
    public function getClearingDate(): ?int
    {
        return $this->clearingDate;
    }

    /**
     * The date that the transactions are cleared and posted to user's accounts.
     *
     * @param int $clearingDate
     *
     * @return self
     */
    public function setClearingDate(?int $clearingDate): self
    {
        $this->clearingDate = $clearingDate;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The total interchange received as reimbursement for the transactions.
     *
     * @return int
     */
    public function getInterchangeFees(): ?int
    {
        return $this->interchangeFees;
    }

    /**
     * The total interchange received as reimbursement for the transactions.
     *
     * @param int $interchangeFees
     *
     * @return self
     */
    public function setInterchangeFees(?int $interchangeFees): self
    {
        $this->interchangeFees = $interchangeFees;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The total net amount required to settle with the network.
     *
     * @return int
     */
    public function getNetTotal(): ?int
    {
        return $this->netTotal;
    }

    /**
     * The total net amount required to settle with the network.
     *
     * @param int $netTotal
     *
     * @return self
     */
    public function setNetTotal(?int $netTotal): self
    {
        $this->netTotal = $netTotal;

        return $this;
    }

    /**
     * The total amount of fees owed to the network.
     *
     * @return int
     */
    public function getNetworkFees(): ?int
    {
        return $this->networkFees;
    }

    /**
     * The total amount of fees owed to the network.
     *
     * @param int $networkFees
     *
     * @return self
     */
    public function setNetworkFees(?int $networkFees): self
    {
        $this->networkFees = $networkFees;

        return $this;
    }

    /**
     * The Settlement Identification Number assigned by the network.
     *
     * @return string
     */
    public function getNetworkSettlementIdentifier(): ?string
    {
        return $this->networkSettlementIdentifier;
    }

    /**
     * The Settlement Identification Number assigned by the network.
     *
     * @param string $networkSettlementIdentifier
     *
     * @return self
     */
    public function setNetworkSettlementIdentifier(?string $networkSettlementIdentifier): self
    {
        $this->networkSettlementIdentifier = $networkSettlementIdentifier;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * One of `international` or `uk_national_net`.
     *
     * @return string
     */
    public function getSettlementService(): ?string
    {
        return $this->settlementService;
    }

    /**
     * One of `international` or `uk_national_net`.
     *
     * @param string $settlementService
     *
     * @return self
     */
    public function setSettlementService(?string $settlementService): self
    {
        $this->settlementService = $settlementService;

        return $this;
    }

    /**
     * The total number of transactions reflected in this settlement.
     *
     * @return int
     */
    public function getTransactionCount(): ?int
    {
        return $this->transactionCount;
    }

    /**
     * The total number of transactions reflected in this settlement.
     *
     * @param int $transactionCount
     *
     * @return self
     */
    public function setTransactionCount(?int $transactionCount): self
    {
        $this->transactionCount = $transactionCount;

        return $this;
    }

    /**
     * The total transaction amount reflected in this settlement.
     *
     * @return int
     */
    public function getTransactionVolume(): ?int
    {
        return $this->transactionVolume;
    }

    /**
     * The total transaction amount reflected in this settlement.
     *
     * @param int $transactionVolume
     *
     * @return self
     */
    public function setTransactionVolume(?int $transactionVolume): self
    {
        $this->transactionVolume = $transactionVolume;

        return $this;
    }
}
