<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Event
{
    /**
     * The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
     *
     * @var string
     */
    protected $apiVersion;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * @var NotificationEventData
     */
    protected $data;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
     *
     * @var int
     */
    protected $pendingWebhooks;
    /**
     * @var NotificationEventRequest
     */
    protected $request;
    /**
     * Description of the event (e.g., `invoice.created` or `charge.refunded`).
     *
     * @var string
     */
    protected $type;

    /**
     * The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
     *
     * @return string
     */
    public function getApiVersion(): ?string
    {
        return $this->apiVersion;
    }

    /**
     * The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
     *
     * @param string $apiVersion
     *
     * @return self
     */
    public function setApiVersion(?string $apiVersion): self
    {
        $this->apiVersion = $apiVersion;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * @return NotificationEventData
     */
    public function getData(): ?NotificationEventData
    {
        return $this->data;
    }

    /**
     * @param NotificationEventData $data
     *
     * @return self
     */
    public function setData(?NotificationEventData $data): self
    {
        $this->data = $data;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
     *
     * @return int
     */
    public function getPendingWebhooks(): ?int
    {
        return $this->pendingWebhooks;
    }

    /**
     * Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
     *
     * @param int $pendingWebhooks
     *
     * @return self
     */
    public function setPendingWebhooks(?int $pendingWebhooks): self
    {
        $this->pendingWebhooks = $pendingWebhooks;

        return $this;
    }

    /**
     * @return NotificationEventRequest
     */
    public function getRequest(): ?NotificationEventRequest
    {
        return $this->request;
    }

    /**
     * @param NotificationEventRequest $request
     *
     * @return self
     */
    public function setRequest(?NotificationEventRequest $request): self
    {
        $this->request = $request;

        return $this;
    }

    /**
     * Description of the event (e.g., `invoice.created` or `charge.refunded`).
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Description of the event (e.g., `invoice.created` or `charge.refunded`).
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
