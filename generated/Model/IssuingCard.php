<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuingCard
{
    /**
     * @var IssuingCardAuthorizationControls
     */
    protected $authorizationControls;
    /**
     * The brand of the card.
     *
     * @var string
     */
    protected $brand;
    /**
     * @var IssuingCardholder
     */
    protected $cardholder;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * The expiration month of the card.
     *
     * @var int
     */
    protected $expMonth;
    /**
     * The expiration year of the card.
     *
     * @var int
     */
    protected $expYear;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The last 4 digits of the card number.
     *
     * @var string
     */
    protected $last4;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The name of the cardholder, printed on the card.
     *
     * @var string
     */
    protected $name;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var IssuingCardShipping
     */
    protected $shipping;
    /**
     * One of `active`, `inactive`, `canceled`, `lost`, `stolen`, or `pending`.
     *
     * @var string
     */
    protected $status;
    /**
     * One of `virtual` or `physical`.
     *
     * @var string
     */
    protected $type;

    /**
     * @return IssuingCardAuthorizationControls
     */
    public function getAuthorizationControls(): ?IssuingCardAuthorizationControls
    {
        return $this->authorizationControls;
    }

    /**
     * @param IssuingCardAuthorizationControls $authorizationControls
     *
     * @return self
     */
    public function setAuthorizationControls(?IssuingCardAuthorizationControls $authorizationControls): self
    {
        $this->authorizationControls = $authorizationControls;

        return $this;
    }

    /**
     * The brand of the card.
     *
     * @return string
     */
    public function getBrand(): ?string
    {
        return $this->brand;
    }

    /**
     * The brand of the card.
     *
     * @param string $brand
     *
     * @return self
     */
    public function setBrand(?string $brand): self
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * @return IssuingCardholder
     */
    public function getCardholder(): ?IssuingCardholder
    {
        return $this->cardholder;
    }

    /**
     * @param IssuingCardholder $cardholder
     *
     * @return self
     */
    public function setCardholder(?IssuingCardholder $cardholder): self
    {
        $this->cardholder = $cardholder;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The expiration month of the card.
     *
     * @return int
     */
    public function getExpMonth(): ?int
    {
        return $this->expMonth;
    }

    /**
     * The expiration month of the card.
     *
     * @param int $expMonth
     *
     * @return self
     */
    public function setExpMonth(?int $expMonth): self
    {
        $this->expMonth = $expMonth;

        return $this;
    }

    /**
     * The expiration year of the card.
     *
     * @return int
     */
    public function getExpYear(): ?int
    {
        return $this->expYear;
    }

    /**
     * The expiration year of the card.
     *
     * @param int $expYear
     *
     * @return self
     */
    public function setExpYear(?int $expYear): self
    {
        $this->expYear = $expYear;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The last 4 digits of the card number.
     *
     * @return string
     */
    public function getLast4(): ?string
    {
        return $this->last4;
    }

    /**
     * The last 4 digits of the card number.
     *
     * @param string $last4
     *
     * @return self
     */
    public function setLast4(?string $last4): self
    {
        $this->last4 = $last4;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The name of the cardholder, printed on the card.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The name of the cardholder, printed on the card.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return IssuingCardShipping
     */
    public function getShipping(): ?IssuingCardShipping
    {
        return $this->shipping;
    }

    /**
     * @param IssuingCardShipping $shipping
     *
     * @return self
     */
    public function setShipping(?IssuingCardShipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * One of `active`, `inactive`, `canceled`, `lost`, `stolen`, or `pending`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * One of `active`, `inactive`, `canceled`, `lost`, `stolen`, or `pending`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * One of `virtual` or `physical`.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * One of `virtual` or `physical`.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
