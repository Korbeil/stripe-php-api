<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1SkusPostBody
{
    /**
     * Whether the SKU is available for purchase. Default to `true`.
     *
     * @var bool
     */
    protected $active;
    /**
     * A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
     *
     * @var mixed
     */
    protected $attributes;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
     *
     * @var string
     */
    protected $id;
    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @var string
     */
    protected $image;
    /**
     * Description of the SKU's inventory.
     *
     * @var V1SkusPostBodyInventory
     */
    protected $inventory;
    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @var V1SkusPostBodyPackageDimensions
     */
    protected $packageDimensions;
    /**
     * The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @var int
     */
    protected $price;
    /**
     * The ID of the product this SKU is associated with. Must be a product with type `good`.
     *
     * @var string
     */
    protected $product;

    /**
     * Whether the SKU is available for purchase. Default to `true`.
     *
     * @return bool
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Whether the SKU is available for purchase. Default to `true`.
     *
     * @param bool $active
     *
     * @return self
     */
    public function setActive(?bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
     *
     * @return mixed
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
     *
     * @param mixed $attributes
     *
     * @return self
     */
    public function setAttributes($attributes): self
    {
        $this->attributes = $attributes;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @return string
     */
    public function getImage(): ?string
    {
        return $this->image;
    }

    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @param string $image
     *
     * @return self
     */
    public function setImage(?string $image): self
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Description of the SKU's inventory.
     *
     * @return V1SkusPostBodyInventory
     */
    public function getInventory(): ?V1SkusPostBodyInventory
    {
        return $this->inventory;
    }

    /**
     * Description of the SKU's inventory.
     *
     * @param V1SkusPostBodyInventory $inventory
     *
     * @return self
     */
    public function setInventory(?V1SkusPostBodyInventory $inventory): self
    {
        $this->inventory = $inventory;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @return V1SkusPostBodyPackageDimensions
     */
    public function getPackageDimensions(): ?V1SkusPostBodyPackageDimensions
    {
        return $this->packageDimensions;
    }

    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @param V1SkusPostBodyPackageDimensions $packageDimensions
     *
     * @return self
     */
    public function setPackageDimensions(?V1SkusPostBodyPackageDimensions $packageDimensions): self
    {
        $this->packageDimensions = $packageDimensions;

        return $this;
    }

    /**
     * The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @return int
     */
    public function getPrice(): ?int
    {
        return $this->price;
    }

    /**
     * The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @param int $price
     *
     * @return self
     */
    public function setPrice(?int $price): self
    {
        $this->price = $price;

        return $this;
    }

    /**
     * The ID of the product this SKU is associated with. Must be a product with type `good`.
     *
     * @return string
     */
    public function getProduct(): ?string
    {
        return $this->product;
    }

    /**
     * The ID of the product this SKU is associated with. Must be a product with type `good`.
     *
     * @param string $product
     *
     * @return self
     */
    public function setProduct(?string $product): self
    {
        $this->product = $product;

        return $this;
    }
}
