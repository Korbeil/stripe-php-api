<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1OrdersIdPostBody
{
    /**
     * A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.
     *
     * @var string
     */
    protected $coupon;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the order in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary.
     *
     * @var string
     */
    protected $selectedShippingMethod;
    /**
     * Tracking information once the order has been fulfilled.
     *
     * @var V1OrdersIdPostBodyShipping
     */
    protected $shipping;
    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @var string
     */
    protected $status;

    /**
     * A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.
     *
     * @return string
     */
    public function getCoupon(): ?string
    {
        return $this->coupon;
    }

    /**
     * A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order.
     *
     * @param string $coupon
     *
     * @return self
     */
    public function setCoupon(?string $coupon): self
    {
        $this->coupon = $coupon;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the order in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a product object. It can be useful for storing additional information about the order in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary.
     *
     * @return string
     */
    public function getSelectedShippingMethod(): ?string
    {
        return $this->selectedShippingMethod;
    }

    /**
     * The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary.
     *
     * @param string $selectedShippingMethod
     *
     * @return self
     */
    public function setSelectedShippingMethod(?string $selectedShippingMethod): self
    {
        $this->selectedShippingMethod = $selectedShippingMethod;

        return $this;
    }

    /**
     * Tracking information once the order has been fulfilled.
     *
     * @return V1OrdersIdPostBodyShipping
     */
    public function getShipping(): ?V1OrdersIdPostBodyShipping
    {
        return $this->shipping;
    }

    /**
     * Tracking information once the order has been fulfilled.
     *
     * @param V1OrdersIdPostBodyShipping $shipping
     *
     * @return self
     */
    public function setShipping(?V1OrdersIdPostBodyShipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }
}
