<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuingAuthorizationRequest
{
    /**
     * Whether this request was approved.
     *
     * @var bool
     */
    protected $approved;
    /**
     * The amount that was authorized at the time of this request.
     *
     * @var int
     */
    protected $authorizedAmount;
    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $authorizedCurrency;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * The amount Stripe held from your account to fund the authorization, if the request was approved.
     *
     * @var int
     */
    protected $heldAmount;
    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount).
     *
     * @var string
     */
    protected $heldCurrency;
    /**
     * One of `authorization_controls`, `card_active`, `card_inactive`, `insufficient_funds`, `account_compliance_disabled`, `account_inactive`, `suspected_fraud`, `webhook_approved`, `webhook_declined`, or `webhook_timeout`.
     *
     * @var string
     */
    protected $reason;

    /**
     * Whether this request was approved.
     *
     * @return bool
     */
    public function getApproved(): ?bool
    {
        return $this->approved;
    }

    /**
     * Whether this request was approved.
     *
     * @param bool $approved
     *
     * @return self
     */
    public function setApproved(?bool $approved): self
    {
        $this->approved = $approved;

        return $this;
    }

    /**
     * The amount that was authorized at the time of this request.
     *
     * @return int
     */
    public function getAuthorizedAmount(): ?int
    {
        return $this->authorizedAmount;
    }

    /**
     * The amount that was authorized at the time of this request.
     *
     * @param int $authorizedAmount
     *
     * @return self
     */
    public function setAuthorizedAmount(?int $authorizedAmount): self
    {
        $this->authorizedAmount = $authorizedAmount;

        return $this;
    }

    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getAuthorizedCurrency(): ?string
    {
        return $this->authorizedCurrency;
    }

    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $authorizedCurrency
     *
     * @return self
     */
    public function setAuthorizedCurrency(?string $authorizedCurrency): self
    {
        $this->authorizedCurrency = $authorizedCurrency;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * The amount Stripe held from your account to fund the authorization, if the request was approved.
     *
     * @return int
     */
    public function getHeldAmount(): ?int
    {
        return $this->heldAmount;
    }

    /**
     * The amount Stripe held from your account to fund the authorization, if the request was approved.
     *
     * @param int $heldAmount
     *
     * @return self
     */
    public function setHeldAmount(?int $heldAmount): self
    {
        $this->heldAmount = $heldAmount;

        return $this;
    }

    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount).
     *
     * @return string
     */
    public function getHeldCurrency(): ?string
    {
        return $this->heldCurrency;
    }

    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount).
     *
     * @param string $heldCurrency
     *
     * @return self
     */
    public function setHeldCurrency(?string $heldCurrency): self
    {
        $this->heldCurrency = $heldCurrency;

        return $this;
    }

    /**
     * One of `authorization_controls`, `card_active`, `card_inactive`, `insufficient_funds`, `account_compliance_disabled`, `account_inactive`, `suspected_fraud`, `webhook_approved`, `webhook_declined`, or `webhook_timeout`.
     *
     * @return string
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * One of `authorization_controls`, `card_active`, `card_inactive`, `insufficient_funds`, `account_compliance_disabled`, `account_inactive`, `suspected_fraud`, `webhook_approved`, `webhook_declined`, or `webhook_timeout`.
     *
     * @param string $reason
     *
     * @return self
     */
    public function setReason(?string $reason): self
    {
        $this->reason = $reason;

        return $this;
    }
}
