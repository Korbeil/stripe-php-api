<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1SkusIdPostBody
{
    /**
     * Whether this SKU is available for purchase.
     *
     * @var bool
     */
    protected $active;
    /**
     * A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product.
     *
     * @var mixed
     */
    protected $attributes;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @var string
     */
    protected $image;
    /**
     * Description of the SKU's inventory.
     *
     * @var V1SkusIdPostBodyInventory
     */
    protected $inventory;
    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @var V1SkusIdPostBodyPackageDimensions
     */
    protected $packageDimensions;
    /**
     * The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @var int
     */
    protected $price;
    /**
     * The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
     *
     * @var string
     */
    protected $product;

    /**
     * Whether this SKU is available for purchase.
     *
     * @return bool
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Whether this SKU is available for purchase.
     *
     * @param bool $active
     *
     * @return self
     */
    public function setActive(?bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product.
     *
     * @return mixed
     */
    public function getAttributes()
    {
        return $this->attributes;
    }

    /**
     * A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product.
     *
     * @param mixed $attributes
     *
     * @return self
     */
    public function setAttributes($attributes): self
    {
        $this->attributes = $attributes;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @return string
     */
    public function getImage(): ?string
    {
        return $this->image;
    }

    /**
     * The URL of an image for this SKU, meant to be displayable to the customer.
     *
     * @param string $image
     *
     * @return self
     */
    public function setImage(?string $image): self
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Description of the SKU's inventory.
     *
     * @return V1SkusIdPostBodyInventory
     */
    public function getInventory(): ?V1SkusIdPostBodyInventory
    {
        return $this->inventory;
    }

    /**
     * Description of the SKU's inventory.
     *
     * @param V1SkusIdPostBodyInventory $inventory
     *
     * @return self
     */
    public function setInventory(?V1SkusIdPostBodyInventory $inventory): self
    {
        $this->inventory = $inventory;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @return V1SkusIdPostBodyPackageDimensions
     */
    public function getPackageDimensions(): ?V1SkusIdPostBodyPackageDimensions
    {
        return $this->packageDimensions;
    }

    /**
     * The dimensions of this SKU for shipping purposes.
     *
     * @param V1SkusIdPostBodyPackageDimensions $packageDimensions
     *
     * @return self
     */
    public function setPackageDimensions(?V1SkusIdPostBodyPackageDimensions $packageDimensions): self
    {
        $this->packageDimensions = $packageDimensions;

        return $this;
    }

    /**
     * The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @return int
     */
    public function getPrice(): ?int
    {
        return $this->price;
    }

    /**
     * The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
     *
     * @param int $price
     *
     * @return self
     */
    public function setPrice(?int $price): self
    {
        $this->price = $price;

        return $this;
    }

    /**
     * The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
     *
     * @return string
     */
    public function getProduct(): ?string
    {
        return $this->product;
    }

    /**
     * The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`.
     *
     * @param string $product
     *
     * @return self
     */
    public function setProduct(?string $product): self
    {
        $this->product = $product;

        return $this;
    }
}
