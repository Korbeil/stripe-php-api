<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class SubscriptionSchedule
{
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @var string
     */
    protected $billing;
    /**
     * @var SubscriptionBillingThresholds
     */
    protected $billingThresholds;
    /**
     * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $canceledAt;
    /**
     * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $completedAt;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * @var SubscriptionScheduleCurrentPhase
     */
    protected $currentPhase;
    /**
     * ID of the customer who owns the subscription schedule.
     *
     * @var string
     */
    protected $customer;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * @var InvoiceSettingSubscriptionScheduleSetting
     */
    protected $invoiceSettings;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Configuration for the subscription schedule's phases.
     *
     * @var SubscriptionSchedulePhaseConfiguration[]
     */
    protected $phases;
    /**
     * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $releasedAt;
    /**
     * ID of the subscription once managed by the subscription schedule (if it is released).
     *
     * @var string
     */
    protected $releasedSubscription;
    /**
     * Behavior of the subscription schedule and underlying subscription when it ends.
     *
     * @var string
     */
    protected $renewalBehavior;
    /**
     * @var SubscriptionScheduleRenewalInterval
     */
    protected $renewalInterval;
    /**
     * ID of the current revision of the subscription schedule.
     *
     * @var string
     */
    protected $revision;
    /**
     * Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.
     *
     * @var string
     */
    protected $status;
    /**
     * ID of the subscription managed by the subscription schedule.
     *
     * @var string
     */
    protected $subscription;

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @return string
     */
    public function getBilling(): ?string
    {
        return $this->billing;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @param string $billing
     *
     * @return self
     */
    public function setBilling(?string $billing): self
    {
        $this->billing = $billing;

        return $this;
    }

    /**
     * @return SubscriptionBillingThresholds
     */
    public function getBillingThresholds(): ?SubscriptionBillingThresholds
    {
        return $this->billingThresholds;
    }

    /**
     * @param SubscriptionBillingThresholds $billingThresholds
     *
     * @return self
     */
    public function setBillingThresholds(?SubscriptionBillingThresholds $billingThresholds): self
    {
        $this->billingThresholds = $billingThresholds;

        return $this;
    }

    /**
     * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCanceledAt(): ?int
    {
        return $this->canceledAt;
    }

    /**
     * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
     *
     * @param int $canceledAt
     *
     * @return self
     */
    public function setCanceledAt(?int $canceledAt): self
    {
        $this->canceledAt = $canceledAt;

        return $this;
    }

    /**
     * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCompletedAt(): ?int
    {
        return $this->completedAt;
    }

    /**
     * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
     *
     * @param int $completedAt
     *
     * @return self
     */
    public function setCompletedAt(?int $completedAt): self
    {
        $this->completedAt = $completedAt;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * @return SubscriptionScheduleCurrentPhase
     */
    public function getCurrentPhase(): ?SubscriptionScheduleCurrentPhase
    {
        return $this->currentPhase;
    }

    /**
     * @param SubscriptionScheduleCurrentPhase $currentPhase
     *
     * @return self
     */
    public function setCurrentPhase(?SubscriptionScheduleCurrentPhase $currentPhase): self
    {
        $this->currentPhase = $currentPhase;

        return $this;
    }

    /**
     * ID of the customer who owns the subscription schedule.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * ID of the customer who owns the subscription schedule.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * @return InvoiceSettingSubscriptionScheduleSetting
     */
    public function getInvoiceSettings(): ?InvoiceSettingSubscriptionScheduleSetting
    {
        return $this->invoiceSettings;
    }

    /**
     * @param InvoiceSettingSubscriptionScheduleSetting $invoiceSettings
     *
     * @return self
     */
    public function setInvoiceSettings(?InvoiceSettingSubscriptionScheduleSetting $invoiceSettings): self
    {
        $this->invoiceSettings = $invoiceSettings;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Configuration for the subscription schedule's phases.
     *
     * @return SubscriptionSchedulePhaseConfiguration[]
     */
    public function getPhases(): ?array
    {
        return $this->phases;
    }

    /**
     * Configuration for the subscription schedule's phases.
     *
     * @param SubscriptionSchedulePhaseConfiguration[] $phases
     *
     * @return self
     */
    public function setPhases(?array $phases): self
    {
        $this->phases = $phases;

        return $this;
    }

    /**
     * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getReleasedAt(): ?int
    {
        return $this->releasedAt;
    }

    /**
     * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
     *
     * @param int $releasedAt
     *
     * @return self
     */
    public function setReleasedAt(?int $releasedAt): self
    {
        $this->releasedAt = $releasedAt;

        return $this;
    }

    /**
     * ID of the subscription once managed by the subscription schedule (if it is released).
     *
     * @return string
     */
    public function getReleasedSubscription(): ?string
    {
        return $this->releasedSubscription;
    }

    /**
     * ID of the subscription once managed by the subscription schedule (if it is released).
     *
     * @param string $releasedSubscription
     *
     * @return self
     */
    public function setReleasedSubscription(?string $releasedSubscription): self
    {
        $this->releasedSubscription = $releasedSubscription;

        return $this;
    }

    /**
     * Behavior of the subscription schedule and underlying subscription when it ends.
     *
     * @return string
     */
    public function getRenewalBehavior(): ?string
    {
        return $this->renewalBehavior;
    }

    /**
     * Behavior of the subscription schedule and underlying subscription when it ends.
     *
     * @param string $renewalBehavior
     *
     * @return self
     */
    public function setRenewalBehavior(?string $renewalBehavior): self
    {
        $this->renewalBehavior = $renewalBehavior;

        return $this;
    }

    /**
     * @return SubscriptionScheduleRenewalInterval
     */
    public function getRenewalInterval(): ?SubscriptionScheduleRenewalInterval
    {
        return $this->renewalInterval;
    }

    /**
     * @param SubscriptionScheduleRenewalInterval $renewalInterval
     *
     * @return self
     */
    public function setRenewalInterval(?SubscriptionScheduleRenewalInterval $renewalInterval): self
    {
        $this->renewalInterval = $renewalInterval;

        return $this;
    }

    /**
     * ID of the current revision of the subscription schedule.
     *
     * @return string
     */
    public function getRevision(): ?string
    {
        return $this->revision;
    }

    /**
     * ID of the current revision of the subscription schedule.
     *
     * @param string $revision
     *
     * @return self
     */
    public function setRevision(?string $revision): self
    {
        $this->revision = $revision;

        return $this;
    }

    /**
     * Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * ID of the subscription managed by the subscription schedule.
     *
     * @return string
     */
    public function getSubscription(): ?string
    {
        return $this->subscription;
    }

    /**
     * ID of the subscription managed by the subscription schedule.
     *
     * @param string $subscription
     *
     * @return self
     */
    public function setSubscription(?string $subscription): self
    {
        $this->subscription = $subscription;

        return $this;
    }
}
