<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class ChargeOutcome
{
    /**
     * Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
     *
     * @var string
     */
    protected $networkStatus;
    /**
     * An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
     *
     * @var string
     */
    protected $reason;
    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`.
     *
     * @var string
     */
    protected $riskLevel;
    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
     *
     * @var int
     */
    protected $riskScore;
    /**
     * The ID of the Radar rule that matched the payment, if applicable.
     *
     * @var string
     */
    protected $rule;
    /**
     * A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
     *
     * @var string
     */
    protected $sellerMessage;
    /**
     * Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](radar/review) for details.
     *
     * @var string
     */
    protected $type;

    /**
     * Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
     *
     * @return string
     */
    public function getNetworkStatus(): ?string
    {
        return $this->networkStatus;
    }

    /**
     * Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
     *
     * @param string $networkStatus
     *
     * @return self
     */
    public function setNetworkStatus(?string $networkStatus): self
    {
        $this->networkStatus = $networkStatus;

        return $this;
    }

    /**
     * An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
     *
     * @return string
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
     *
     * @param string $reason
     *
     * @return self
     */
    public function setReason(?string $reason): self
    {
        $this->reason = $reason;

        return $this;
    }

    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`.
     *
     * @return string
     */
    public function getRiskLevel(): ?string
    {
        return $this->riskLevel;
    }

    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`.
     *
     * @param string $riskLevel
     *
     * @return self
     */
    public function setRiskLevel(?string $riskLevel): self
    {
        $this->riskLevel = $riskLevel;

        return $this;
    }

    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
     *
     * @return int
     */
    public function getRiskScore(): ?int
    {
        return $this->riskScore;
    }

    /**
     * Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
     *
     * @param int $riskScore
     *
     * @return self
     */
    public function setRiskScore(?int $riskScore): self
    {
        $this->riskScore = $riskScore;

        return $this;
    }

    /**
     * The ID of the Radar rule that matched the payment, if applicable.
     *
     * @return string
     */
    public function getRule(): ?string
    {
        return $this->rule;
    }

    /**
     * The ID of the Radar rule that matched the payment, if applicable.
     *
     * @param string $rule
     *
     * @return self
     */
    public function setRule(?string $rule): self
    {
        $this->rule = $rule;

        return $this;
    }

    /**
     * A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
     *
     * @return string
     */
    public function getSellerMessage(): ?string
    {
        return $this->sellerMessage;
    }

    /**
     * A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
     *
     * @param string $sellerMessage
     *
     * @return self
     */
    public function setSellerMessage(?string $sellerMessage): self
    {
        $this->sellerMessage = $sellerMessage;

        return $this;
    }

    /**
     * Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](radar/review) for details.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](radar/review) for details.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
