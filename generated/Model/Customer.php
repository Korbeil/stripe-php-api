<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Customer
{
    /**
     * Current balance, if any, being stored on the customer's account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. Note that the balance does not include unpaid invoices.
     *
     * @var int
     */
    protected $accountBalance;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
     *
     * @var string
     */
    protected $currency;
    /**
     * ID of the default payment source for the customer.
     *
     * @var string
     */
    protected $defaultSource;
    /**
     * When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.
     *
     * @var bool
     */
    protected $delinquent;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @var string
     */
    protected $description;
    /**
     * @var Discount
     */
    protected $discount;
    /**
     * The customer's email address.
     *
     * @var string
     */
    protected $email;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The prefix for the customer used to generate unique invoice numbers.
     *
     * @var string
     */
    protected $invoicePrefix;
    /**
     * @var InvoiceSettingCustomerSetting
     */
    protected $invoiceSettings;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var Shipping
     */
    protected $shipping;
    /**
     * The customer's payment sources, if any.
     *
     * @var CustomerSources
     */
    protected $sources;
    /**
     * The customer's current subscriptions, if any.
     *
     * @var CustomerSubscriptions
     */
    protected $subscriptions;
    /**
     * @var TaxInfo
     */
    protected $taxInfo;
    /**
     * @var TaxInfoVerification
     */
    protected $taxInfoVerification;

    /**
     * Current balance, if any, being stored on the customer's account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. Note that the balance does not include unpaid invoices.
     *
     * @return int
     */
    public function getAccountBalance(): ?int
    {
        return $this->accountBalance;
    }

    /**
     * Current balance, if any, being stored on the customer's account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. Note that the balance does not include unpaid invoices.
     *
     * @param int $accountBalance
     *
     * @return self
     */
    public function setAccountBalance(?int $accountBalance): self
    {
        $this->accountBalance = $accountBalance;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * ID of the default payment source for the customer.
     *
     * @return string
     */
    public function getDefaultSource(): ?string
    {
        return $this->defaultSource;
    }

    /**
     * ID of the default payment source for the customer.
     *
     * @param string $defaultSource
     *
     * @return self
     */
    public function setDefaultSource(?string $defaultSource): self
    {
        $this->defaultSource = $defaultSource;

        return $this;
    }

    /**
     * When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.
     *
     * @return bool
     */
    public function getDelinquent(): ?bool
    {
        return $this->delinquent;
    }

    /**
     * When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.
     *
     * @param bool $delinquent
     *
     * @return self
     */
    public function setDelinquent(?bool $delinquent): self
    {
        $this->delinquent = $delinquent;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return Discount
     */
    public function getDiscount(): ?Discount
    {
        return $this->discount;
    }

    /**
     * @param Discount $discount
     *
     * @return self
     */
    public function setDiscount(?Discount $discount): self
    {
        $this->discount = $discount;

        return $this;
    }

    /**
     * The customer's email address.
     *
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * The customer's email address.
     *
     * @param string $email
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The prefix for the customer used to generate unique invoice numbers.
     *
     * @return string
     */
    public function getInvoicePrefix(): ?string
    {
        return $this->invoicePrefix;
    }

    /**
     * The prefix for the customer used to generate unique invoice numbers.
     *
     * @param string $invoicePrefix
     *
     * @return self
     */
    public function setInvoicePrefix(?string $invoicePrefix): self
    {
        $this->invoicePrefix = $invoicePrefix;

        return $this;
    }

    /**
     * @return InvoiceSettingCustomerSetting
     */
    public function getInvoiceSettings(): ?InvoiceSettingCustomerSetting
    {
        return $this->invoiceSettings;
    }

    /**
     * @param InvoiceSettingCustomerSetting $invoiceSettings
     *
     * @return self
     */
    public function setInvoiceSettings(?InvoiceSettingCustomerSetting $invoiceSettings): self
    {
        $this->invoiceSettings = $invoiceSettings;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return Shipping
     */
    public function getShipping(): ?Shipping
    {
        return $this->shipping;
    }

    /**
     * @param Shipping $shipping
     *
     * @return self
     */
    public function setShipping(?Shipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * The customer's payment sources, if any.
     *
     * @return CustomerSources
     */
    public function getSources(): ?CustomerSources
    {
        return $this->sources;
    }

    /**
     * The customer's payment sources, if any.
     *
     * @param CustomerSources $sources
     *
     * @return self
     */
    public function setSources(?CustomerSources $sources): self
    {
        $this->sources = $sources;

        return $this;
    }

    /**
     * The customer's current subscriptions, if any.
     *
     * @return CustomerSubscriptions
     */
    public function getSubscriptions(): ?CustomerSubscriptions
    {
        return $this->subscriptions;
    }

    /**
     * The customer's current subscriptions, if any.
     *
     * @param CustomerSubscriptions $subscriptions
     *
     * @return self
     */
    public function setSubscriptions(?CustomerSubscriptions $subscriptions): self
    {
        $this->subscriptions = $subscriptions;

        return $this;
    }

    /**
     * @return TaxInfo
     */
    public function getTaxInfo(): ?TaxInfo
    {
        return $this->taxInfo;
    }

    /**
     * @param TaxInfo $taxInfo
     *
     * @return self
     */
    public function setTaxInfo(?TaxInfo $taxInfo): self
    {
        $this->taxInfo = $taxInfo;

        return $this;
    }

    /**
     * @return TaxInfoVerification
     */
    public function getTaxInfoVerification(): ?TaxInfoVerification
    {
        return $this->taxInfoVerification;
    }

    /**
     * @param TaxInfoVerification $taxInfoVerification
     *
     * @return self
     */
    public function setTaxInfoVerification(?TaxInfoVerification $taxInfoVerification): self
    {
        $this->taxInfoVerification = $taxInfoVerification;

        return $this;
    }
}
