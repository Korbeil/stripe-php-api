<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuingCardAuthorizationControls
{
    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card.
     *
     * @var string[]
     */
    protected $allowedCategories;
    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card.
     *
     * @var string[]
     */
    protected $blockedCategories;
    /**
     * The currency of the card. See [max_amount](https://stripe.com/docs/api#issuing_card_object-authorization_controls-max_amount).
     *
     * @var string
     */
    protected $currency;
    /**
     * Maximum amount allowed per authorization on this card, in the currency of the card. Authorization amounts in a different currency will be converted to the card's currency when evaluating this control.
     *
     * @var int
     */
    protected $maxAmount;
    /**
     * Maximum count of approved authorizations on this card. Counts all authorizations retroactively.
     *
     * @var int
     */
    protected $maxApprovals;

    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card.
     *
     * @return string[]
     */
    public function getAllowedCategories(): ?array
    {
        return $this->allowedCategories;
    }

    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card.
     *
     * @param string[] $allowedCategories
     *
     * @return self
     */
    public function setAllowedCategories(?array $allowedCategories): self
    {
        $this->allowedCategories = $allowedCategories;

        return $this;
    }

    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card.
     *
     * @return string[]
     */
    public function getBlockedCategories(): ?array
    {
        return $this->blockedCategories;
    }

    /**
     * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card.
     *
     * @param string[] $blockedCategories
     *
     * @return self
     */
    public function setBlockedCategories(?array $blockedCategories): self
    {
        $this->blockedCategories = $blockedCategories;

        return $this;
    }

    /**
     * The currency of the card. See [max_amount](https://stripe.com/docs/api#issuing_card_object-authorization_controls-max_amount).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * The currency of the card. See [max_amount](https://stripe.com/docs/api#issuing_card_object-authorization_controls-max_amount).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Maximum amount allowed per authorization on this card, in the currency of the card. Authorization amounts in a different currency will be converted to the card's currency when evaluating this control.
     *
     * @return int
     */
    public function getMaxAmount(): ?int
    {
        return $this->maxAmount;
    }

    /**
     * Maximum amount allowed per authorization on this card, in the currency of the card. Authorization amounts in a different currency will be converted to the card's currency when evaluating this control.
     *
     * @param int $maxAmount
     *
     * @return self
     */
    public function setMaxAmount(?int $maxAmount): self
    {
        $this->maxAmount = $maxAmount;

        return $this;
    }

    /**
     * Maximum count of approved authorizations on this card. Counts all authorizations retroactively.
     *
     * @return int
     */
    public function getMaxApprovals(): ?int
    {
        return $this->maxApprovals;
    }

    /**
     * Maximum count of approved authorizations on this card. Counts all authorizations retroactively.
     *
     * @param int $maxApprovals
     *
     * @return self
     */
    public function setMaxApprovals(?int $maxApprovals): self
    {
        $this->maxApprovals = $maxApprovals;

        return $this;
    }
}
