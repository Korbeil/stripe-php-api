<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1SubscriptionItemsItemPostBody
{
    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
     *
     * @var mixed
     */
    protected $billingThresholds;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The identifier of the new plan for this subscription item.
     *
     * @var string
     */
    protected $plan;
    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @var bool
     */
    protected $prorate;
    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @var int
     */
    protected $prorationDate;
    /**
     * The quantity you'd like to apply to the subscription item you're creating.
     *
     * @var int
     */
    protected $quantity;

    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
     *
     * @return mixed
     */
    public function getBillingThresholds()
    {
        return $this->billingThresholds;
    }

    /**
     * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period.
     *
     * @param mixed $billingThresholds
     *
     * @return self
     */
    public function setBillingThresholds($billingThresholds): self
    {
        $this->billingThresholds = $billingThresholds;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The identifier of the new plan for this subscription item.
     *
     * @return string
     */
    public function getPlan(): ?string
    {
        return $this->plan;
    }

    /**
     * The identifier of the new plan for this subscription item.
     *
     * @param string $plan
     *
     * @return self
     */
    public function setPlan(?string $plan): self
    {
        $this->plan = $plan;

        return $this;
    }

    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @return bool
     */
    public function getProrate(): ?bool
    {
        return $this->prorate;
    }

    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @param bool $prorate
     *
     * @return self
     */
    public function setProrate(?bool $prorate): self
    {
        $this->prorate = $prorate;

        return $this;
    }

    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @return int
     */
    public function getProrationDate(): ?int
    {
        return $this->prorationDate;
    }

    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @param int $prorationDate
     *
     * @return self
     */
    public function setProrationDate(?int $prorationDate): self
    {
        $this->prorationDate = $prorationDate;

        return $this;
    }

    /**
     * The quantity you'd like to apply to the subscription item you're creating.
     *
     * @return int
     */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
     * The quantity you'd like to apply to the subscription item you're creating.
     *
     * @param int $quantity
     *
     * @return self
     */
    public function setQuantity(?int $quantity): self
    {
        $this->quantity = $quantity;

        return $this;
    }
}
