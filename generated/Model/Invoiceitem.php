<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Invoiceitem
{
    /**
     * Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
     *
     * @var int
     */
    protected $amount;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * The ID of the customer who will be billed when this invoice item is billed.
     *
     * @var string
     */
    protected $customer;
    /**
     * @var int
     */
    protected $date;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @var string
     */
    protected $description;
    /**
     * If true, discounts will apply to this invoice item. Always false for prorations.
     *
     * @var bool
     */
    protected $discountable;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The ID of the invoice this invoice item belongs to.
     *
     * @var string
     */
    protected $invoice;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var InvoiceLineItemPeriod
     */
    protected $period;
    /**
     * @var Plan
     */
    protected $plan;
    /**
     * Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
     *
     * @var bool
     */
    protected $proration;
    /**
     * Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
     *
     * @var int
     */
    protected $quantity;
    /**
     * The subscription that this invoice item has been created for, if any.
     *
     * @var string
     */
    protected $subscription;
    /**
     * @var string
     */
    protected $subscriptionItem;
    /**
     * Unit Amount (in the `currency` specified) of the invoice item.
     *
     * @var int
     */
    protected $unitAmount;

    /**
     * Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The ID of the customer who will be billed when this invoice item is billed.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The ID of the customer who will be billed when this invoice item is billed.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * @return int
     */
    public function getDate(): ?int
    {
        return $this->date;
    }

    /**
     * @param int $date
     *
     * @return self
     */
    public function setDate(?int $date): self
    {
        $this->date = $date;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * If true, discounts will apply to this invoice item. Always false for prorations.
     *
     * @return bool
     */
    public function getDiscountable(): ?bool
    {
        return $this->discountable;
    }

    /**
     * If true, discounts will apply to this invoice item. Always false for prorations.
     *
     * @param bool $discountable
     *
     * @return self
     */
    public function setDiscountable(?bool $discountable): self
    {
        $this->discountable = $discountable;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The ID of the invoice this invoice item belongs to.
     *
     * @return string
     */
    public function getInvoice(): ?string
    {
        return $this->invoice;
    }

    /**
     * The ID of the invoice this invoice item belongs to.
     *
     * @param string $invoice
     *
     * @return self
     */
    public function setInvoice(?string $invoice): self
    {
        $this->invoice = $invoice;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return InvoiceLineItemPeriod
     */
    public function getPeriod(): ?InvoiceLineItemPeriod
    {
        return $this->period;
    }

    /**
     * @param InvoiceLineItemPeriod $period
     *
     * @return self
     */
    public function setPeriod(?InvoiceLineItemPeriod $period): self
    {
        $this->period = $period;

        return $this;
    }

    /**
     * @return Plan
     */
    public function getPlan(): ?Plan
    {
        return $this->plan;
    }

    /**
     * @param Plan $plan
     *
     * @return self
     */
    public function setPlan(?Plan $plan): self
    {
        $this->plan = $plan;

        return $this;
    }

    /**
     * Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
     *
     * @return bool
     */
    public function getProration(): ?bool
    {
        return $this->proration;
    }

    /**
     * Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
     *
     * @param bool $proration
     *
     * @return self
     */
    public function setProration(?bool $proration): self
    {
        $this->proration = $proration;

        return $this;
    }

    /**
     * Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
     *
     * @return int
     */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
     * Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
     *
     * @param int $quantity
     *
     * @return self
     */
    public function setQuantity(?int $quantity): self
    {
        $this->quantity = $quantity;

        return $this;
    }

    /**
     * The subscription that this invoice item has been created for, if any.
     *
     * @return string
     */
    public function getSubscription(): ?string
    {
        return $this->subscription;
    }

    /**
     * The subscription that this invoice item has been created for, if any.
     *
     * @param string $subscription
     *
     * @return self
     */
    public function setSubscription(?string $subscription): self
    {
        $this->subscription = $subscription;

        return $this;
    }

    /**
     * @return string
     */
    public function getSubscriptionItem(): ?string
    {
        return $this->subscriptionItem;
    }

    /**
     * @param string $subscriptionItem
     *
     * @return self
     */
    public function setSubscriptionItem(?string $subscriptionItem): self
    {
        $this->subscriptionItem = $subscriptionItem;

        return $this;
    }

    /**
     * Unit Amount (in the `currency` specified) of the invoice item.
     *
     * @return int
     */
    public function getUnitAmount(): ?int
    {
        return $this->unitAmount;
    }

    /**
     * Unit Amount (in the `currency` specified) of the invoice item.
     *
     * @param int $unitAmount
     *
     * @return self
     */
    public function setUnitAmount(?int $unitAmount): self
    {
        $this->unitAmount = $unitAmount;

        return $this;
    }
}
