<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1PlansPostBody
{
    /**
     * Whether the plan is currently available for new subscriptions. Defaults to `true`.
     *
     * @var bool
     */
    protected $active;
    /**
     * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
     *
     * @var string
     */
    protected $aggregateUsage;
    /**
     * A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis.
     *
     * @var int
     */
    protected $amount;
    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     *
     * @var string
     */
    protected $billingScheme;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
     *
     * @var string
     */
    protected $id;
    /**
     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
     *
     * @var string
     */
    protected $interval;
    /**
     * The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
     *
     * @var int
     */
    protected $intervalCount;
    /**
     * A set of key-value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The plan name. Customers may see this value on Stripe-generated invoices and receipts.
     *
     * @var string
     */
    protected $name;
    /**
     * A brief description of the plan, hidden from customers.
     *
     * @var string
     */
    protected $nickname;
    /**
     * The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type).
     *
     * @var V1PlansPostBodyProduct
     */
    protected $product;
    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
     *
     * @var V1PlansPostBodyTiersItem[]
     */
    protected $tiers;
    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     *
     * @var string
     */
    protected $tiersMode;
    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     *
     * @var V1PlansPostBodyTransformUsage
     */
    protected $transformUsage;
    /**
     * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
     *
     * @var int
     */
    protected $trialPeriodDays;
    /**
     * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
     *
     * @var string
     */
    protected $usageType;

    /**
     * Whether the plan is currently available for new subscriptions. Defaults to `true`.
     *
     * @return bool
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Whether the plan is currently available for new subscriptions. Defaults to `true`.
     *
     * @param bool $active
     *
     * @return self
     */
    public function setActive(?bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
     *
     * @return string
     */
    public function getAggregateUsage(): ?string
    {
        return $this->aggregateUsage;
    }

    /**
     * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
     *
     * @param string $aggregateUsage
     *
     * @return self
     */
    public function setAggregateUsage(?string $aggregateUsage): self
    {
        $this->aggregateUsage = $aggregateUsage;

        return $this;
    }

    /**
     * A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     *
     * @return string
     */
    public function getBillingScheme(): ?string
    {
        return $this->billingScheme;
    }

    /**
     * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     *
     * @param string $billingScheme
     *
     * @return self
     */
    public function setBillingScheme(?string $billingScheme): self
    {
        $this->billingScheme = $billingScheme;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
     *
     * @return string
     */
    public function getInterval(): ?string
    {
        return $this->interval;
    }

    /**
     * Specifies billing frequency. Either `day`, `week`, `month` or `year`.
     *
     * @param string $interval
     *
     * @return self
     */
    public function setInterval(?string $interval): self
    {
        $this->interval = $interval;

        return $this;
    }

    /**
     * The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
     *
     * @return int
     */
    public function getIntervalCount(): ?int
    {
        return $this->intervalCount;
    }

    /**
     * The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
     *
     * @param int $intervalCount
     *
     * @return self
     */
    public function setIntervalCount(?int $intervalCount): self
    {
        $this->intervalCount = $intervalCount;

        return $this;
    }

    /**
     * A set of key-value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * A set of key-value pairs that you can attach to a plan object. It can be useful for storing additional information about the plan in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The plan name. Customers may see this value on Stripe-generated invoices and receipts.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The plan name. Customers may see this value on Stripe-generated invoices and receipts.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * A brief description of the plan, hidden from customers.
     *
     * @return string
     */
    public function getNickname(): ?string
    {
        return $this->nickname;
    }

    /**
     * A brief description of the plan, hidden from customers.
     *
     * @param string $nickname
     *
     * @return self
     */
    public function setNickname(?string $nickname): self
    {
        $this->nickname = $nickname;

        return $this;
    }

    /**
     * The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type).
     *
     * @return V1PlansPostBodyProduct
     */
    public function getProduct(): ?V1PlansPostBodyProduct
    {
        return $this->product;
    }

    /**
     * The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type).
     *
     * @param V1PlansPostBodyProduct $product
     *
     * @return self
     */
    public function setProduct(?V1PlansPostBodyProduct $product): self
    {
        $this->product = $product;

        return $this;
    }

    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * An arbitrary string to be displayed on your customer's credit card statement. This may be up to 22 characters. The statement description may not include <>"' characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all. It must contain at least one letter.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
     *
     * @return V1PlansPostBodyTiersItem[]
     */
    public function getTiers(): ?array
    {
        return $this->tiers;
    }

    /**
     * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
     *
     * @param V1PlansPostBodyTiersItem[] $tiers
     *
     * @return self
     */
    public function setTiers(?array $tiers): self
    {
        $this->tiers = $tiers;

        return $this;
    }

    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     *
     * @return string
     */
    public function getTiersMode(): ?string
    {
        return $this->tiersMode;
    }

    /**
     * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
     *
     * @param string $tiersMode
     *
     * @return self
     */
    public function setTiersMode(?string $tiersMode): self
    {
        $this->tiersMode = $tiersMode;

        return $this;
    }

    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     *
     * @return V1PlansPostBodyTransformUsage
     */
    public function getTransformUsage(): ?V1PlansPostBodyTransformUsage
    {
        return $this->transformUsage;
    }

    /**
     * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
     *
     * @param V1PlansPostBodyTransformUsage $transformUsage
     *
     * @return self
     */
    public function setTransformUsage(?V1PlansPostBodyTransformUsage $transformUsage): self
    {
        $this->transformUsage = $transformUsage;

        return $this;
    }

    /**
     * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
     *
     * @return int
     */
    public function getTrialPeriodDays(): ?int
    {
        return $this->trialPeriodDays;
    }

    /**
     * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
     *
     * @param int $trialPeriodDays
     *
     * @return self
     */
    public function setTrialPeriodDays(?int $trialPeriodDays): self
    {
        $this->trialPeriodDays = $trialPeriodDays;

        return $this;
    }

    /**
     * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
     *
     * @return string
     */
    public function getUsageType(): ?string
    {
        return $this->usageType;
    }

    /**
     * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
     *
     * @param string $usageType
     *
     * @return self
     */
    public function setUsageType(?string $usageType): self
    {
        $this->usageType = $usageType;

        return $this;
    }
}
