<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Recipient
{
    /**
     * @var BankAccount
     */
    protected $activeAccount;
    /**
     * @var RecipientCards
     */
    protected $cards;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * The default card to use for creating transfers to this recipient.
     *
     * @var string
     */
    protected $defaultCard;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @var string
     */
    protected $description;
    /**
     * @var string
     */
    protected $email;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
     *
     * @var string
     */
    protected $migratedTo;
    /**
     * Full, legal name of the recipient.
     *
     * @var string
     */
    protected $name;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var string
     */
    protected $rolledBackFrom;
    /**
     * Type of the recipient, one of `individual` or `corporation`.
     *
     * @var string
     */
    protected $type;

    /**
     * @return BankAccount
     */
    public function getActiveAccount(): ?BankAccount
    {
        return $this->activeAccount;
    }

    /**
     * @param BankAccount $activeAccount
     *
     * @return self
     */
    public function setActiveAccount(?BankAccount $activeAccount): self
    {
        $this->activeAccount = $activeAccount;

        return $this;
    }

    /**
     * @return RecipientCards
     */
    public function getCards(): ?RecipientCards
    {
        return $this->cards;
    }

    /**
     * @param RecipientCards $cards
     *
     * @return self
     */
    public function setCards(?RecipientCards $cards): self
    {
        $this->cards = $cards;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * The default card to use for creating transfers to this recipient.
     *
     * @return string
     */
    public function getDefaultCard(): ?string
    {
        return $this->defaultCard;
    }

    /**
     * The default card to use for creating transfers to this recipient.
     *
     * @param string $defaultCard
     *
     * @return self
     */
    public function setDefaultCard(?string $defaultCard): self
    {
        $this->defaultCard = $defaultCard;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * @param string $email
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
     *
     * @return string
     */
    public function getMigratedTo(): ?string
    {
        return $this->migratedTo;
    }

    /**
     * The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
     *
     * @param string $migratedTo
     *
     * @return self
     */
    public function setMigratedTo(?string $migratedTo): self
    {
        $this->migratedTo = $migratedTo;

        return $this;
    }

    /**
     * Full, legal name of the recipient.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Full, legal name of the recipient.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return string
     */
    public function getRolledBackFrom(): ?string
    {
        return $this->rolledBackFrom;
    }

    /**
     * @param string $rolledBackFrom
     *
     * @return self
     */
    public function setRolledBackFrom(?string $rolledBackFrom): self
    {
        $this->rolledBackFrom = $rolledBackFrom;

        return $this;
    }

    /**
     * Type of the recipient, one of `individual` or `corporation`.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Type of the recipient, one of `individual` or `corporation`.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
