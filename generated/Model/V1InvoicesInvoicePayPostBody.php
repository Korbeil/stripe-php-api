<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1InvoicesInvoicePayPostBody
{
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.

    Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.
     *
     * @var bool
     */
    protected $forgive;
    /**
     * Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made.
     *
     * @var bool
     */
    protected $paidOutOfBand;
    /**
     * A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
     *
     * @var string
     */
    protected $source;

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.

    Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.
     *
     * @return bool
     */
    public function getForgive(): ?bool
    {
        return $this->forgive;
    }

    /**
     * In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.

    Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.
     *
     * @param bool $forgive
     *
     * @return self
     */
    public function setForgive(?bool $forgive): self
    {
        $this->forgive = $forgive;

        return $this;
    }

    /**
     * Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made.
     *
     * @return bool
     */
    public function getPaidOutOfBand(): ?bool
    {
        return $this->paidOutOfBand;
    }

    /**
     * Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made.
     *
     * @param bool $paidOutOfBand
     *
     * @return self
     */
    public function setPaidOutOfBand(?bool $paidOutOfBand): self
    {
        $this->paidOutOfBand = $paidOutOfBand;

        return $this;
    }

    /**
     * A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
     *
     * @return string
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
     *
     * @param string $source
     *
     * @return self
     */
    public function setSource(?string $source): self
    {
        $this->source = $source;

        return $this;
    }
}
