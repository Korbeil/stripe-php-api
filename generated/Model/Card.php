<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Card
{
    /**
     * The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
     *
     * @var string
     */
    protected $account;
    /**
     * City/District/Suburb/Town/Village.
     *
     * @var string
     */
    protected $addressCity;
    /**
     * Billing address country, if provided when creating card.
     *
     * @var string
     */
    protected $addressCountry;
    /**
     * Address line 1 (Street address/PO Box/Company name).
     *
     * @var string
     */
    protected $addressLine1;
    /**
     * If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @var string
     */
    protected $addressLine1Check;
    /**
     * Address line 2 (Apartment/Suite/Unit/Building).
     *
     * @var string
     */
    protected $addressLine2;
    /**
     * State/County/Province/Region.
     *
     * @var string
     */
    protected $addressState;
    /**
     * ZIP or postal code.
     *
     * @var string
     */
    protected $addressZip;
    /**
     * If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @var string
     */
    protected $addressZipCheck;
    /**
     * A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer.
     *
     * @var string[]
     */
    protected $availablePayoutMethods;
    /**
     * Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
     *
     * @var string
     */
    protected $brand;
    /**
     * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
     *
     * @var string
     */
    protected $country;
    /**
     * @var string
     */
    protected $currency;
    /**
     * The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
     *
     * @var string
     */
    protected $customer;
    /**
     * If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @var string
     */
    protected $cvcCheck;
    /**
     * Whether this card is the default external account for its currency.
     *
     * @var bool
     */
    protected $defaultForCurrency;
    /**
     * (For tokenized numbers only.) The last four digits of the device account number.
     *
     * @var string
     */
    protected $dynamicLast4;
    /**
     * Two-digit number representing the card's expiration month.
     *
     * @var int
     */
    protected $expMonth;
    /**
     * Four-digit number representing the card's expiration year.
     *
     * @var int
     */
    protected $expYear;
    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.
     *
     * @var string
     */
    protected $fingerprint;
    /**
     * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
     *
     * @var string
     */
    protected $funding;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * The last four digits of the card.
     *
     * @var string
     */
    protected $last4;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * Cardholder name.
     *
     * @var string
     */
    protected $name;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
     *
     * @var string
     */
    protected $recipient;
    /**
     * If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`.
     *
     * @var string
     */
    protected $tokenizationMethod;

    /**
     * The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
     *
     * @return string
     */
    public function getAccount(): ?string
    {
        return $this->account;
    }

    /**
     * The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
     *
     * @param string $account
     *
     * @return self
     */
    public function setAccount(?string $account): self
    {
        $this->account = $account;

        return $this;
    }

    /**
     * City/District/Suburb/Town/Village.
     *
     * @return string
     */
    public function getAddressCity(): ?string
    {
        return $this->addressCity;
    }

    /**
     * City/District/Suburb/Town/Village.
     *
     * @param string $addressCity
     *
     * @return self
     */
    public function setAddressCity(?string $addressCity): self
    {
        $this->addressCity = $addressCity;

        return $this;
    }

    /**
     * Billing address country, if provided when creating card.
     *
     * @return string
     */
    public function getAddressCountry(): ?string
    {
        return $this->addressCountry;
    }

    /**
     * Billing address country, if provided when creating card.
     *
     * @param string $addressCountry
     *
     * @return self
     */
    public function setAddressCountry(?string $addressCountry): self
    {
        $this->addressCountry = $addressCountry;

        return $this;
    }

    /**
     * Address line 1 (Street address/PO Box/Company name).
     *
     * @return string
     */
    public function getAddressLine1(): ?string
    {
        return $this->addressLine1;
    }

    /**
     * Address line 1 (Street address/PO Box/Company name).
     *
     * @param string $addressLine1
     *
     * @return self
     */
    public function setAddressLine1(?string $addressLine1): self
    {
        $this->addressLine1 = $addressLine1;

        return $this;
    }

    /**
     * If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @return string
     */
    public function getAddressLine1Check(): ?string
    {
        return $this->addressLine1Check;
    }

    /**
     * If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @param string $addressLine1Check
     *
     * @return self
     */
    public function setAddressLine1Check(?string $addressLine1Check): self
    {
        $this->addressLine1Check = $addressLine1Check;

        return $this;
    }

    /**
     * Address line 2 (Apartment/Suite/Unit/Building).
     *
     * @return string
     */
    public function getAddressLine2(): ?string
    {
        return $this->addressLine2;
    }

    /**
     * Address line 2 (Apartment/Suite/Unit/Building).
     *
     * @param string $addressLine2
     *
     * @return self
     */
    public function setAddressLine2(?string $addressLine2): self
    {
        $this->addressLine2 = $addressLine2;

        return $this;
    }

    /**
     * State/County/Province/Region.
     *
     * @return string
     */
    public function getAddressState(): ?string
    {
        return $this->addressState;
    }

    /**
     * State/County/Province/Region.
     *
     * @param string $addressState
     *
     * @return self
     */
    public function setAddressState(?string $addressState): self
    {
        $this->addressState = $addressState;

        return $this;
    }

    /**
     * ZIP or postal code.
     *
     * @return string
     */
    public function getAddressZip(): ?string
    {
        return $this->addressZip;
    }

    /**
     * ZIP or postal code.
     *
     * @param string $addressZip
     *
     * @return self
     */
    public function setAddressZip(?string $addressZip): self
    {
        $this->addressZip = $addressZip;

        return $this;
    }

    /**
     * If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @return string
     */
    public function getAddressZipCheck(): ?string
    {
        return $this->addressZipCheck;
    }

    /**
     * If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @param string $addressZipCheck
     *
     * @return self
     */
    public function setAddressZipCheck(?string $addressZipCheck): self
    {
        $this->addressZipCheck = $addressZipCheck;

        return $this;
    }

    /**
     * A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer.
     *
     * @return string[]
     */
    public function getAvailablePayoutMethods(): ?array
    {
        return $this->availablePayoutMethods;
    }

    /**
     * A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer.
     *
     * @param string[] $availablePayoutMethods
     *
     * @return self
     */
    public function setAvailablePayoutMethods(?array $availablePayoutMethods): self
    {
        $this->availablePayoutMethods = $availablePayoutMethods;

        return $this;
    }

    /**
     * Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
     *
     * @return string
     */
    public function getBrand(): ?string
    {
        return $this->brand;
    }

    /**
     * Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
     *
     * @param string $brand
     *
     * @return self
     */
    public function setBrand(?string $brand): self
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
     *
     * @return string
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
     *
     * @param string $country
     *
     * @return self
     */
    public function setCountry(?string $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @return string
     */
    public function getCvcCheck(): ?string
    {
        return $this->cvcCheck;
    }

    /**
     * If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
     *
     * @param string $cvcCheck
     *
     * @return self
     */
    public function setCvcCheck(?string $cvcCheck): self
    {
        $this->cvcCheck = $cvcCheck;

        return $this;
    }

    /**
     * Whether this card is the default external account for its currency.
     *
     * @return bool
     */
    public function getDefaultForCurrency(): ?bool
    {
        return $this->defaultForCurrency;
    }

    /**
     * Whether this card is the default external account for its currency.
     *
     * @param bool $defaultForCurrency
     *
     * @return self
     */
    public function setDefaultForCurrency(?bool $defaultForCurrency): self
    {
        $this->defaultForCurrency = $defaultForCurrency;

        return $this;
    }

    /**
     * (For tokenized numbers only.) The last four digits of the device account number.
     *
     * @return string
     */
    public function getDynamicLast4(): ?string
    {
        return $this->dynamicLast4;
    }

    /**
     * (For tokenized numbers only.) The last four digits of the device account number.
     *
     * @param string $dynamicLast4
     *
     * @return self
     */
    public function setDynamicLast4(?string $dynamicLast4): self
    {
        $this->dynamicLast4 = $dynamicLast4;

        return $this;
    }

    /**
     * Two-digit number representing the card's expiration month.
     *
     * @return int
     */
    public function getExpMonth(): ?int
    {
        return $this->expMonth;
    }

    /**
     * Two-digit number representing the card's expiration month.
     *
     * @param int $expMonth
     *
     * @return self
     */
    public function setExpMonth(?int $expMonth): self
    {
        $this->expMonth = $expMonth;

        return $this;
    }

    /**
     * Four-digit number representing the card's expiration year.
     *
     * @return int
     */
    public function getExpYear(): ?int
    {
        return $this->expYear;
    }

    /**
     * Four-digit number representing the card's expiration year.
     *
     * @param int $expYear
     *
     * @return self
     */
    public function setExpYear(?int $expYear): self
    {
        $this->expYear = $expYear;

        return $this;
    }

    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.
     *
     * @return string
     */
    public function getFingerprint(): ?string
    {
        return $this->fingerprint;
    }

    /**
     * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example.
     *
     * @param string $fingerprint
     *
     * @return self
     */
    public function setFingerprint(?string $fingerprint): self
    {
        $this->fingerprint = $fingerprint;

        return $this;
    }

    /**
     * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
     *
     * @return string
     */
    public function getFunding(): ?string
    {
        return $this->funding;
    }

    /**
     * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
     *
     * @param string $funding
     *
     * @return self
     */
    public function setFunding(?string $funding): self
    {
        $this->funding = $funding;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * The last four digits of the card.
     *
     * @return string
     */
    public function getLast4(): ?string
    {
        return $this->last4;
    }

    /**
     * The last four digits of the card.
     *
     * @param string $last4
     *
     * @return self
     */
    public function setLast4(?string $last4): self
    {
        $this->last4 = $last4;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * Cardholder name.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Cardholder name.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
     *
     * @return string
     */
    public function getRecipient(): ?string
    {
        return $this->recipient;
    }

    /**
     * The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
     *
     * @param string $recipient
     *
     * @return self
     */
    public function setRecipient(?string $recipient): self
    {
        $this->recipient = $recipient;

        return $this;
    }

    /**
     * If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`.
     *
     * @return string
     */
    public function getTokenizationMethod(): ?string
    {
        return $this->tokenizationMethod;
    }

    /**
     * If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`.
     *
     * @param string $tokenizationMethod
     *
     * @return self
     */
    public function setTokenizationMethod(?string $tokenizationMethod): self
    {
        $this->tokenizationMethod = $tokenizationMethod;

        return $this;
    }
}
