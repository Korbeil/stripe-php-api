<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Subscription
{
    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
     *
     * @var float
     */
    protected $applicationFeePercent;
    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @var string
     */
    protected $billing;
    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     *
     * @var int
     */
    protected $billingCycleAnchor;
    /**
     * @var SubscriptionBillingThresholds
     */
    protected $billingThresholds;
    /**
     * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     *
     * @var bool
     */
    protected $cancelAtPeriodEnd;
    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     *
     * @var int
     */
    protected $canceledAt;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     *
     * @var int
     */
    protected $currentPeriodEnd;
    /**
     * Start of the current period that the subscription has been invoiced for.
     *
     * @var int
     */
    protected $currentPeriodStart;
    /**
     * ID of the customer who owns the subscription.
     *
     * @var string
     */
    protected $customer;
    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
     *
     * @var int
     */
    protected $daysUntilDue;
    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.
     *
     * @var string
     */
    protected $defaultSource;
    /**
     * @var Discount
     */
    protected $discount;
    /**
     * If the subscription has ended, the date the subscription ended.
     *
     * @var int
     */
    protected $endedAt;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * List of subscription items, each with an attached plan.
     *
     * @var SubscriptionItems
     */
    protected $items;
    /**
     * The most recent invoice this subscription has generated.
     *
     * @var string
     */
    protected $latestInvoice;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var Plan
     */
    protected $plan;
    /**
     * The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan.
     *
     * @var int
     */
    protected $quantity;
    /**
     * Date of the last substantial change to this subscription. For example, a change to the items array, or a change of status, will reset this timestamp.
     *
     * @var int
     */
    protected $start;
    /**
     * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.

    For `billing=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.

    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.

    If subscription `billing=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.

    If subscription `billing=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     *
     * @var string
     */
    protected $status;
    /**
     * If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.
     *
     * @var float
     */
    protected $taxPercent;
    /**
     * If the subscription has a trial, the end of that trial.
     *
     * @var int
     */
    protected $trialEnd;
    /**
     * If the subscription has a trial, the beginning of that trial.
     *
     * @var int
     */
    protected $trialStart;

    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
     *
     * @return float
     */
    public function getApplicationFeePercent(): ?float
    {
        return $this->applicationFeePercent;
    }

    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
     *
     * @param float $applicationFeePercent
     *
     * @return self
     */
    public function setApplicationFeePercent(?float $applicationFeePercent): self
    {
        $this->applicationFeePercent = $applicationFeePercent;

        return $this;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @return string
     */
    public function getBilling(): ?string
    {
        return $this->billing;
    }

    /**
     * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     *
     * @param string $billing
     *
     * @return self
     */
    public function setBilling(?string $billing): self
    {
        $this->billing = $billing;

        return $this;
    }

    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     *
     * @return int
     */
    public function getBillingCycleAnchor(): ?int
    {
        return $this->billingCycleAnchor;
    }

    /**
     * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
     *
     * @param int $billingCycleAnchor
     *
     * @return self
     */
    public function setBillingCycleAnchor(?int $billingCycleAnchor): self
    {
        $this->billingCycleAnchor = $billingCycleAnchor;

        return $this;
    }

    /**
     * @return SubscriptionBillingThresholds
     */
    public function getBillingThresholds(): ?SubscriptionBillingThresholds
    {
        return $this->billingThresholds;
    }

    /**
     * @param SubscriptionBillingThresholds $billingThresholds
     *
     * @return self
     */
    public function setBillingThresholds(?SubscriptionBillingThresholds $billingThresholds): self
    {
        $this->billingThresholds = $billingThresholds;

        return $this;
    }

    /**
     * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     *
     * @return bool
     */
    public function getCancelAtPeriodEnd(): ?bool
    {
        return $this->cancelAtPeriodEnd;
    }

    /**
     * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
     *
     * @param bool $cancelAtPeriodEnd
     *
     * @return self
     */
    public function setCancelAtPeriodEnd(?bool $cancelAtPeriodEnd): self
    {
        $this->cancelAtPeriodEnd = $cancelAtPeriodEnd;

        return $this;
    }

    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     *
     * @return int
     */
    public function getCanceledAt(): ?int
    {
        return $this->canceledAt;
    }

    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
     *
     * @param int $canceledAt
     *
     * @return self
     */
    public function setCanceledAt(?int $canceledAt): self
    {
        $this->canceledAt = $canceledAt;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     *
     * @return int
     */
    public function getCurrentPeriodEnd(): ?int
    {
        return $this->currentPeriodEnd;
    }

    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     *
     * @param int $currentPeriodEnd
     *
     * @return self
     */
    public function setCurrentPeriodEnd(?int $currentPeriodEnd): self
    {
        $this->currentPeriodEnd = $currentPeriodEnd;

        return $this;
    }

    /**
     * Start of the current period that the subscription has been invoiced for.
     *
     * @return int
     */
    public function getCurrentPeriodStart(): ?int
    {
        return $this->currentPeriodStart;
    }

    /**
     * Start of the current period that the subscription has been invoiced for.
     *
     * @param int $currentPeriodStart
     *
     * @return self
     */
    public function setCurrentPeriodStart(?int $currentPeriodStart): self
    {
        $this->currentPeriodStart = $currentPeriodStart;

        return $this;
    }

    /**
     * ID of the customer who owns the subscription.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * ID of the customer who owns the subscription.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
     *
     * @return int
     */
    public function getDaysUntilDue(): ?int
    {
        return $this->daysUntilDue;
    }

    /**
     * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `billing=charge_automatically`.
     *
     * @param int $daysUntilDue
     *
     * @return self
     */
    public function setDaysUntilDue(?int $daysUntilDue): self
    {
        $this->daysUntilDue = $daysUntilDue;

        return $this;
    }

    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.
     *
     * @return string
     */
    public function getDefaultSource(): ?string
    {
        return $this->defaultSource;
    }

    /**
     * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source.
     *
     * @param string $defaultSource
     *
     * @return self
     */
    public function setDefaultSource(?string $defaultSource): self
    {
        $this->defaultSource = $defaultSource;

        return $this;
    }

    /**
     * @return Discount
     */
    public function getDiscount(): ?Discount
    {
        return $this->discount;
    }

    /**
     * @param Discount $discount
     *
     * @return self
     */
    public function setDiscount(?Discount $discount): self
    {
        $this->discount = $discount;

        return $this;
    }

    /**
     * If the subscription has ended, the date the subscription ended.
     *
     * @return int
     */
    public function getEndedAt(): ?int
    {
        return $this->endedAt;
    }

    /**
     * If the subscription has ended, the date the subscription ended.
     *
     * @param int $endedAt
     *
     * @return self
     */
    public function setEndedAt(?int $endedAt): self
    {
        $this->endedAt = $endedAt;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * List of subscription items, each with an attached plan.
     *
     * @return SubscriptionItems
     */
    public function getItems(): ?SubscriptionItems
    {
        return $this->items;
    }

    /**
     * List of subscription items, each with an attached plan.
     *
     * @param SubscriptionItems $items
     *
     * @return self
     */
    public function setItems(?SubscriptionItems $items): self
    {
        $this->items = $items;

        return $this;
    }

    /**
     * The most recent invoice this subscription has generated.
     *
     * @return string
     */
    public function getLatestInvoice(): ?string
    {
        return $this->latestInvoice;
    }

    /**
     * The most recent invoice this subscription has generated.
     *
     * @param string $latestInvoice
     *
     * @return self
     */
    public function setLatestInvoice(?string $latestInvoice): self
    {
        $this->latestInvoice = $latestInvoice;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return Plan
     */
    public function getPlan(): ?Plan
    {
        return $this->plan;
    }

    /**
     * @param Plan $plan
     *
     * @return self
     */
    public function setPlan(?Plan $plan): self
    {
        $this->plan = $plan;

        return $this;
    }

    /**
     * The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan.
     *
     * @return int
     */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
     * The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan.
     *
     * @param int $quantity
     *
     * @return self
     */
    public function setQuantity(?int $quantity): self
    {
        $this->quantity = $quantity;

        return $this;
    }

    /**
     * Date of the last substantial change to this subscription. For example, a change to the items array, or a change of status, will reset this timestamp.
     *
     * @return int
     */
    public function getStart(): ?int
    {
        return $this->start;
    }

    /**
     * Date of the last substantial change to this subscription. For example, a change to the items array, or a change of status, will reset this timestamp.
     *
     * @param int $start
     *
     * @return self
     */
    public function setStart(?int $start): self
    {
        $this->start = $start;

        return $this;
    }

    /**
     * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.

    For `billing=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.

    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.

    If subscription `billing=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.

    If subscription `billing=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.

    For `billing=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.

    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.

    If subscription `billing=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.

    If subscription `billing=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.
     *
     * @return float
     */
    public function getTaxPercent(): ?float
    {
        return $this->taxPercent;
    }

    /**
     * If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.
     *
     * @param float $taxPercent
     *
     * @return self
     */
    public function setTaxPercent(?float $taxPercent): self
    {
        $this->taxPercent = $taxPercent;

        return $this;
    }

    /**
     * If the subscription has a trial, the end of that trial.
     *
     * @return int
     */
    public function getTrialEnd(): ?int
    {
        return $this->trialEnd;
    }

    /**
     * If the subscription has a trial, the end of that trial.
     *
     * @param int $trialEnd
     *
     * @return self
     */
    public function setTrialEnd(?int $trialEnd): self
    {
        $this->trialEnd = $trialEnd;

        return $this;
    }

    /**
     * If the subscription has a trial, the beginning of that trial.
     *
     * @return int
     */
    public function getTrialStart(): ?int
    {
        return $this->trialStart;
    }

    /**
     * If the subscription has a trial, the beginning of that trial.
     *
     * @param int $trialStart
     *
     * @return self
     */
    public function setTrialStart(?int $trialStart): self
    {
        $this->trialStart = $trialStart;

        return $this;
    }
}
