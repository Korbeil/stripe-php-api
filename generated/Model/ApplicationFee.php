<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class ApplicationFee
{
    /**
     * ID of the Stripe account this fee was taken from.
     *
     * @var string
     */
    protected $account;
    /**
     * Amount earned, in %s.
     *
     * @var int
     */
    protected $amount;
    /**
     * Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued).
     *
     * @var int
     */
    protected $amountRefunded;
    /**
     * ID of the Connect application that earned the fee.
     *
     * @var string
     */
    protected $application;
    /**
     * Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
     *
     * @var string
     */
    protected $balanceTransaction;
    /**
     * ID of the charge that the application fee was taken from.
     *
     * @var string
     */
    protected $charge;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
     *
     * @var string
     */
    protected $originatingTransaction;
    /**
     * Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
     *
     * @var bool
     */
    protected $refunded;
    /**
     * A list of refunds that have been applied to the fee.
     *
     * @var ApplicationFeeRefunds
     */
    protected $refunds;

    /**
     * ID of the Stripe account this fee was taken from.
     *
     * @return string
     */
    public function getAccount(): ?string
    {
        return $this->account;
    }

    /**
     * ID of the Stripe account this fee was taken from.
     *
     * @param string $account
     *
     * @return self
     */
    public function setAccount(?string $account): self
    {
        $this->account = $account;

        return $this;
    }

    /**
     * Amount earned, in %s.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Amount earned, in %s.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued).
     *
     * @return int
     */
    public function getAmountRefunded(): ?int
    {
        return $this->amountRefunded;
    }

    /**
     * Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued).
     *
     * @param int $amountRefunded
     *
     * @return self
     */
    public function setAmountRefunded(?int $amountRefunded): self
    {
        $this->amountRefunded = $amountRefunded;

        return $this;
    }

    /**
     * ID of the Connect application that earned the fee.
     *
     * @return string
     */
    public function getApplication(): ?string
    {
        return $this->application;
    }

    /**
     * ID of the Connect application that earned the fee.
     *
     * @param string $application
     *
     * @return self
     */
    public function setApplication(?string $application): self
    {
        $this->application = $application;

        return $this;
    }

    /**
     * Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
     *
     * @return string
     */
    public function getBalanceTransaction(): ?string
    {
        return $this->balanceTransaction;
    }

    /**
     * Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
     *
     * @param string $balanceTransaction
     *
     * @return self
     */
    public function setBalanceTransaction(?string $balanceTransaction): self
    {
        $this->balanceTransaction = $balanceTransaction;

        return $this;
    }

    /**
     * ID of the charge that the application fee was taken from.
     *
     * @return string
     */
    public function getCharge(): ?string
    {
        return $this->charge;
    }

    /**
     * ID of the charge that the application fee was taken from.
     *
     * @param string $charge
     *
     * @return self
     */
    public function setCharge(?string $charge): self
    {
        $this->charge = $charge;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
     *
     * @return string
     */
    public function getOriginatingTransaction(): ?string
    {
        return $this->originatingTransaction;
    }

    /**
     * ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
     *
     * @param string $originatingTransaction
     *
     * @return self
     */
    public function setOriginatingTransaction(?string $originatingTransaction): self
    {
        $this->originatingTransaction = $originatingTransaction;

        return $this;
    }

    /**
     * Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
     *
     * @return bool
     */
    public function getRefunded(): ?bool
    {
        return $this->refunded;
    }

    /**
     * Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
     *
     * @param bool $refunded
     *
     * @return self
     */
    public function setRefunded(?bool $refunded): self
    {
        $this->refunded = $refunded;

        return $this;
    }

    /**
     * A list of refunds that have been applied to the fee.
     *
     * @return ApplicationFeeRefunds
     */
    public function getRefunds(): ?ApplicationFeeRefunds
    {
        return $this->refunds;
    }

    /**
     * A list of refunds that have been applied to the fee.
     *
     * @param ApplicationFeeRefunds $refunds
     *
     * @return self
     */
    public function setRefunds(?ApplicationFeeRefunds $refunds): self
    {
        $this->refunds = $refunds;

        return $this;
    }
}
