<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class Source
{
    /**
     * @var SourceTypeAchCreditTransfer
     */
    protected $achCreditTransfer;
    /**
     * @var SourceTypeAchDebit
     */
    protected $achDebit;
    /**
     * @var SourceTypeAlipay
     */
    protected $alipay;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @var int
     */
    protected $amount;
    /**
     * @var SourceTypeBancontact
     */
    protected $bancontact;
    /**
     * @var SourceTypeCard
     */
    protected $card;
    /**
     * @var SourceTypeCardPresent
     */
    protected $cardPresent;
    /**
     * The client secret of the source. Used for client-side retrieval using a publishable key.
     *
     * @var string
     */
    protected $clientSecret;
    /**
     * @var SourceCodeVerificationFlow
     */
    protected $codeVerification;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @var string
     */
    protected $currency;
    /**
     * The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
     *
     * @var string
     */
    protected $customer;
    /**
     * @var SourceTypeEps
     */
    protected $eps;
    /**
     * The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
     *
     * @var string
     */
    protected $flow;
    /**
     * @var SourceTypeGiropay
     */
    protected $giropay;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * @var SourceTypeIdeal
     */
    protected $ideal;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * @var SourceTypeMultibanco
     */
    protected $multibanco;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * @var SourceOwner
     */
    protected $owner;
    /**
     * @var SourceTypeP24
     */
    protected $p24;
    /**
     * @var SourceTypePaperCheck
     */
    protected $paperCheck;
    /**
     * @var SourceReceiverFlow
     */
    protected $receiver;
    /**
     * @var SourceRedirectFlow
     */
    protected $redirect;
    /**
     * @var SourceTypeSepaCreditTransfer
     */
    protected $sepaCreditTransfer;
    /**
     * @var SourceTypeSepaDebit
     */
    protected $sepaDebit;
    /**
     * @var SourceTypeSofort
     */
    protected $sofort;
    /**
     * Extra information about a source. This will appear on your customer's statement every time you charge the source.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
     *
     * @var string
     */
    protected $status;
    /**
     * @var SourceTypeThreeDSecure
     */
    protected $threeDSecure;
    /**
     * The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `p24`, `paper_check`, `sepa_credit_transfer`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
     *
     * @var string
     */
    protected $type;
    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @var string
     */
    protected $usage;
    /**
     * @var SourceTypeWechat
     */
    protected $wechat;

    /**
     * @return SourceTypeAchCreditTransfer
     */
    public function getAchCreditTransfer(): ?SourceTypeAchCreditTransfer
    {
        return $this->achCreditTransfer;
    }

    /**
     * @param SourceTypeAchCreditTransfer $achCreditTransfer
     *
     * @return self
     */
    public function setAchCreditTransfer(?SourceTypeAchCreditTransfer $achCreditTransfer): self
    {
        $this->achCreditTransfer = $achCreditTransfer;

        return $this;
    }

    /**
     * @return SourceTypeAchDebit
     */
    public function getAchDebit(): ?SourceTypeAchDebit
    {
        return $this->achDebit;
    }

    /**
     * @param SourceTypeAchDebit $achDebit
     *
     * @return self
     */
    public function setAchDebit(?SourceTypeAchDebit $achDebit): self
    {
        $this->achDebit = $achDebit;

        return $this;
    }

    /**
     * @return SourceTypeAlipay
     */
    public function getAlipay(): ?SourceTypeAlipay
    {
        return $this->alipay;
    }

    /**
     * @param SourceTypeAlipay $alipay
     *
     * @return self
     */
    public function setAlipay(?SourceTypeAlipay $alipay): self
    {
        $this->alipay = $alipay;

        return $this;
    }

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * @return SourceTypeBancontact
     */
    public function getBancontact(): ?SourceTypeBancontact
    {
        return $this->bancontact;
    }

    /**
     * @param SourceTypeBancontact $bancontact
     *
     * @return self
     */
    public function setBancontact(?SourceTypeBancontact $bancontact): self
    {
        $this->bancontact = $bancontact;

        return $this;
    }

    /**
     * @return SourceTypeCard
     */
    public function getCard(): ?SourceTypeCard
    {
        return $this->card;
    }

    /**
     * @param SourceTypeCard $card
     *
     * @return self
     */
    public function setCard(?SourceTypeCard $card): self
    {
        $this->card = $card;

        return $this;
    }

    /**
     * @return SourceTypeCardPresent
     */
    public function getCardPresent(): ?SourceTypeCardPresent
    {
        return $this->cardPresent;
    }

    /**
     * @param SourceTypeCardPresent $cardPresent
     *
     * @return self
     */
    public function setCardPresent(?SourceTypeCardPresent $cardPresent): self
    {
        $this->cardPresent = $cardPresent;

        return $this;
    }

    /**
     * The client secret of the source. Used for client-side retrieval using a publishable key.
     *
     * @return string
     */
    public function getClientSecret(): ?string
    {
        return $this->clientSecret;
    }

    /**
     * The client secret of the source. Used for client-side retrieval using a publishable key.
     *
     * @param string $clientSecret
     *
     * @return self
     */
    public function setClientSecret(?string $clientSecret): self
    {
        $this->clientSecret = $clientSecret;

        return $this;
    }

    /**
     * @return SourceCodeVerificationFlow
     */
    public function getCodeVerification(): ?SourceCodeVerificationFlow
    {
        return $this->codeVerification;
    }

    /**
     * @param SourceCodeVerificationFlow $codeVerification
     *
     * @return self
     */
    public function setCodeVerification(?SourceCodeVerificationFlow $codeVerification): self
    {
        $this->codeVerification = $codeVerification;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * @return SourceTypeEps
     */
    public function getEps(): ?SourceTypeEps
    {
        return $this->eps;
    }

    /**
     * @param SourceTypeEps $eps
     *
     * @return self
     */
    public function setEps(?SourceTypeEps $eps): self
    {
        $this->eps = $eps;

        return $this;
    }

    /**
     * The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
     *
     * @return string
     */
    public function getFlow(): ?string
    {
        return $this->flow;
    }

    /**
     * The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
     *
     * @param string $flow
     *
     * @return self
     */
    public function setFlow(?string $flow): self
    {
        $this->flow = $flow;

        return $this;
    }

    /**
     * @return SourceTypeGiropay
     */
    public function getGiropay(): ?SourceTypeGiropay
    {
        return $this->giropay;
    }

    /**
     * @param SourceTypeGiropay $giropay
     *
     * @return self
     */
    public function setGiropay(?SourceTypeGiropay $giropay): self
    {
        $this->giropay = $giropay;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * @return SourceTypeIdeal
     */
    public function getIdeal(): ?SourceTypeIdeal
    {
        return $this->ideal;
    }

    /**
     * @param SourceTypeIdeal $ideal
     *
     * @return self
     */
    public function setIdeal(?SourceTypeIdeal $ideal): self
    {
        $this->ideal = $ideal;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * @return SourceTypeMultibanco
     */
    public function getMultibanco(): ?SourceTypeMultibanco
    {
        return $this->multibanco;
    }

    /**
     * @param SourceTypeMultibanco $multibanco
     *
     * @return self
     */
    public function setMultibanco(?SourceTypeMultibanco $multibanco): self
    {
        $this->multibanco = $multibanco;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * @return SourceOwner
     */
    public function getOwner(): ?SourceOwner
    {
        return $this->owner;
    }

    /**
     * @param SourceOwner $owner
     *
     * @return self
     */
    public function setOwner(?SourceOwner $owner): self
    {
        $this->owner = $owner;

        return $this;
    }

    /**
     * @return SourceTypeP24
     */
    public function getP24(): ?SourceTypeP24
    {
        return $this->p24;
    }

    /**
     * @param SourceTypeP24 $p24
     *
     * @return self
     */
    public function setP24(?SourceTypeP24 $p24): self
    {
        $this->p24 = $p24;

        return $this;
    }

    /**
     * @return SourceTypePaperCheck
     */
    public function getPaperCheck(): ?SourceTypePaperCheck
    {
        return $this->paperCheck;
    }

    /**
     * @param SourceTypePaperCheck $paperCheck
     *
     * @return self
     */
    public function setPaperCheck(?SourceTypePaperCheck $paperCheck): self
    {
        $this->paperCheck = $paperCheck;

        return $this;
    }

    /**
     * @return SourceReceiverFlow
     */
    public function getReceiver(): ?SourceReceiverFlow
    {
        return $this->receiver;
    }

    /**
     * @param SourceReceiverFlow $receiver
     *
     * @return self
     */
    public function setReceiver(?SourceReceiverFlow $receiver): self
    {
        $this->receiver = $receiver;

        return $this;
    }

    /**
     * @return SourceRedirectFlow
     */
    public function getRedirect(): ?SourceRedirectFlow
    {
        return $this->redirect;
    }

    /**
     * @param SourceRedirectFlow $redirect
     *
     * @return self
     */
    public function setRedirect(?SourceRedirectFlow $redirect): self
    {
        $this->redirect = $redirect;

        return $this;
    }

    /**
     * @return SourceTypeSepaCreditTransfer
     */
    public function getSepaCreditTransfer(): ?SourceTypeSepaCreditTransfer
    {
        return $this->sepaCreditTransfer;
    }

    /**
     * @param SourceTypeSepaCreditTransfer $sepaCreditTransfer
     *
     * @return self
     */
    public function setSepaCreditTransfer(?SourceTypeSepaCreditTransfer $sepaCreditTransfer): self
    {
        $this->sepaCreditTransfer = $sepaCreditTransfer;

        return $this;
    }

    /**
     * @return SourceTypeSepaDebit
     */
    public function getSepaDebit(): ?SourceTypeSepaDebit
    {
        return $this->sepaDebit;
    }

    /**
     * @param SourceTypeSepaDebit $sepaDebit
     *
     * @return self
     */
    public function setSepaDebit(?SourceTypeSepaDebit $sepaDebit): self
    {
        $this->sepaDebit = $sepaDebit;

        return $this;
    }

    /**
     * @return SourceTypeSofort
     */
    public function getSofort(): ?SourceTypeSofort
    {
        return $this->sofort;
    }

    /**
     * @param SourceTypeSofort $sofort
     *
     * @return self
     */
    public function setSofort(?SourceTypeSofort $sofort): self
    {
        $this->sofort = $sofort;

        return $this;
    }

    /**
     * Extra information about a source. This will appear on your customer's statement every time you charge the source.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Extra information about a source. This will appear on your customer's statement every time you charge the source.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @return SourceTypeThreeDSecure
     */
    public function getThreeDSecure(): ?SourceTypeThreeDSecure
    {
        return $this->threeDSecure;
    }

    /**
     * @param SourceTypeThreeDSecure $threeDSecure
     *
     * @return self
     */
    public function setThreeDSecure(?SourceTypeThreeDSecure $threeDSecure): self
    {
        $this->threeDSecure = $threeDSecure;

        return $this;
    }

    /**
     * The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `p24`, `paper_check`, `sepa_credit_transfer`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `p24`, `paper_check`, `sepa_credit_transfer`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @return string
     */
    public function getUsage(): ?string
    {
        return $this->usage;
    }

    /**
     * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
     *
     * @param string $usage
     *
     * @return self
     */
    public function setUsage(?string $usage): self
    {
        $this->usage = $usage;

        return $this;
    }

    /**
     * @return SourceTypeWechat
     */
    public function getWechat(): ?SourceTypeWechat
    {
        return $this->wechat;
    }

    /**
     * @param SourceTypeWechat $wechat
     *
     * @return self
     */
    public function setWechat(?SourceTypeWechat $wechat): self
    {
        $this->wechat = $wechat;

        return $this;
    }
}
