<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class CheckoutSession
{
    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @var string
     */
    protected $cancelUrl;
    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @var string
     */
    protected $clientReferenceId;
    /**
     * The ID of the customer created.
     *
     * @var string
     */
    protected $customer;
    /**
     * The email address used to create the customer object.
     *
     * @var string
     */
    protected $customerEmail;
    /**
     * The line items, plans, or SKUs that were purchased by the customer.
     *
     * @var PaymentPagesCheckoutSessionCheckoutSessionResourceCustomDisplayItem[]
     */
    protected $displayItems;
    /**
     * The token used to pass to `redirectToCheckout` in Stripe.js.
     *
     * @var string
     */
    protected $id;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
     *
     * @var string
     */
    protected $locale;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The ID of the PaymentIntent created if SKUs or line items were provided.
     *
     * @var string
     */
    protected $paymentIntent;
    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @var string[]
     */
    protected $paymentMethodTypes;
    /**
     * The ID of the subscription created if one or more plans were provided.
     *
     * @var string
     */
    protected $subscription;
    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @var string
     */
    protected $successUrl;

    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @return string
     */
    public function getCancelUrl(): ?string
    {
        return $this->cancelUrl;
    }

    /**
     * The URL the customer will be directed to if they decide to go back to your website.
     *
     * @param string $cancelUrl
     *
     * @return self
     */
    public function setCancelUrl(?string $cancelUrl): self
    {
        $this->cancelUrl = $cancelUrl;

        return $this;
    }

    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @return string
     */
    public function getClientReferenceId(): ?string
    {
        return $this->clientReferenceId;
    }

    /**
     * A unique string to reference the Checkout Session. This can be a.
    customer ID, a cart ID, or similar. It is included in the
    `checkout_beta.session_succeeded` webhook and can be used to fulfill the
    purchase.
     *
     * @param string $clientReferenceId
     *
     * @return self
     */
    public function setClientReferenceId(?string $clientReferenceId): self
    {
        $this->clientReferenceId = $clientReferenceId;

        return $this;
    }

    /**
     * The ID of the customer created.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * The ID of the customer created.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * The email address used to create the customer object.
     *
     * @return string
     */
    public function getCustomerEmail(): ?string
    {
        return $this->customerEmail;
    }

    /**
     * The email address used to create the customer object.
     *
     * @param string $customerEmail
     *
     * @return self
     */
    public function setCustomerEmail(?string $customerEmail): self
    {
        $this->customerEmail = $customerEmail;

        return $this;
    }

    /**
     * The line items, plans, or SKUs that were purchased by the customer.
     *
     * @return PaymentPagesCheckoutSessionCheckoutSessionResourceCustomDisplayItem[]
     */
    public function getDisplayItems(): ?array
    {
        return $this->displayItems;
    }

    /**
     * The line items, plans, or SKUs that were purchased by the customer.
     *
     * @param PaymentPagesCheckoutSessionCheckoutSessionResourceCustomDisplayItem[] $displayItems
     *
     * @return self
     */
    public function setDisplayItems(?array $displayItems): self
    {
        $this->displayItems = $displayItems;

        return $this;
    }

    /**
     * The token used to pass to `redirectToCheckout` in Stripe.js.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * The token used to pass to `redirectToCheckout` in Stripe.js.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
     *
     * @return string
     */
    public function getLocale(): ?string
    {
        return $this->locale;
    }

    /**
     * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
     *
     * @param string $locale
     *
     * @return self
     */
    public function setLocale(?string $locale): self
    {
        $this->locale = $locale;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The ID of the PaymentIntent created if SKUs or line items were provided.
     *
     * @return string
     */
    public function getPaymentIntent(): ?string
    {
        return $this->paymentIntent;
    }

    /**
     * The ID of the PaymentIntent created if SKUs or line items were provided.
     *
     * @param string $paymentIntent
     *
     * @return self
     */
    public function setPaymentIntent(?string $paymentIntent): self
    {
        $this->paymentIntent = $paymentIntent;

        return $this;
    }

    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @return string[]
     */
    public function getPaymentMethodTypes(): ?array
    {
        return $this->paymentMethodTypes;
    }

    /**
     * The list of payment method types (e.g. card) that this Checkout Session is allowed to use.
     *
     * @param string[] $paymentMethodTypes
     *
     * @return self
     */
    public function setPaymentMethodTypes(?array $paymentMethodTypes): self
    {
        $this->paymentMethodTypes = $paymentMethodTypes;

        return $this;
    }

    /**
     * The ID of the subscription created if one or more plans were provided.
     *
     * @return string
     */
    public function getSubscription(): ?string
    {
        return $this->subscription;
    }

    /**
     * The ID of the subscription created if one or more plans were provided.
     *
     * @param string $subscription
     *
     * @return self
     */
    public function setSubscription(?string $subscription): self
    {
        $this->subscription = $subscription;

        return $this;
    }

    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @return string
     */
    public function getSuccessUrl(): ?string
    {
        return $this->successUrl;
    }

    /**
     * The URL the customer will be directed to after a successful payment.
     *
     * @param string $successUrl
     *
     * @return self
     */
    public function setSuccessUrl(?string $successUrl): self
    {
        $this->successUrl = $successUrl;

        return $this;
    }
}
