<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class ReportingReportType
{
    /**
     * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $dataAvailableEnd;
    /**
     * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $dataAvailableStart;
    /**
     * List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.).
     *
     * @var string[]
     */
    protected $defaultColumns;
    /**
     * The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
     *
     * @var string
     */
    protected $id;
    /**
     * Human-readable name of the Report Type.
     *
     * @var string
     */
    protected $name;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $updated;
    /**
     * Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
     *
     * @var int
     */
    protected $version;

    /**
     * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getDataAvailableEnd(): ?int
    {
        return $this->dataAvailableEnd;
    }

    /**
     * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @param int $dataAvailableEnd
     *
     * @return self
     */
    public function setDataAvailableEnd(?int $dataAvailableEnd): self
    {
        $this->dataAvailableEnd = $dataAvailableEnd;

        return $this;
    }

    /**
     * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getDataAvailableStart(): ?int
    {
        return $this->dataAvailableStart;
    }

    /**
     * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
     *
     * @param int $dataAvailableStart
     *
     * @return self
     */
    public function setDataAvailableStart(?int $dataAvailableStart): self
    {
        $this->dataAvailableStart = $dataAvailableStart;

        return $this;
    }

    /**
     * List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.).
     *
     * @return string[]
     */
    public function getDefaultColumns(): ?array
    {
        return $this->defaultColumns;
    }

    /**
     * List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.).
     *
     * @param string[] $defaultColumns
     *
     * @return self
     */
    public function setDefaultColumns(?array $defaultColumns): self
    {
        $this->defaultColumns = $defaultColumns;

        return $this;
    }

    /**
     * The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Human-readable name of the Report Type.
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Human-readable name of the Report Type.
     *
     * @param string $name
     *
     * @return self
     */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getUpdated(): ?int
    {
        return $this->updated;
    }

    /**
     * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
     *
     * @param int $updated
     *
     * @return self
     */
    public function setUpdated(?int $updated): self
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
     *
     * @return int
     */
    public function getVersion(): ?int
    {
        return $this->version;
    }

    /**
     * Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
     *
     * @param int $version
     *
     * @return self
     */
    public function setVersion(?int $version): self
    {
        $this->version = $version;

        return $this;
    }
}
