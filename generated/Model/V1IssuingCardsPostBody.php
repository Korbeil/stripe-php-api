<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1IssuingCardsPostBody
{
    /**
     * Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.
     *
     * @var V1IssuingCardsPostBodyAuthorizationControls
     */
    protected $authorizationControls;
    /**
     * The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
     *
     * @var string
     */
    protected $cardholder;
    /**
     * The currency for the card. This currently must be `usd`.
     *
     * @var string
     */
    protected $currency;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * @var mixed
     */
    protected $metadata;
    /**
     * The address where the card will be shipped. This will default to the cardholder's billing address for physical cards.
     *
     * @var V1IssuingCardsPostBodyShipping
     */
    protected $shipping;
    /**
     * Specifies whether to permit authorizations on this card. Possible values are `active` or `inactive`.
     *
     * @var string
     */
    protected $status;
    /**
     * The type of card to issue. Possible values are `physical` or `virtual`.
     *
     * @var string
     */
    protected $type;

    /**
     * Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.
     *
     * @return V1IssuingCardsPostBodyAuthorizationControls
     */
    public function getAuthorizationControls(): ?V1IssuingCardsPostBodyAuthorizationControls
    {
        return $this->authorizationControls;
    }

    /**
     * Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/authorizations) documentation for more details.
     *
     * @param V1IssuingCardsPostBodyAuthorizationControls $authorizationControls
     *
     * @return self
     */
    public function setAuthorizationControls(?V1IssuingCardsPostBodyAuthorizationControls $authorizationControls): self
    {
        $this->authorizationControls = $authorizationControls;

        return $this;
    }

    /**
     * The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
     *
     * @return string
     */
    public function getCardholder(): ?string
    {
        return $this->cardholder;
    }

    /**
     * The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
     *
     * @param string $cardholder
     *
     * @return self
     */
    public function setCardholder(?string $cardholder): self
    {
        $this->cardholder = $cardholder;

        return $this;
    }

    /**
     * The currency for the card. This currently must be `usd`.
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * The currency for the card. This currently must be `usd`.
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The address where the card will be shipped. This will default to the cardholder's billing address for physical cards.
     *
     * @return V1IssuingCardsPostBodyShipping
     */
    public function getShipping(): ?V1IssuingCardsPostBodyShipping
    {
        return $this->shipping;
    }

    /**
     * The address where the card will be shipped. This will default to the cardholder's billing address for physical cards.
     *
     * @param V1IssuingCardsPostBodyShipping $shipping
     *
     * @return self
     */
    public function setShipping(?V1IssuingCardsPostBodyShipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * Specifies whether to permit authorizations on this card. Possible values are `active` or `inactive`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Specifies whether to permit authorizations on this card. Possible values are `active` or `inactive`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * The type of card to issue. Possible values are `physical` or `virtual`.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The type of card to issue. Possible values are `physical` or `virtual`.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
