<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1SubscriptionItemsItemDeleteBody
{
    /**
     * Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`.
     *
     * @var bool
     */
    protected $clearUsage;
    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @var bool
     */
    protected $prorate;
    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @var int
     */
    protected $prorationDate;

    /**
     * Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`.
     *
     * @return bool
     */
    public function getClearUsage(): ?bool
    {
        return $this->clearUsage;
    }

    /**
     * Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`.
     *
     * @param bool $clearUsage
     *
     * @return self
     */
    public function setClearUsage(?bool $clearUsage): self
    {
        $this->clearUsage = $clearUsage;

        return $this;
    }

    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @return bool
     */
    public function getProrate(): ?bool
    {
        return $this->prorate;
    }

    /**
     * Flag indicating whether to [prorate](https://stripe.com/docs/billing/subscriptions/prorations) switching plans during a billing cycle.
     *
     * @param bool $prorate
     *
     * @return self
     */
    public function setProrate(?bool $prorate): self
    {
        $this->prorate = $prorate;

        return $this;
    }

    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @return int
     */
    public function getProrationDate(): ?int
    {
        return $this->prorationDate;
    }

    /**
     * If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](#retrieve_customer_invoice) endpoint.
     *
     * @param int $prorationDate
     *
     * @return self
     */
    public function setProrationDate(?int $prorationDate): self
    {
        $this->prorationDate = $prorationDate;

        return $this;
    }
}
