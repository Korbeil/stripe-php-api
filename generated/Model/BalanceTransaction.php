<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class BalanceTransaction
{
    /**
     * Gross amount of the transaction, in %s.
     *
     * @var int
     */
    protected $amount;
    /**
     * The date the transaction's net funds will become available in the Stripe balance.
     *
     * @var int
     */
    protected $availableOn;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @var string
     */
    protected $description;
    /**
     * @var float
     */
    protected $exchangeRate;
    /**
     * Fees (in %s) paid for this transaction.
     *
     * @var int
     */
    protected $fee;
    /**
     * Detailed breakdown of fees (in %s) paid for this transaction.
     *
     * @var Fee[]
     */
    protected $feeDetails;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * Net amount of the transaction, in %s.
     *
     * @var int
     */
    protected $net;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The Stripe object to which this transaction is related.
     *
     * @var string
     */
    protected $source;
    /**
     * If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
     *
     * @var string
     */
    protected $status;
    /**
     * Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reporting/balance-transaction-types) about balance transaction types and what they represent.
     *
     * @var string
     */
    protected $type;

    /**
     * Gross amount of the transaction, in %s.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Gross amount of the transaction, in %s.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * The date the transaction's net funds will become available in the Stripe balance.
     *
     * @return int
     */
    public function getAvailableOn(): ?int
    {
        return $this->availableOn;
    }

    /**
     * The date the transaction's net funds will become available in the Stripe balance.
     *
     * @param int $availableOn
     *
     * @return self
     */
    public function setAvailableOn(?int $availableOn): self
    {
        $this->availableOn = $availableOn;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * @return float
     */
    public function getExchangeRate(): ?float
    {
        return $this->exchangeRate;
    }

    /**
     * @param float $exchangeRate
     *
     * @return self
     */
    public function setExchangeRate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;

        return $this;
    }

    /**
     * Fees (in %s) paid for this transaction.
     *
     * @return int
     */
    public function getFee(): ?int
    {
        return $this->fee;
    }

    /**
     * Fees (in %s) paid for this transaction.
     *
     * @param int $fee
     *
     * @return self
     */
    public function setFee(?int $fee): self
    {
        $this->fee = $fee;

        return $this;
    }

    /**
     * Detailed breakdown of fees (in %s) paid for this transaction.
     *
     * @return Fee[]
     */
    public function getFeeDetails(): ?array
    {
        return $this->feeDetails;
    }

    /**
     * Detailed breakdown of fees (in %s) paid for this transaction.
     *
     * @param Fee[] $feeDetails
     *
     * @return self
     */
    public function setFeeDetails(?array $feeDetails): self
    {
        $this->feeDetails = $feeDetails;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Net amount of the transaction, in %s.
     *
     * @return int
     */
    public function getNet(): ?int
    {
        return $this->net;
    }

    /**
     * Net amount of the transaction, in %s.
     *
     * @param int $net
     *
     * @return self
     */
    public function setNet(?int $net): self
    {
        $this->net = $net;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The Stripe object to which this transaction is related.
     *
     * @return string
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * The Stripe object to which this transaction is related.
     *
     * @param string $source
     *
     * @return self
     */
    public function setSource(?string $source): self
    {
        $this->source = $source;

        return $this;
    }

    /**
     * If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reporting/balance-transaction-types) about balance transaction types and what they represent.
     *
     * @return string
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reporting/balance-transaction-types) about balance transaction types and what they represent.
     *
     * @param string $type
     *
     * @return self
     */
    public function setType(?string $type): self
    {
        $this->type = $type;

        return $this;
    }
}
