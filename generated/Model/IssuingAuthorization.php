<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class IssuingAuthorization
{
    /**
     * Whether the authorization has been approved.
     *
     * @var bool
     */
    protected $approved;
    /**
     * How the card details were provided. One of `keyed_in`, `swipe`, `chip`, `contactless`, or `online`.
     *
     * @var string
     */
    protected $authorizationMethod;
    /**
     * The amount that has been authorized. This will be `0` when the object is created, and increase after it has been approved.
     *
     * @var int
     */
    protected $authorizedAmount;
    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $authorizedCurrency;
    /**
     * @var BalanceTransaction[]
     */
    protected $balanceTransactions;
    /**
     * @var IssuingCard
     */
    protected $card;
    /**
     * The cardholder to whom this authorization belongs.
     *
     * @var string
     */
    protected $cardholder;
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @var int
     */
    protected $created;
    /**
     * The amount the authorization is expected to be in `held_currency`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be `0` when the object is created, and increase after it has been approved. For multi-currency transactions, `held_amount` can be used to determine the expected exchange rate.
     *
     * @var int
     */
    protected $heldAmount;
    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount). This will always be the card currency.
     *
     * @var string
     */
    protected $heldCurrency;
    /**
     * Unique identifier for the object.
     *
     * @var string
     */
    protected $id;
    /**
     * @var bool
     */
    protected $isHeldAmountControllable;
    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @var bool
     */
    protected $livemode;
    /**
     * @var IssuingAuthorizationMerchantData
     */
    protected $merchantData;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * The amount the user is requesting to be authorized. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @var int
     */
    protected $pendingAuthorizedAmount;
    /**
     * The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @var int
     */
    protected $pendingHeldAmount;
    /**
     * @var IssuingAuthorizationRequest[]
     */
    protected $requestHistory;
    /**
     * One of `pending`, `reversed`, or `closed`.
     *
     * @var string
     */
    protected $status;
    /**
     * @var IssuingTransaction[]
     */
    protected $transactions;
    /**
     * @var IssuingAuthorizationVerificationData
     */
    protected $verificationData;
    /**
     * What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
     *
     * @var string
     */
    protected $walletProvider;

    /**
     * Whether the authorization has been approved.
     *
     * @return bool
     */
    public function getApproved(): ?bool
    {
        return $this->approved;
    }

    /**
     * Whether the authorization has been approved.
     *
     * @param bool $approved
     *
     * @return self
     */
    public function setApproved(?bool $approved): self
    {
        $this->approved = $approved;

        return $this;
    }

    /**
     * How the card details were provided. One of `keyed_in`, `swipe`, `chip`, `contactless`, or `online`.
     *
     * @return string
     */
    public function getAuthorizationMethod(): ?string
    {
        return $this->authorizationMethod;
    }

    /**
     * How the card details were provided. One of `keyed_in`, `swipe`, `chip`, `contactless`, or `online`.
     *
     * @param string $authorizationMethod
     *
     * @return self
     */
    public function setAuthorizationMethod(?string $authorizationMethod): self
    {
        $this->authorizationMethod = $authorizationMethod;

        return $this;
    }

    /**
     * The amount that has been authorized. This will be `0` when the object is created, and increase after it has been approved.
     *
     * @return int
     */
    public function getAuthorizedAmount(): ?int
    {
        return $this->authorizedAmount;
    }

    /**
     * The amount that has been authorized. This will be `0` when the object is created, and increase after it has been approved.
     *
     * @param int $authorizedAmount
     *
     * @return self
     */
    public function setAuthorizedAmount(?int $authorizedAmount): self
    {
        $this->authorizedAmount = $authorizedAmount;

        return $this;
    }

    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getAuthorizedCurrency(): ?string
    {
        return $this->authorizedCurrency;
    }

    /**
     * The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $authorizedCurrency
     *
     * @return self
     */
    public function setAuthorizedCurrency(?string $authorizedCurrency): self
    {
        $this->authorizedCurrency = $authorizedCurrency;

        return $this;
    }

    /**
     * @return BalanceTransaction[]
     */
    public function getBalanceTransactions(): ?array
    {
        return $this->balanceTransactions;
    }

    /**
     * @param BalanceTransaction[] $balanceTransactions
     *
     * @return self
     */
    public function setBalanceTransactions(?array $balanceTransactions): self
    {
        $this->balanceTransactions = $balanceTransactions;

        return $this;
    }

    /**
     * @return IssuingCard
     */
    public function getCard(): ?IssuingCard
    {
        return $this->card;
    }

    /**
     * @param IssuingCard $card
     *
     * @return self
     */
    public function setCard(?IssuingCard $card): self
    {
        $this->card = $card;

        return $this;
    }

    /**
     * The cardholder to whom this authorization belongs.
     *
     * @return string
     */
    public function getCardholder(): ?string
    {
        return $this->cardholder;
    }

    /**
     * The cardholder to whom this authorization belongs.
     *
     * @param string $cardholder
     *
     * @return self
     */
    public function setCardholder(?string $cardholder): self
    {
        $this->cardholder = $cardholder;

        return $this;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @return int
     */
    public function getCreated(): ?int
    {
        return $this->created;
    }

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     *
     * @param int $created
     *
     * @return self
     */
    public function setCreated(?int $created): self
    {
        $this->created = $created;

        return $this;
    }

    /**
     * The amount the authorization is expected to be in `held_currency`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be `0` when the object is created, and increase after it has been approved. For multi-currency transactions, `held_amount` can be used to determine the expected exchange rate.
     *
     * @return int
     */
    public function getHeldAmount(): ?int
    {
        return $this->heldAmount;
    }

    /**
     * The amount the authorization is expected to be in `held_currency`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be `0` when the object is created, and increase after it has been approved. For multi-currency transactions, `held_amount` can be used to determine the expected exchange rate.
     *
     * @param int $heldAmount
     *
     * @return self
     */
    public function setHeldAmount(?int $heldAmount): self
    {
        $this->heldAmount = $heldAmount;

        return $this;
    }

    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount). This will always be the card currency.
     *
     * @return string
     */
    public function getHeldCurrency(): ?string
    {
        return $this->heldCurrency;
    }

    /**
     * The currency of the [held amount](https://stripe.com/docs/api#issuing_authorization_object-held_amount). This will always be the card currency.
     *
     * @param string $heldCurrency
     *
     * @return self
     */
    public function setHeldCurrency(?string $heldCurrency): self
    {
        $this->heldCurrency = $heldCurrency;

        return $this;
    }

    /**
     * Unique identifier for the object.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * @return bool
     */
    public function getIsHeldAmountControllable(): ?bool
    {
        return $this->isHeldAmountControllable;
    }

    /**
     * @param bool $isHeldAmountControllable
     *
     * @return self
     */
    public function setIsHeldAmountControllable(?bool $isHeldAmountControllable): self
    {
        $this->isHeldAmountControllable = $isHeldAmountControllable;

        return $this;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @return bool
     */
    public function getLivemode(): ?bool
    {
        return $this->livemode;
    }

    /**
     * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
     *
     * @param bool $livemode
     *
     * @return self
     */
    public function setLivemode(?bool $livemode): self
    {
        $this->livemode = $livemode;

        return $this;
    }

    /**
     * @return IssuingAuthorizationMerchantData
     */
    public function getMerchantData(): ?IssuingAuthorizationMerchantData
    {
        return $this->merchantData;
    }

    /**
     * @param IssuingAuthorizationMerchantData $merchantData
     *
     * @return self
     */
    public function setMerchantData(?IssuingAuthorizationMerchantData $merchantData): self
    {
        $this->merchantData = $merchantData;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * The amount the user is requesting to be authorized. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @return int
     */
    public function getPendingAuthorizedAmount(): ?int
    {
        return $this->pendingAuthorizedAmount;
    }

    /**
     * The amount the user is requesting to be authorized. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @param int $pendingAuthorizedAmount
     *
     * @return self
     */
    public function setPendingAuthorizedAmount(?int $pendingAuthorizedAmount): self
    {
        $this->pendingAuthorizedAmount = $pendingAuthorizedAmount;

        return $this;
    }

    /**
     * The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @return int
     */
    public function getPendingHeldAmount(): ?int
    {
        return $this->pendingHeldAmount;
    }

    /**
     * The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an `issuing.authorization.request` webhook.
     *
     * @param int $pendingHeldAmount
     *
     * @return self
     */
    public function setPendingHeldAmount(?int $pendingHeldAmount): self
    {
        $this->pendingHeldAmount = $pendingHeldAmount;

        return $this;
    }

    /**
     * @return IssuingAuthorizationRequest[]
     */
    public function getRequestHistory(): ?array
    {
        return $this->requestHistory;
    }

    /**
     * @param IssuingAuthorizationRequest[] $requestHistory
     *
     * @return self
     */
    public function setRequestHistory(?array $requestHistory): self
    {
        $this->requestHistory = $requestHistory;

        return $this;
    }

    /**
     * One of `pending`, `reversed`, or `closed`.
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * One of `pending`, `reversed`, or `closed`.
     *
     * @param string $status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @return IssuingTransaction[]
     */
    public function getTransactions(): ?array
    {
        return $this->transactions;
    }

    /**
     * @param IssuingTransaction[] $transactions
     *
     * @return self
     */
    public function setTransactions(?array $transactions): self
    {
        $this->transactions = $transactions;

        return $this;
    }

    /**
     * @return IssuingAuthorizationVerificationData
     */
    public function getVerificationData(): ?IssuingAuthorizationVerificationData
    {
        return $this->verificationData;
    }

    /**
     * @param IssuingAuthorizationVerificationData $verificationData
     *
     * @return self
     */
    public function setVerificationData(?IssuingAuthorizationVerificationData $verificationData): self
    {
        $this->verificationData = $verificationData;

        return $this;
    }

    /**
     * What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
     *
     * @return string
     */
    public function getWalletProvider(): ?string
    {
        return $this->walletProvider;
    }

    /**
     * What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
     *
     * @param string $walletProvider
     *
     * @return self
     */
    public function setWalletProvider(?string $walletProvider): self
    {
        $this->walletProvider = $walletProvider;

        return $this;
    }
}
