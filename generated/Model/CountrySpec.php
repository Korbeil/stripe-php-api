<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class CountrySpec
{
    /**
     * The default currency for this country. This applies to both payment methods and bank accounts.
     *
     * @var string
     */
    protected $defaultCurrency;
    /**
     * Unique identifier for the object. Represented as the ISO country code for this country.
     *
     * @var string
     */
    protected $id;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @var string
     */
    protected $object;
    /**
     * Currencies that can be accepted in the specific country (for transfers).
     *
     * @var mixed
     */
    protected $supportedBankAccountCurrencies;
    /**
     * Currencies that can be accepted in the specified country (for payments).
     *
     * @var string[]
     */
    protected $supportedPaymentCurrencies;
    /**
     * Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
     *
     * @var string[]
     */
    protected $supportedPaymentMethods;
    /**
     * Countries that can accept transfers from the specified country.
     *
     * @var string[]
     */
    protected $supportedTransferCountries;
    /**
     * @var CountrySpecVerificationFields
     */
    protected $verificationFields;

    /**
     * The default currency for this country. This applies to both payment methods and bank accounts.
     *
     * @return string
     */
    public function getDefaultCurrency(): ?string
    {
        return $this->defaultCurrency;
    }

    /**
     * The default currency for this country. This applies to both payment methods and bank accounts.
     *
     * @param string $defaultCurrency
     *
     * @return self
     */
    public function setDefaultCurrency(?string $defaultCurrency): self
    {
        $this->defaultCurrency = $defaultCurrency;

        return $this;
    }

    /**
     * Unique identifier for the object. Represented as the ISO country code for this country.
     *
     * @return string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Unique identifier for the object. Represented as the ISO country code for this country.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @return string
     */
    public function getObject(): ?string
    {
        return $this->object;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     *
     * @param string $object
     *
     * @return self
     */
    public function setObject(?string $object): self
    {
        $this->object = $object;

        return $this;
    }

    /**
     * Currencies that can be accepted in the specific country (for transfers).
     *
     * @return mixed
     */
    public function getSupportedBankAccountCurrencies()
    {
        return $this->supportedBankAccountCurrencies;
    }

    /**
     * Currencies that can be accepted in the specific country (for transfers).
     *
     * @param mixed $supportedBankAccountCurrencies
     *
     * @return self
     */
    public function setSupportedBankAccountCurrencies($supportedBankAccountCurrencies): self
    {
        $this->supportedBankAccountCurrencies = $supportedBankAccountCurrencies;

        return $this;
    }

    /**
     * Currencies that can be accepted in the specified country (for payments).
     *
     * @return string[]
     */
    public function getSupportedPaymentCurrencies(): ?array
    {
        return $this->supportedPaymentCurrencies;
    }

    /**
     * Currencies that can be accepted in the specified country (for payments).
     *
     * @param string[] $supportedPaymentCurrencies
     *
     * @return self
     */
    public function setSupportedPaymentCurrencies(?array $supportedPaymentCurrencies): self
    {
        $this->supportedPaymentCurrencies = $supportedPaymentCurrencies;

        return $this;
    }

    /**
     * Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
     *
     * @return string[]
     */
    public function getSupportedPaymentMethods(): ?array
    {
        return $this->supportedPaymentMethods;
    }

    /**
     * Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
     *
     * @param string[] $supportedPaymentMethods
     *
     * @return self
     */
    public function setSupportedPaymentMethods(?array $supportedPaymentMethods): self
    {
        $this->supportedPaymentMethods = $supportedPaymentMethods;

        return $this;
    }

    /**
     * Countries that can accept transfers from the specified country.
     *
     * @return string[]
     */
    public function getSupportedTransferCountries(): ?array
    {
        return $this->supportedTransferCountries;
    }

    /**
     * Countries that can accept transfers from the specified country.
     *
     * @param string[] $supportedTransferCountries
     *
     * @return self
     */
    public function setSupportedTransferCountries(?array $supportedTransferCountries): self
    {
        $this->supportedTransferCountries = $supportedTransferCountries;

        return $this;
    }

    /**
     * @return CountrySpecVerificationFields
     */
    public function getVerificationFields(): ?CountrySpecVerificationFields
    {
        return $this->verificationFields;
    }

    /**
     * @param CountrySpecVerificationFields $verificationFields
     *
     * @return self
     */
    public function setVerificationFields(?CountrySpecVerificationFields $verificationFields): self
    {
        $this->verificationFields = $verificationFields;

        return $this;
    }
}
