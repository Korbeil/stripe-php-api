<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api\Model;

class V1PaymentIntentsPostBody
{
    /**
     * Amount intended to be collected by this PaymentIntent.
     *
     * @var int
     */
    protected $amount;
    /**
     * The amount of the application fee (if any) that will be applied to the.
    payment and transferred to the application owner's Stripe account. For
    more information, see the PaymentIntents [Connect usage
    guide](/docs/payments/payment-intents/usage#connect).
     *
     * @var int
     */
    protected $applicationFeeAmount;
    /**
     * Capture method of this PaymentIntent, one of `automatic` or `manual`.
     *
     * @var string
     */
    protected $captureMethod;
    /**
     * Attempt to confirm this PaymentIntent immediately. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. Read the [expanded documentation](https://stripe.com/docs/payments/payment-intents/server-confirmation) to learn more about server-side confirmation.
     *
     * @var bool
     */
    protected $confirm;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @var string
     */
    protected $currency;
    /**
     * ID of the customer this PaymentIntent is for if one exists.
     *
     * @var string
     */
    protected $customer;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @var string
     */
    protected $description;
    /**
     * Specifies which fields in the response should be expanded.
     *
     * @var string[]
     */
    protected $expand;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @var mixed
     */
    protected $metadata;
    /**
     * The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @var string
     */
    protected $onBehalfOf;
    /**
     * ID of the payment method to attach to this PaymentIntent.
     *
     * @var string
     */
    protected $paymentMethod;
    /**
     * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
     *
     * @var string[]
     */
    protected $paymentMethodTypes;
    /**
     * Email address that the receipt for the resulting payment will be sent to.
     *
     * @var string
     */
    protected $receiptEmail;
    /**
     * The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
    If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
    This param can only be used if `confirm=true`.
     *
     * @var string
     */
    protected $returnUrl;
    /**
     * Set to `true`Â to save the PaymentIntent's payment method (either `source` or `payment_method`) to the associated customer. If the payment method is already attached, this parameter does nothing. This parameter defaults to `false` and applies to the payment method passed in the same request or the current payment method attached to the PaymentIntent and must be specified again if a new payment method is added.
     *
     * @var bool
     */
    protected $savePaymentMethod;
    /**
     * Shipping information for this PaymentIntent.
     *
     * @var V1PaymentIntentsPostBodyShipping
     */
    protected $shipping;
    /**
     * ID of the Source object to attach to this PaymentIntent.
     *
     * @var string
     */
    protected $source;
    /**
     * Extra information about a PaymentIntent. This will appear on your customer's statement when this PaymentIntent succeeds in creating a charge.
     *
     * @var string
     */
    protected $statementDescriptor;
    /**
     * The parameters used to automatically create a Transfer when the payment succeeds.
    For more information, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @var V1PaymentIntentsPostBodyTransferData
     */
    protected $transferData;
    /**
     * A string that identifies the resulting payment as part of a group. See the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect) for details.
     *
     * @var string
     */
    protected $transferGroup;

    /**
     * Amount intended to be collected by this PaymentIntent.
     *
     * @return int
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Amount intended to be collected by this PaymentIntent.
     *
     * @param int $amount
     *
     * @return self
     */
    public function setAmount(?int $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * The amount of the application fee (if any) that will be applied to the.
    payment and transferred to the application owner's Stripe account. For
    more information, see the PaymentIntents [Connect usage
    guide](/docs/payments/payment-intents/usage#connect).
     *
     * @return int
     */
    public function getApplicationFeeAmount(): ?int
    {
        return $this->applicationFeeAmount;
    }

    /**
     * The amount of the application fee (if any) that will be applied to the.
    payment and transferred to the application owner's Stripe account. For
    more information, see the PaymentIntents [Connect usage
    guide](/docs/payments/payment-intents/usage#connect).
     *
     * @param int $applicationFeeAmount
     *
     * @return self
     */
    public function setApplicationFeeAmount(?int $applicationFeeAmount): self
    {
        $this->applicationFeeAmount = $applicationFeeAmount;

        return $this;
    }

    /**
     * Capture method of this PaymentIntent, one of `automatic` or `manual`.
     *
     * @return string
     */
    public function getCaptureMethod(): ?string
    {
        return $this->captureMethod;
    }

    /**
     * Capture method of this PaymentIntent, one of `automatic` or `manual`.
     *
     * @param string $captureMethod
     *
     * @return self
     */
    public function setCaptureMethod(?string $captureMethod): self
    {
        $this->captureMethod = $captureMethod;

        return $this;
    }

    /**
     * Attempt to confirm this PaymentIntent immediately. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. Read the [expanded documentation](https://stripe.com/docs/payments/payment-intents/server-confirmation) to learn more about server-side confirmation.
     *
     * @return bool
     */
    public function getConfirm(): ?bool
    {
        return $this->confirm;
    }

    /**
     * Attempt to confirm this PaymentIntent immediately. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. Read the [expanded documentation](https://stripe.com/docs/payments/payment-intents/server-confirmation) to learn more about server-side confirmation.
     *
     * @param bool $confirm
     *
     * @return self
     */
    public function setConfirm(?bool $confirm): self
    {
        $this->confirm = $confirm;

        return $this;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     *
     * @param string $currency
     *
     * @return self
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * ID of the customer this PaymentIntent is for if one exists.
     *
     * @return string
     */
    public function getCustomer(): ?string
    {
        return $this->customer;
    }

    /**
     * ID of the customer this PaymentIntent is for if one exists.
     *
     * @param string $customer
     *
     * @return self
     */
    public function setCustomer(?string $customer): self
    {
        $this->customer = $customer;

        return $this;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     *
     * @param string $description
     *
     * @return self
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @return string[]
     */
    public function getExpand(): ?array
    {
        return $this->expand;
    }

    /**
     * Specifies which fields in the response should be expanded.
     *
     * @param string[] $expand
     *
     * @return self
     */
    public function setExpand(?array $expand): self
    {
        $this->expand = $expand;

        return $this;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @return mixed
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     *
     * @param mixed $metadata
     *
     * @return self
     */
    public function setMetadata($metadata): self
    {
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @return string
     */
    public function getOnBehalfOf(): ?string
    {
        return $this->onBehalfOf;
    }

    /**
     * The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @param string $onBehalfOf
     *
     * @return self
     */
    public function setOnBehalfOf(?string $onBehalfOf): self
    {
        $this->onBehalfOf = $onBehalfOf;

        return $this;
    }

    /**
     * ID of the payment method to attach to this PaymentIntent.
     *
     * @return string
     */
    public function getPaymentMethod(): ?string
    {
        return $this->paymentMethod;
    }

    /**
     * ID of the payment method to attach to this PaymentIntent.
     *
     * @param string $paymentMethod
     *
     * @return self
     */
    public function setPaymentMethod(?string $paymentMethod): self
    {
        $this->paymentMethod = $paymentMethod;

        return $this;
    }

    /**
     * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
     *
     * @return string[]
     */
    public function getPaymentMethodTypes(): ?array
    {
        return $this->paymentMethodTypes;
    }

    /**
     * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
     *
     * @param string[] $paymentMethodTypes
     *
     * @return self
     */
    public function setPaymentMethodTypes(?array $paymentMethodTypes): self
    {
        $this->paymentMethodTypes = $paymentMethodTypes;

        return $this;
    }

    /**
     * Email address that the receipt for the resulting payment will be sent to.
     *
     * @return string
     */
    public function getReceiptEmail(): ?string
    {
        return $this->receiptEmail;
    }

    /**
     * Email address that the receipt for the resulting payment will be sent to.
     *
     * @param string $receiptEmail
     *
     * @return self
     */
    public function setReceiptEmail(?string $receiptEmail): self
    {
        $this->receiptEmail = $receiptEmail;

        return $this;
    }

    /**
     * The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
    If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
    This param can only be used if `confirm=true`.
     *
     * @return string
     */
    public function getReturnUrl(): ?string
    {
        return $this->returnUrl;
    }

    /**
     * The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
    If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
    This param can only be used if `confirm=true`.
     *
     * @param string $returnUrl
     *
     * @return self
     */
    public function setReturnUrl(?string $returnUrl): self
    {
        $this->returnUrl = $returnUrl;

        return $this;
    }

    /**
     * Set to `true`Â to save the PaymentIntent's payment method (either `source` or `payment_method`) to the associated customer. If the payment method is already attached, this parameter does nothing. This parameter defaults to `false` and applies to the payment method passed in the same request or the current payment method attached to the PaymentIntent and must be specified again if a new payment method is added.
     *
     * @return bool
     */
    public function getSavePaymentMethod(): ?bool
    {
        return $this->savePaymentMethod;
    }

    /**
     * Set to `true`Â to save the PaymentIntent's payment method (either `source` or `payment_method`) to the associated customer. If the payment method is already attached, this parameter does nothing. This parameter defaults to `false` and applies to the payment method passed in the same request or the current payment method attached to the PaymentIntent and must be specified again if a new payment method is added.
     *
     * @param bool $savePaymentMethod
     *
     * @return self
     */
    public function setSavePaymentMethod(?bool $savePaymentMethod): self
    {
        $this->savePaymentMethod = $savePaymentMethod;

        return $this;
    }

    /**
     * Shipping information for this PaymentIntent.
     *
     * @return V1PaymentIntentsPostBodyShipping
     */
    public function getShipping(): ?V1PaymentIntentsPostBodyShipping
    {
        return $this->shipping;
    }

    /**
     * Shipping information for this PaymentIntent.
     *
     * @param V1PaymentIntentsPostBodyShipping $shipping
     *
     * @return self
     */
    public function setShipping(?V1PaymentIntentsPostBodyShipping $shipping): self
    {
        $this->shipping = $shipping;

        return $this;
    }

    /**
     * ID of the Source object to attach to this PaymentIntent.
     *
     * @return string
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * ID of the Source object to attach to this PaymentIntent.
     *
     * @param string $source
     *
     * @return self
     */
    public function setSource(?string $source): self
    {
        $this->source = $source;

        return $this;
    }

    /**
     * Extra information about a PaymentIntent. This will appear on your customer's statement when this PaymentIntent succeeds in creating a charge.
     *
     * @return string
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Extra information about a PaymentIntent. This will appear on your customer's statement when this PaymentIntent succeeds in creating a charge.
     *
     * @param string $statementDescriptor
     *
     * @return self
     */
    public function setStatementDescriptor(?string $statementDescriptor): self
    {
        $this->statementDescriptor = $statementDescriptor;

        return $this;
    }

    /**
     * The parameters used to automatically create a Transfer when the payment succeeds.
    For more information, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @return V1PaymentIntentsPostBodyTransferData
     */
    public function getTransferData(): ?V1PaymentIntentsPostBodyTransferData
    {
        return $this->transferData;
    }

    /**
     * The parameters used to automatically create a Transfer when the payment succeeds.
    For more information, see the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect).
     *
     * @param V1PaymentIntentsPostBodyTransferData $transferData
     *
     * @return self
     */
    public function setTransferData(?V1PaymentIntentsPostBodyTransferData $transferData): self
    {
        $this->transferData = $transferData;

        return $this;
    }

    /**
     * A string that identifies the resulting payment as part of a group. See the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect) for details.
     *
     * @return string
     */
    public function getTransferGroup(): ?string
    {
        return $this->transferGroup;
    }

    /**
     * A string that identifies the resulting payment as part of a group. See the PaymentIntents [Connect usage guide](https://stripe.com/docs/payments/payment-intents/usage#connect) for details.
     *
     * @param string $transferGroup
     *
     * @return self
     */
    public function setTransferGroup(?string $transferGroup): self
    {
        $this->transferGroup = $transferGroup;

        return $this;
    }
}
