<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Stripe\Api;

class Client extends \Jane\OpenApiRuntime\Client\Psr7HttplugClient
{
    /**
     * <p>Initiate 3D Secure authentication.</p>.
     *
     * @param \Stripe\Api\Model\V13dSecurePostBody $payload body parameters for the request
     * @param string                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ThreeDSecure|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function post3dSecure(\Stripe\Api\Model\V13dSecurePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\Post3dSecure($payload), $fetch);
    }

    /**
     * <p>Retrieves a 3D Secure object.</p>.
     *
     * @param string $threeDSecure    the identifier of the 3D Secure object to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ThreeDSecure|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function get3dSecureThreeDSecure(string $threeDSecure, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\Get3dSecureThreeDSecure($threeDSecure, $queryParameters), $fetch);
    }

    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may delete Custom accounts you manage.</p>.

    <p>Custom accounts created using test-mode keys can be deleted at any time. Custom accounts created using live-mode keys may only be deleted once all balances are zero.</p>

    <p>If you are looking to close your own account, use the <a href="https://dashboard.stripe.com/account/data">data tab in your account settings</a> instead.</p>
     *
     * @param \Stripe\Api\Model\V1AccountDeleteBody $payload body parameters for the request
     * @param string                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccount(\Stripe\Api\Model\V1AccountDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccount($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an account.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccount(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccount($queryParameters), $fetch);
    }

    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>.

    <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     *
     * @param \Stripe\Api\Model\V1AccountPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccount(\Stripe\Api\Model\V1AccountPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccount($payload), $fetch);
    }

    /**
     * <p>Create an external account for a given account.</p>.
     *
     * @param \Stripe\Api\Model\V1AccountBankAccountsPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountBankAccounts(\Stripe\Api\Model\V1AccountBankAccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountBankAccounts($payload), $fetch);
    }

    /**
     * <p>Delete a specified external account for a given account.</p>.
     *
     * @param string $id    the ID of the external account to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountBankAccountsId(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountBankAccountsId($id), $fetch);
    }

    /**
     * <p>Retrieve a specified external account for a given account.</p>.
     *
     * @param string $id
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountBankAccountsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountBankAccountsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>.
    <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @param string                                            $id      The ID of the external account to update
     * @param \Stripe\Api\Model\V1AccountBankAccountsIdPostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountBankAccountsId(string $id, \Stripe\Api\Model\V1AccountBankAccountsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountBankAccountsId($id, $payload), $fetch);
    }

    /**
     * <p>List external accounts for an account.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountExternalAccountsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountExternalAccounts(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountExternalAccounts($queryParameters), $fetch);
    }

    /**
     * <p>Create an external account for a given account.</p>.
     *
     * @param \Stripe\Api\Model\V1AccountExternalAccountsPostBody $payload body parameters for the request
     * @param string                                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountExternalAccounts(\Stripe\Api\Model\V1AccountExternalAccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountExternalAccounts($payload), $fetch);
    }

    /**
     * <p>Delete a specified external account for a given account.</p>.
     *
     * @param string $id    the ID of the external account to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountExternalAccountsId(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountExternalAccountsId($id), $fetch);
    }

    /**
     * <p>Retrieve a specified external account for a given account.</p>.
     *
     * @param string $id
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountExternalAccountsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountExternalAccountsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>.
    <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @param string                                                $id      The ID of the external account to update
     * @param \Stripe\Api\Model\V1AccountExternalAccountsIdPostBody $payload body parameters for the request
     * @param string                                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountExternalAccountsId(string $id, \Stripe\Api\Model\V1AccountExternalAccountsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountExternalAccountsId($id, $payload), $fetch);
    }

    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>.

    <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @param \Stripe\Api\Model\V1AccountLoginLinksPostBody $payload body parameters for the request
     * @param string                                        $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\LoginLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountLoginLinks(\Stripe\Api\Model\V1AccountLoginLinksPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountLoginLinks($payload), $fetch);
    }

    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>.

    <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @param \Stripe\Api\Model\V1AccountLogoutPutBody $payload body parameters for the request
     * @param string                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\LightAccountLogout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function putAccountLogout(\Stripe\Api\Model\V1AccountLogoutPutBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PutAccountLogout($payload), $fetch);
    }

    /**
     * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $relationship filters on the list of people returned based on the person's relationship to the account's company
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountPeopleGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountPeople(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountPeople($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new person.</p>.
     *
     * @param \Stripe\Api\Model\V1AccountPeoplePostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountPeople(\Stripe\Api\Model\V1AccountPeoplePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountPeople($payload), $fetch);
    }

    /**
     * <p>Deletes an existing person’s relationship to the account’s legal entity.</p>.
     *
     * @param string $person the ID of the person to be deleted
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPerson|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountPeoplePerson(string $person, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountPeoplePerson($person), $fetch);
    }

    /**
     * <p>Retrieves an existing person.</p>.
     *
     * @param string $person          the ID of a person to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountPeoplePerson(string $person, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountPeoplePerson($person, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing person.</p>.
     *
     * @param string                                          $person  the ID of a person to update
     * @param \Stripe\Api\Model\V1AccountPeoplePersonPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountPeoplePerson(string $person, \Stripe\Api\Model\V1AccountPeoplePersonPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountPeoplePerson($person, $payload), $fetch);
    }

    /**
     * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $relationship filters on the list of people returned based on the person's relationship to the account's company
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountPersonsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountPersons(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountPersons($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new person.</p>.
     *
     * @param \Stripe\Api\Model\V1AccountPersonsPostBody $payload body parameters for the request
     * @param string                                     $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountPersons(\Stripe\Api\Model\V1AccountPersonsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountPersons($payload), $fetch);
    }

    /**
     * <p>Deletes an existing person’s relationship to the account’s legal entity.</p>.
     *
     * @param string $person the ID of the person to be deleted
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPerson|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountPersonsPerson(string $person, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountPersonsPerson($person), $fetch);
    }

    /**
     * <p>Retrieves an existing person.</p>.
     *
     * @param string $person          the ID of a person to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountPersonsPerson(string $person, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountPersonsPerson($person, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing person.</p>.
     *
     * @param string                                           $person  the ID of a person to update
     * @param \Stripe\Api\Model\V1AccountPersonsPersonPostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountPersonsPerson(string $person, \Stripe\Api\Model\V1AccountPersonsPersonPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountPersonsPerson($person, $payload), $fetch);
    }

    /**
     * <p>Creates an AccountLink object that returns a Stripe URL that the user can redirect their user to in order to take them through the Hosted Verification flow.</p>.
     *
     * @param \Stripe\Api\Model\V1AccountLinksPostBody $payload body parameters for the request
     * @param string                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\AccountLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountLinks(\Stripe\Api\Model\V1AccountLinksPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountLinks($payload), $fetch);
    }

    /**
     * <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccounts(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccounts($queryParameters), $fetch);
    }

    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
    To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>

    <p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>
    are used to prefill the account application that we ask the account holder to complete.</p>
     *
     * @param \Stripe\Api\Model\V1AccountsPostBody $payload body parameters for the request
     * @param string                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccounts(\Stripe\Api\Model\V1AccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccounts($payload), $fetch);
    }

    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may delete Custom accounts you manage.</p>.

    <p>Custom accounts created using test-mode keys can be deleted at any time. Custom accounts created using live-mode keys may only be deleted once all balances are zero.</p>

    <p>If you are looking to close your own account, use the <a href="https://dashboard.stripe.com/account/data">data tab in your account settings</a> instead.</p>
     *
     * @param string $account The identifier of the account to be deleted. If none is provided, will default to the account of the API key.
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountsAccount(string $account, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountsAccount($account), $fetch);
    }

    /**
     * <p>Retrieves the details of an account.</p>.
     *
     * @param string $account         The identifier of the account to retrieve. If none is provided, the account associated with the API key is returned.
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccount(string $account, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccount($account, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>.

    <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     *
     * @param string                                      $account
     * @param \Stripe\Api\Model\V1AccountsAccountPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccount(string $account, \Stripe\Api\Model\V1AccountsAccountPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccount($account, $payload), $fetch);
    }

    /**
     * <p>Create an external account for a given account.</p>.
     *
     * @param string                                                  $account
     * @param \Stripe\Api\Model\V1AccountsAccountBankAccountsPostBody $payload body parameters for the request
     * @param string                                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountBankAccounts(string $account, \Stripe\Api\Model\V1AccountsAccountBankAccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountBankAccounts($account, $payload), $fetch);
    }

    /**
     * <p>Delete a specified external account for a given account.</p>.
     *
     * @param string $account
     * @param string $id      the ID of the external account to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountsAccountBankAccountsId(string $account, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountsAccountBankAccountsId($account, $id), $fetch);
    }

    /**
     * <p>Retrieve a specified external account for a given account.</p>.
     *
     * @param string $account
     * @param string $id
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountBankAccountsId(string $account, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountBankAccountsId($account, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>.
    <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @param string                                                    $account
     * @param string                                                    $id      The ID of the external account to update
     * @param \Stripe\Api\Model\V1AccountsAccountBankAccountsIdPostBody $payload body parameters for the request
     * @param string                                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountBankAccountsId(string $account, string $id, \Stripe\Api\Model\V1AccountsAccountBankAccountsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountBankAccountsId($account, $id, $payload), $fetch);
    }

    /**
     * <p>List external accounts for an account.</p>.
     *
     * @param string $account
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountsAccountExternalAccountsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountExternalAccounts(string $account, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountExternalAccounts($account, $queryParameters), $fetch);
    }

    /**
     * <p>Create an external account for a given account.</p>.
     *
     * @param string                                                      $account
     * @param \Stripe\Api\Model\V1AccountsAccountExternalAccountsPostBody $payload body parameters for the request
     * @param string                                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountExternalAccounts(string $account, \Stripe\Api\Model\V1AccountsAccountExternalAccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountExternalAccounts($account, $payload), $fetch);
    }

    /**
     * <p>Delete a specified external account for a given account.</p>.
     *
     * @param string $account
     * @param string $id      the ID of the external account to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountsAccountExternalAccountsId(string $account, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountsAccountExternalAccountsId($account, $id), $fetch);
    }

    /**
     * <p>Retrieve a specified external account for a given account.</p>.
     *
     * @param string $account
     * @param string $id
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountExternalAccountsId(string $account, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountExternalAccountsId($account, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>.
    <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     *
     * @param string                                                        $account
     * @param string                                                        $id      The ID of the external account to update
     * @param \Stripe\Api\Model\V1AccountsAccountExternalAccountsIdPostBody $payload body parameters for the request
     * @param string                                                        $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExternalAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountExternalAccountsId(string $account, string $id, \Stripe\Api\Model\V1AccountsAccountExternalAccountsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountExternalAccountsId($account, $id, $payload), $fetch);
    }

    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>.

    <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @param string                                                $account the identifier of the account to create a login link for
     * @param \Stripe\Api\Model\V1AccountsAccountLoginLinksPostBody $payload body parameters for the request
     * @param string                                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\LoginLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountLoginLinks(string $account, \Stripe\Api\Model\V1AccountsAccountLoginLinksPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountLoginLinks($account, $payload), $fetch);
    }

    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>.

    <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     *
     * @param string                                           $account the identifier of the account to log out
     * @param \Stripe\Api\Model\V1AccountsAccountLogoutPutBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\LightAccountLogout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function putAccountsAccountLogout(string $account, \Stripe\Api\Model\V1AccountsAccountLogoutPutBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PutAccountsAccountLogout($account, $payload), $fetch);
    }

    /**
     * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
     *
     * @param string $account
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $relationship filters on the list of people returned based on the person's relationship to the account's company
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountsAccountPeopleGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountPeople(string $account, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountPeople($account, $queryParameters), $fetch);
    }

    /**
     * <p>Creates a new person.</p>.
     *
     * @param string                                            $account
     * @param \Stripe\Api\Model\V1AccountsAccountPeoplePostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountPeople(string $account, \Stripe\Api\Model\V1AccountsAccountPeoplePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountPeople($account, $payload), $fetch);
    }

    /**
     * <p>Deletes an existing person’s relationship to the account’s legal entity.</p>.
     *
     * @param string $account
     * @param string $person  the ID of the person to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPerson|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountsAccountPeoplePerson(string $account, string $person, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountsAccountPeoplePerson($account, $person), $fetch);
    }

    /**
     * <p>Retrieves an existing person.</p>.
     *
     * @param string $account
     * @param string $person          the ID of a person to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountPeoplePerson(string $account, string $person, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountPeoplePerson($account, $person, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing person.</p>.
     *
     * @param string                                                  $account
     * @param string                                                  $person  the ID of a person to update
     * @param \Stripe\Api\Model\V1AccountsAccountPeoplePersonPostBody $payload body parameters for the request
     * @param string                                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountPeoplePerson(string $account, string $person, \Stripe\Api\Model\V1AccountsAccountPeoplePersonPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountPeoplePerson($account, $person, $payload), $fetch);
    }

    /**
     * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>.
     *
     * @param string $account
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $relationship filters on the list of people returned based on the person's relationship to the account's company
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1AccountsAccountPersonsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountPersons(string $account, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountPersons($account, $queryParameters), $fetch);
    }

    /**
     * <p>Creates a new person.</p>.
     *
     * @param string                                             $account
     * @param \Stripe\Api\Model\V1AccountsAccountPersonsPostBody $payload body parameters for the request
     * @param string                                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountPersons(string $account, \Stripe\Api\Model\V1AccountsAccountPersonsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountPersons($account, $payload), $fetch);
    }

    /**
     * <p>Deletes an existing person’s relationship to the account’s legal entity.</p>.
     *
     * @param string $account
     * @param string $person  the ID of the person to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPerson|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteAccountsAccountPersonsPerson(string $account, string $person, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteAccountsAccountPersonsPerson($account, $person), $fetch);
    }

    /**
     * <p>Retrieves an existing person.</p>.
     *
     * @param string $account
     * @param string $person          the ID of a person to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getAccountsAccountPersonsPerson(string $account, string $person, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetAccountsAccountPersonsPerson($account, $person, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing person.</p>.
     *
     * @param string                                                   $account
     * @param string                                                   $person  the ID of a person to update
     * @param \Stripe\Api\Model\V1AccountsAccountPersonsPersonPostBody $payload body parameters for the request
     * @param string                                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Person|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountPersonsPerson(string $account, string $person, \Stripe\Api\Model\V1AccountsAccountPersonsPersonPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountPersonsPerson($account, $person, $payload), $fetch);
    }

    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>.

    <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
     *
     * @param string                                            $account The identifier of the account to reject
     * @param \Stripe\Api\Model\V1AccountsAccountRejectPostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Account|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postAccountsAccountReject(string $account, \Stripe\Api\Model\V1AccountsAccountRejectPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostAccountsAccountReject($account, $payload), $fetch);
    }

    /**
     * <p>List apple pay domains.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $domain_name
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ApplePayDomainsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplePayDomains(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplePayDomains($queryParameters), $fetch);
    }

    /**
     * <p>Create an apple pay domain.</p>.
     *
     * @param \Stripe\Api\Model\V1ApplePayDomainsPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ApplePayDomain|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postApplePayDomains(\Stripe\Api\Model\V1ApplePayDomainsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostApplePayDomains($payload), $fetch);
    }

    /**
     * <p>Delete an apple pay domain.</p>.
     *
     * @param string $domain
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedApplePayDomain|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteApplePayDomainsDomain(string $domain, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteApplePayDomainsDomain($domain), $fetch);
    }

    /**
     * <p>Retrieve an apple pay domain.</p>.
     *
     * @param string $domain
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ApplePayDomain|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplePayDomainsDomain(string $domain, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplePayDomainsDomain($domain, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $charge only return application fees for the charge specified by this charge ID
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ApplicationFeesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplicationFees(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplicationFees($queryParameters), $fetch);
    }

    /**
     * <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>.
     *
     * @param string $fee             ID of the application fee refunded
     * @param string $id              ID of refund to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FeeRefund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplicationFeesFeeRefundsId(string $fee, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplicationFeesFeeRefundsId($fee, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>This request only accepts metadata as an argument.</p>
     *
     * @param string                                                  $fee     ID of the application fee refunded
     * @param string                                                  $id      ID of refund to retrieve
     * @param \Stripe\Api\Model\V1ApplicationFeesFeeRefundsIdPostBody $payload body parameters for the request
     * @param string                                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FeeRefund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postApplicationFeesFeeRefundsId(string $fee, string $id, \Stripe\Api\Model\V1ApplicationFeesFeeRefundsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostApplicationFeesFeeRefundsId($fee, $id, $payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>.
     *
     * @param string $id              the identifier of the fee to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ApplicationFee|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplicationFeesId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplicationFeesId($id, $queryParameters), $fetch);
    }

    /**
     * @param string                                              $id
     * @param \Stripe\Api\Model\V1ApplicationFeesIdRefundPostBody $payload body parameters for the request
     * @param string                                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ApplicationFee|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postApplicationFeesIdRefund(string $id, \Stripe\Api\Model\V1ApplicationFeesIdRefundPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostApplicationFeesIdRefund($id, $payload), $fetch);
    }

    /**
     * <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.
     *
     * @param string $id              the ID of the application fee whose refunds will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ApplicationFeesIdRefundsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getApplicationFeesIdRefunds(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetApplicationFeesIdRefunds($id, $queryParameters), $fetch);
    }

    /**
     * <p>Refunds an application fee that has previously been collected but not yet refunded.
    Funds will be refunded to the Stripe account from which the fee was originally collected.</p>

    <p>You can optionally refund only part of an application fee.
    You can do so multiple times, until the entire fee has been refunded.</p>

    <p>Once entirely refunded, an application fee can’t be refunded again.
    This method will raise an error when called on an already-refunded application fee,
    or when trying to refund more money than is left on an application fee.</p>
     *
     * @param string                                               $id      the identifier of the application fee to be refunded
     * @param \Stripe\Api\Model\V1ApplicationFeesIdRefundsPostBody $payload body parameters for the request
     * @param string                                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FeeRefund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postApplicationFeesIdRefunds(string $id, \Stripe\Api\Model\V1ApplicationFeesIdRefundsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostApplicationFeesIdRefunds($id, $payload), $fetch);
    }

    /**
     * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
    For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
     *
     * @param array $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Balance|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBalance(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBalance($queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $available_on
     *     @var int $created
     *     @var string $currency
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $payout for automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID
     *     @var string $source only returns the original transaction
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1BalanceHistoryGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBalanceHistory(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBalanceHistory($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the balance transaction with the given ID.</p>.
     *
     * @param string $id              The ID of the desired balance transaction, as found on any API object that affects the balance (e.g., a charge or transfer).
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BalanceTransaction|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBalanceHistoryId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBalanceHistoryId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var bool $active filter for active receivers
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var bool $filled filter for filled receivers
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var bool $uncaptured_funds Filter for receivers with uncaptured funds.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1BitcoinReceiversGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBitcoinReceivers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBitcoinReceivers($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the Bitcoin receiver with the given ID.</p>.
     *
     * @param string $id
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BitcoinReceiver|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBitcoinReceiversId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBitcoinReceiversId($id, $queryParameters), $fetch);
    }

    /**
     * <p>List bitcoin transacitons for a given receiver.</p>.
     *
     * @param string $receiver        only return transactions for the receiver specified by this receiver ID
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $customer only return transactions for the customer specified by this customer ID
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1BitcoinReceiversReceiverTransactionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBitcoinReceiversReceiverTransactions(string $receiver, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBitcoinReceiversReceiverTransactions($receiver, $queryParameters), $fetch);
    }

    /**
     * <p>List bitcoin transacitons for a given receiver.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $customer only return transactions for the customer specified by this customer ID
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $receiver only return transactions for the receiver specified by this receiver ID
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1BitcoinTransactionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getBitcoinTransactions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetBitcoinTransactions($queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $customer only return charges for the customer specified by this customer ID
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $source A filter on the list, based on the source of the charge. The value can be a dictionary with the following options:
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $transfer_group Only return charges for this transfer group.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ChargesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCharges(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCharges($queryParameters), $fetch);
    }

    /**
     * <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>.
     *
     * @param \Stripe\Api\Model\V1ChargesPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Charge|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCharges(\Stripe\Api\Model\V1ChargesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCharges($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>.
     *
     * @param string $charge          the identifier of the charge to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Charge|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getChargesCharge(string $charge, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetChargesCharge($charge, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                    $charge
     * @param \Stripe\Api\Model\V1ChargesChargePostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Charge|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesCharge(string $charge, \Stripe\Api\Model\V1ChargesChargePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesCharge($charge, $payload), $fetch);
    }

    /**
     * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>.

    <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
     *
     * @param string                                           $charge
     * @param \Stripe\Api\Model\V1ChargesChargeCapturePostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Charge|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeCapture(string $charge, \Stripe\Api\Model\V1ChargesChargeCapturePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeCapture($charge, $payload), $fetch);
    }

    /**
     * <p>Retrieve a dispute for a specified charge.</p>.
     *
     * @param string $charge
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getChargesChargeDispute(string $charge, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetChargesChargeDispute($charge, $queryParameters), $fetch);
    }

    /**
     * @param string                                           $charge
     * @param \Stripe\Api\Model\V1ChargesChargeDisputePostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeDispute(string $charge, \Stripe\Api\Model\V1ChargesChargeDisputePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeDispute($charge, $payload), $fetch);
    }

    /**
     * @param string                                                $charge
     * @param \Stripe\Api\Model\V1ChargesChargeDisputeClosePostBody $payload body parameters for the request
     * @param string                                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeDisputeClose(string $charge, \Stripe\Api\Model\V1ChargesChargeDisputeClosePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeDisputeClose($charge, $payload), $fetch);
    }

    /**
     * <p>When you create a new refund, you must specify a charge on which to create it.</p>.

    <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
    Funds will be refunded to the credit or debit card that was originally charged.</p>

    <p>You can optionally refund only part of a charge.
    You can do so multiple times, until the entire charge has been refunded.</p>

    <p>Once entirely refunded, a charge can’t be refunded again.
    This method will raise an error when called on an already-refunded charge,
    or when trying to refund more money than is left on a charge.</p>
     *
     * @param string                                          $charge
     * @param \Stripe\Api\Model\V1ChargesChargeRefundPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Charge|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeRefund(string $charge, \Stripe\Api\Model\V1ChargesChargeRefundPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeRefund($charge, $payload), $fetch);
    }

    /**
     * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>.
     *
     * @param string $charge          the ID of the charge whose refunds will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ChargesChargeRefundsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getChargesChargeRefunds(string $charge, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetChargesChargeRefunds($charge, $queryParameters), $fetch);
    }

    /**
     * <p>Create a refund.</p>.
     *
     * @param string                                           $charge
     * @param \Stripe\Api\Model\V1ChargesChargeRefundsPostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeRefunds(string $charge, \Stripe\Api\Model\V1ChargesChargeRefundsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeRefunds($charge, $payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing refund.</p>.
     *
     * @param string $charge
     * @param string $refund
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getChargesChargeRefundsRefund(string $charge, string $refund, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetChargesChargeRefundsRefund($charge, $refund, $queryParameters), $fetch);
    }

    /**
     * <p>Update a specified refund.</p>.
     *
     * @param string                                                 $charge
     * @param string                                                 $refund
     * @param \Stripe\Api\Model\V1ChargesChargeRefundsRefundPostBody $payload body parameters for the request
     * @param string                                                 $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postChargesChargeRefundsRefund(string $charge, string $refund, \Stripe\Api\Model\V1ChargesChargeRefundsRefundPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostChargesChargeRefundsRefund($charge, $refund, $payload), $fetch);
    }

    /**
     * <p>Creates a Session object.</p>.
     *
     * @param \Stripe\Api\Model\V1CheckoutSessionsPostBody $payload body parameters for the request
     * @param string                                       $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\CheckoutSession|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCheckoutSessions(\Stripe\Api\Model\V1CheckoutSessionsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCheckoutSessions($payload), $fetch);
    }

    /**
     * <p>Retrieves a Checkout Session object.</p>.
     *
     * @param string $session         the ID of the Checkout Session
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\CheckoutSession|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCheckoutSessionsSession(string $session, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCheckoutSessionsSession($session, $queryParameters), $fetch);
    }

    /**
     * <p>Lists all Country Spec objects available in the API.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CountrySpecsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCountrySpecs(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCountrySpecs($queryParameters), $fetch);
    }

    /**
     * <p>Returns a Country Spec for a given Country code.</p>.
     *
     * @param string $country         An ISO 3166-1 alpha-2 country code. Available country codes can be listed with the [List Country Specs](https://stripe.com/docs/api#list_country_specs) endpoint.
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\CountrySpec|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCountrySpecsCountry(string $country, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCountrySpecsCountry($country, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your coupons.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CouponsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCoupons(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCoupons($queryParameters), $fetch);
    }

    /**
     * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>.

    <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
     *
     * @param \Stripe\Api\Model\V1CouponsPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Coupon|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCoupons(\Stripe\Api\Model\V1CouponsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCoupons($payload), $fetch);
    }

    /**
     * <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>.
     *
     * @param string $coupon the identifier of the coupon to be deleted
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedCoupon|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCouponsCoupon(string $coupon, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCouponsCoupon($coupon), $fetch);
    }

    /**
     * <p>Retrieves the coupon with the given ID.</p>.
     *
     * @param string $coupon          the ID of the desired coupon
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Coupon|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCouponsCoupon(string $coupon, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCouponsCoupon($coupon, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>.
     *
     * @param string                                    $coupon  the identifier of the coupon to be updated
     * @param \Stripe\Api\Model\V1CouponsCouponPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Coupon|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCouponsCoupon(string $coupon, \Stripe\Api\Model\V1CouponsCouponPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCouponsCoupon($coupon, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $email A filter on the list based on the customer's `email` field. The value must be a string.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CustomersGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomers($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new customer object.</p>.
     *
     * @param \Stripe\Api\Model\V1CustomersPostBody $payload body parameters for the request
     * @param string                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Customer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomers(\Stripe\Api\Model\V1CustomersPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomers($payload), $fetch);
    }

    /**
     * <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>.
     *
     * @param string $customer the identifier of the customer to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedCustomer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomer(string $customer, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomer($customer), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p>.
     *
     * @param string $customer        the identifier of the customer to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Customer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomer(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomer($customer, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>.

    <p>This request accepts mostly the same arguments as the customer creation call.</p>
     *
     * @param string                                        $customer the identifier of the customer to subscribe
     * @param \Stripe\Api\Model\V1CustomersCustomerPostBody $payload  body parameters for the request
     * @param string                                        $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Customer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomer(string $customer, \Stripe\Api\Model\V1CustomersCustomerPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomer($customer, $payload), $fetch);
    }

    /**
     * <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>.
     *
     * @param string $customer        the ID of the customer whose bank accounts will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CustomersCustomerBankAccountsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerBankAccounts(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerBankAccounts($customer, $queryParameters), $fetch);
    }

    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>.

    <p>If the card’s owner has no default card, then the new card will become the default.
    However, if the owner already has a default, then it will not change.
    To change the default, you should either <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>,
    or <a href="/docs/api#update_recipient">update the recipient</a> to have a new <code>default_card</code>.</p>
     *
     * @param string                                                    $customer
     * @param \Stripe\Api\Model\V1CustomersCustomerBankAccountsPostBody $payload  body parameters for the request
     * @param string                                                    $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerBankAccounts(string $customer, \Stripe\Api\Model\V1CustomersCustomerBankAccountsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerBankAccounts($customer, $payload), $fetch);
    }

    /**
     * <p>Delete a specified source for a given customer.</p>.
     *
     * @param string $customer
     * @param string $id       the ID of the source to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerBankAccountsId(string $customer, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerBankAccountsId($customer, $id), $fetch);
    }

    /**
     * <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>.
     *
     * @param string $customer
     * @param string $id              ID of bank account to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerBankAccountsId(string $customer, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerBankAccountsId($customer, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Update a specified source for a given customer.</p>.
     *
     * @param string                                                      $customer
     * @param string                                                      $id       the ID of the card to be updated
     * @param \Stripe\Api\Model\V1CustomersCustomerBankAccountsIdPostBody $payload  body parameters for the request
     * @param string                                                      $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerBankAccountsId(string $customer, string $id, \Stripe\Api\Model\V1CustomersCustomerBankAccountsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerBankAccountsId($customer, $id, $payload), $fetch);
    }

    /**
     * <p>Verify a specified bank account for a given customer.</p>.
     *
     * @param string                                                            $customer
     * @param string                                                            $id       the ID of the source to be verified
     * @param \Stripe\Api\Model\V1CustomersCustomerBankAccountsIdVerifyPostBody $payload  body parameters for the request
     * @param string                                                            $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerBankAccountsIdVerify(string $customer, string $id, \Stripe\Api\Model\V1CustomersCustomerBankAccountsIdVerifyPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerBankAccountsIdVerify($customer, $id, $payload), $fetch);
    }

    /**
     * <p>You can see a list of the cards belonging to a customer.
    Note that the 10 most recent sources are always available on the <code>Customer</code> object.
    If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
     *
     * @param string $customer        the ID of the customer whose cards will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CustomersCustomerCardsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerCards(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerCards($customer, $queryParameters), $fetch);
    }

    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>.

    <p>If the card’s owner has no default card, then the new card will become the default.
    However, if the owner already has a default, then it will not change.
    To change the default, you should either <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>,
    or <a href="/docs/api#update_recipient">update the recipient</a> to have a new <code>default_card</code>.</p>
     *
     * @param string                                             $customer
     * @param \Stripe\Api\Model\V1CustomersCustomerCardsPostBody $payload  body parameters for the request
     * @param string                                             $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerCards(string $customer, \Stripe\Api\Model\V1CustomersCustomerCardsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerCards($customer, $payload), $fetch);
    }

    /**
     * <p>Delete a specified source for a given customer.</p>.
     *
     * @param string $customer
     * @param string $id       the ID of the source to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerCardsId(string $customer, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerCardsId($customer, $id), $fetch);
    }

    /**
     * <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>.
     *
     * @param string $customer
     * @param string $id              the ID of the card to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Card|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerCardsId(string $customer, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerCardsId($customer, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Update a specified source for a given customer.</p>.
     *
     * @param string                                               $customer
     * @param string                                               $id       the ID of the card to be updated
     * @param \Stripe\Api\Model\V1CustomersCustomerCardsIdPostBody $payload  body parameters for the request
     * @param string                                               $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerCardsId(string $customer, string $id, \Stripe\Api\Model\V1CustomersCustomerCardsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerCardsId($customer, $id, $payload), $fetch);
    }

    /**
     * <p>Removes the currently applied discount on a customer.</p>.
     *
     * @param string $customer
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedDiscount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerDiscount(string $customer, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerDiscount($customer), $fetch);
    }

    /**
     * @param string $customer
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Discount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerDiscount(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerDiscount($customer, $queryParameters), $fetch);
    }

    /**
     * <p>List sources for a specified customer.</p>.
     *
     * @param string $customer        the ID of the customer whose sources will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $object filter sources according to a particular object type
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CustomersCustomerSourcesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerSources(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerSources($customer, $queryParameters), $fetch);
    }

    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>.

    <p>If the card’s owner has no default card, then the new card will become the default.
    However, if the owner already has a default, then it will not change.
    To change the default, you should either <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>,
    or <a href="/docs/api#update_recipient">update the recipient</a> to have a new <code>default_card</code>.</p>
     *
     * @param string                                               $customer
     * @param \Stripe\Api\Model\V1CustomersCustomerSourcesPostBody $payload  body parameters for the request
     * @param string                                               $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerSources(string $customer, \Stripe\Api\Model\V1CustomersCustomerSourcesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerSources($customer, $payload), $fetch);
    }

    /**
     * <p>Delete a specified source for a given customer.</p>.
     *
     * @param string $customer
     * @param string $id       the ID of the source to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerSourcesId(string $customer, string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerSourcesId($customer, $id), $fetch);
    }

    /**
     * <p>Retrieve a specified source for a given customer.</p>.
     *
     * @param string $customer
     * @param string $id              the ID of the source to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentSource|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerSourcesId(string $customer, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerSourcesId($customer, $id, $queryParameters), $fetch);
    }

    /**
     * <p>Update a specified source for a given customer.</p>.
     *
     * @param string                                                 $customer
     * @param string                                                 $id       the ID of the card to be updated
     * @param \Stripe\Api\Model\V1CustomersCustomerSourcesIdPostBody $payload  body parameters for the request
     * @param string                                                 $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerSourcesId(string $customer, string $id, \Stripe\Api\Model\V1CustomersCustomerSourcesIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerSourcesId($customer, $id, $payload), $fetch);
    }

    /**
     * <p>Verify a specified bank account for a given customer.</p>.
     *
     * @param string                                                       $customer
     * @param string                                                       $id       the ID of the source to be verified
     * @param \Stripe\Api\Model\V1CustomersCustomerSourcesIdVerifyPostBody $payload  body parameters for the request
     * @param string                                                       $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\BankAccount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerSourcesIdVerify(string $customer, string $id, \Stripe\Api\Model\V1CustomersCustomerSourcesIdVerifyPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerSourcesIdVerify($customer, $id, $payload), $fetch);
    }

    /**
     * <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>.
     *
     * @param string $customer        the ID of the customer whose subscriptions will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1CustomersCustomerSubscriptionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerSubscriptions(string $customer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerSubscriptions($customer, $queryParameters), $fetch);
    }

    /**
     * <p>Creates a new subscription on an existing customer.</p>.
     *
     * @param string                                                     $customer the identifier of the customer to subscribe
     * @param \Stripe\Api\Model\V1CustomersCustomerSubscriptionsPostBody $payload  body parameters for the request
     * @param string                                                     $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerSubscriptions(string $customer, \Stripe\Api\Model\V1CustomersCustomerSubscriptionsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerSubscriptions($customer, $payload), $fetch);
    }

    /**
     * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>.

    <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>

    <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     *
     * @param string                                                                            $customer
     * @param string                                                                            $subscriptionExposedId
     * @param \Stripe\Api\Model\V1CustomersCustomerSubscriptionsSubscriptionExposedIdDeleteBody $payload               body parameters for the request
     * @param string                                                                            $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerSubscriptionsSubscriptionExposedId(string $customer, string $subscriptionExposedId, \Stripe\Api\Model\V1CustomersCustomerSubscriptionsSubscriptionExposedIdDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerSubscriptionsSubscriptionExposedId($customer, $subscriptionExposedId, $payload), $fetch);
    }

    /**
     * <p>Retrieves the subscription with the given ID.</p>.
     *
     * @param string $customer
     * @param string $subscriptionExposedId ID of subscription to retrieve
     * @param array  $queryParameters       {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerSubscriptionsSubscriptionExposedId(string $customer, string $subscriptionExposedId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerSubscriptionsSubscriptionExposedId($customer, $subscriptionExposedId, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>.
     *
     * @param string                                                                          $customer              the identifier of the customer to subscribe
     * @param string                                                                          $subscriptionExposedId the identifier of the subscription to update
     * @param \Stripe\Api\Model\V1CustomersCustomerSubscriptionsSubscriptionExposedIdPostBody $payload               body parameters for the request
     * @param string                                                                          $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postCustomersCustomerSubscriptionsSubscriptionExposedId(string $customer, string $subscriptionExposedId, \Stripe\Api\Model\V1CustomersCustomerSubscriptionsSubscriptionExposedIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostCustomersCustomerSubscriptionsSubscriptionExposedId($customer, $subscriptionExposedId, $payload), $fetch);
    }

    /**
     * <p>Removes the currently applied discount on a customer.</p>.
     *
     * @param string $customer
     * @param string $subscriptionExposedId
     * @param string $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedDiscount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(string $customer, string $subscriptionExposedId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount($customer, $subscriptionExposedId), $fetch);
    }

    /**
     * @param string $customer
     * @param string $subscriptionExposedId
     * @param array  $queryParameters       {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Discount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(string $customer, string $subscriptionExposedId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount($customer, $subscriptionExposedId, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your disputes.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1DisputesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDisputes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetDisputes($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the dispute with the given ID.</p>.
     *
     * @param string $dispute         ID of dispute to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getDisputesDispute(string $dispute, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetDisputesDispute($dispute, $queryParameters), $fetch);
    }

    /**
     * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>.

    <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
     *
     * @param string                                      $dispute ID of the dispute to update
     * @param \Stripe\Api\Model\V1DisputesDisputePostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postDisputesDispute(string $dispute, \Stripe\Api\Model\V1DisputesDisputePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostDisputesDispute($dispute, $payload), $fetch);
    }

    /**
     * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>.

    <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
     *
     * @param string                                           $dispute ID of the dispute to close
     * @param \Stripe\Api\Model\V1DisputesDisputeClosePostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Dispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postDisputesDisputeClose(string $dispute, \Stripe\Api\Model\V1DisputesDisputeClosePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostDisputesDisputeClose($dispute, $payload), $fetch);
    }

    /**
     * <p>Creates a short-lived API key for a given resource.</p>.
     *
     * @param \Stripe\Api\Model\V1EphemeralKeysPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\EphemeralKey|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postEphemeralKeys(\Stripe\Api\Model\V1EphemeralKeysPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostEphemeralKeys($payload), $fetch);
    }

    /**
     * <p>Invalidates a short-lived API key for a given resource.</p>.
     *
     * @param string $key   the ID of the key you'd like to invalidate
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\EphemeralKey|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteEphemeralKeysKey(string $key, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteEphemeralKeysKey($key), $fetch);
    }

    /**
     * <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var bool $delivery_success Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.
     *     @var array $types An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1EventsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getEvents(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetEvents($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>.
     *
     * @param string $id              the identifier of the event to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Event|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getEventsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetEventsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Resend an event. This only works in testmode</p>.
     *
     * @param string                                    $id
     * @param \Stripe\Api\Model\V1EventsIdRetryPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Event|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postEventsIdRetry(string $id, \Stripe\Api\Model\V1EventsIdRetryPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostEventsIdRetry($id, $payload), $fetch);
    }

    /**
     * <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ExchangeRatesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExchangeRates(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetExchangeRates($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the exchange rates from the given currency to every supported currency.</p>.
     *
     * @param string $currency        Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ExchangeRate|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getExchangeRatesCurrency(string $currency, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetExchangeRatesCurrency($currency, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of file links.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var bool $expired Filter links by their expiration status. By default, all links are returned.
     *     @var string $file only return links for the given file
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1FileLinksGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFileLinks(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetFileLinks($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new file link object.</p>.
     *
     * @param \Stripe\Api\Model\V1FileLinksPostBody $payload body parameters for the request
     * @param string                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FileLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postFileLinks(\Stripe\Api\Model\V1FileLinksPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostFileLinks($payload), $fetch);
    }

    /**
     * <p>Retrieves the file link with the given ID.</p>.
     *
     * @param string $link            the identifier of the file link to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FileLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFileLinksLink(string $link, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetFileLinksLink($link, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing file link object. Expired links can no longer be updated.</p>.
     *
     * @param string                                    $link    the ID of the file link
     * @param \Stripe\Api\Model\V1FileLinksLinkPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\FileLink|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postFileLinksLink(string $link, \Stripe\Api\Model\V1FileLinksLinkPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostFileLinksLink($link, $payload), $fetch);
    }

    /**
     * <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $purpose The file purpose to filter queries by. If none is provided, files will not be filtered by purpose.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1FilesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFiles(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetFiles($queryParameters), $fetch);
    }

    /**
     * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>.

    <p>All of Stripe’s officially supported API libraries should have support for sending <code>multipart/form-data</code>.</p>
     *
     * @param \Stripe\Api\Model\V1FilesPostBody $payload body parameters for the request
     * @param string                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\File|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postFiles(\Stripe\Api\Model\V1FilesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostFiles($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object.</p>.
     *
     * @param string $file            the identifier of the file to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\File|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getFilesFile(string $file, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetFilesFile($file, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $customer The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var string $invoice Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var bool $pending Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1InvoiceitemsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoiceitems(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoiceitems($queryParameters), $fetch);
    }

    /**
     * <p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>.
     *
     * @param \Stripe\Api\Model\V1InvoiceitemsPostBody $payload body parameters for the request
     * @param string                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoiceitem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoiceitems(\Stripe\Api\Model\V1InvoiceitemsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoiceitems($payload), $fetch);
    }

    /**
     * <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>.
     *
     * @param string $invoiceitem the identifier of the invoice item to be deleted
     * @param string $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedInvoiceitem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteInvoiceitemsInvoiceitem(string $invoiceitem, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteInvoiceitemsInvoiceitem($invoiceitem), $fetch);
    }

    /**
     * <p>Retrieves the invoice item with the given ID.</p>.
     *
     * @param string $invoiceitem     the ID of the desired invoice item
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoiceitem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoiceitemsInvoiceitem(string $invoiceitem, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoiceitemsInvoiceitem($invoiceitem, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>.
     *
     * @param string                                              $invoiceitem
     * @param \Stripe\Api\Model\V1InvoiceitemsInvoiceitemPostBody $payload     body parameters for the request
     * @param string                                              $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoiceitem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoiceitemsInvoiceitem(string $invoiceitem, \Stripe\Api\Model\V1InvoiceitemsInvoiceitemPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoiceitemsInvoiceitem($invoiceitem, $payload), $fetch);
    }

    /**
     * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $billing The billing mode of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
     *     @var int $created
     *     @var string $customer only return invoices for the customer specified by this customer ID
     *     @var int $due_date
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $subscription Only return invoices for the subscription specified by this subscription ID.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1InvoicesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoices(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoices($queryParameters), $fetch);
    }

    /**
     * <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p>.
     *
     * @param \Stripe\Api\Model\V1InvoicesPostBody $payload body parameters for the request
     * @param string                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoices(\Stripe\Api\Model\V1InvoicesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoices($payload), $fetch);
    }

    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>.

    <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>

    <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $coupon The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
     *     @var string $customer the identifier of the customer whose upcoming invoice you'd like to retrieve
     *     @var array $invoice_items list of invoice items to add or update in the upcoming invoice preview
     *     @var string $subscription The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
     *     @var string $subscription_billing_cycle_anchor For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
     *     @var bool $subscription_cancel_at_period_end boolean indicating whether this subscription should cancel at the end of the current period
     *     @var bool $subscription_cancel_now
     *     @var array $subscription_items list of subscription items, each with an attached plan
     *     @var bool $subscription_prorate If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required.
     *     @var int $subscription_proration_date If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false.
     *     @var float $subscription_tax_percent If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required.
     *     @var string $subscription_trial_end If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
     *     @var bool $subscription_trial_from_plan Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoicesUpcoming(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoicesUpcoming($queryParameters), $fetch);
    }

    /**
     * <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $coupon The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string.
     *     @var string $customer the identifier of the customer whose upcoming invoice you'd like to retrieve
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var array $invoice_items list of invoice items to add or update in the upcoming invoice preview
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $subscription The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
     *     @var string $subscription_billing_cycle_anchor For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`.
     *     @var bool $subscription_cancel_at_period_end boolean indicating whether this subscription should cancel at the end of the current period
     *     @var bool $subscription_cancel_now
     *     @var array $subscription_items list of subscription items, each with an attached plan
     *     @var bool $subscription_prorate If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required.
     *     @var int $subscription_proration_date If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false.
     *     @var float $subscription_tax_percent If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required.
     *     @var string $subscription_trial_end If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required.
     *     @var bool $subscription_trial_from_plan Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1InvoicesUpcomingLinesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoicesUpcomingLines(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoicesUpcomingLines($queryParameters), $fetch);
    }

    /**
     * <p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href="#void_invoice">voided</a>.</p>.
     *
     * @param string $invoice the identifier of the invoice to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedInvoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteInvoicesInvoice(string $invoice, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteInvoicesInvoice($invoice), $fetch);
    }

    /**
     * <p>Retrieves the invoice with the given ID.</p>.
     *
     * @param string $invoice         the identifier of the desired invoice
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoicesInvoice(string $invoice, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoicesInvoice($invoice, $queryParameters), $fetch);
    }

    /**
     * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,.
    monetary values, as well as <code>billing</code>, become uneditable.</p>

    <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
    sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
    <code>auto_advance=false</code>.</p>
     *
     * @param string                                      $invoice
     * @param \Stripe\Api\Model\V1InvoicesInvoicePostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoice(string $invoice, \Stripe\Api\Model\V1InvoicesInvoicePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoice($invoice, $payload), $fetch);
    }

    /**
     * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>.
     *
     * @param string                                              $invoice the invoice to be finalized, it must have `status=draft`
     * @param \Stripe\Api\Model\V1InvoicesInvoiceFinalizePostBody $payload body parameters for the request
     * @param string                                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoiceFinalize(string $invoice, \Stripe\Api\Model\V1InvoicesInvoiceFinalizePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoiceFinalize($invoice, $payload), $fetch);
    }

    /**
     * <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>.
     *
     * @param string $invoice         the ID of the invoice containing the lines to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1InvoicesInvoiceLinesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getInvoicesInvoiceLines(string $invoice, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetInvoicesInvoiceLines($invoice, $queryParameters), $fetch);
    }

    /**
     * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>.
     *
     * @param string                                                       $invoice The identifier of the invoice to be marked as uncollectible. The invoice must be `open`.
     * @param \Stripe\Api\Model\V1InvoicesInvoiceMarkUncollectiblePostBody $payload body parameters for the request
     * @param string                                                       $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoiceMarkUncollectible(string $invoice, \Stripe\Api\Model\V1InvoicesInvoiceMarkUncollectiblePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoiceMarkUncollectible($invoice, $payload), $fetch);
    }

    /**
     * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/recurring">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>.
     *
     * @param string                                         $invoice ID of invoice to pay
     * @param \Stripe\Api\Model\V1InvoicesInvoicePayPostBody $payload body parameters for the request
     * @param string                                         $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoicePay(string $invoice, \Stripe\Api\Model\V1InvoicesInvoicePayPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoicePay($invoice, $payload), $fetch);
    }

    /**
     * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/recurring">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>.

    <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     *
     * @param string                                          $invoice The invoice you would like to send. The billing mode for this invoice must be `send_invoice`.
     * @param \Stripe\Api\Model\V1InvoicesInvoiceSendPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoiceSend(string $invoice, \Stripe\Api\Model\V1InvoicesInvoiceSendPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoiceSend($invoice, $payload), $fetch);
    }

    /**
     * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>.
     *
     * @param string                                          $invoice ID of invoice to void. It must be finalized.
     * @param \Stripe\Api\Model\V1InvoicesInvoiceVoidPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Invoice|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postInvoicesInvoiceVoid(string $invoice, \Stripe\Api\Model\V1InvoicesInvoiceVoidPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostInvoicesInvoiceVoid($invoice, $payload), $fetch);
    }

    /**
     * <p>Returns a list of issuer fraud records.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $charge only return issuer fraud records for the charge specified by this charge ID
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuerFraudRecordsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuerFraudRecords(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuerFraudRecords($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>.

    <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
     *
     * @param string $issuerFraudRecord the identifier of the issuer fraud record to be retrieved
     * @param array  $queryParameters   {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuerFraudRecord|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuerFraudRecordsIssuerFraudRecord(string $issuerFraudRecord, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuerFraudRecordsIssuerFraudRecord($issuerFraudRecord, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $card only return issuing transactions that belong to the given card
     *     @var string $cardholder only return authorizations belonging to the given cardholder
     *     @var int $created only return authorizations that were created during the given date interval
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return authorizations with the given status. One of pending, closed, or reversed.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingAuthorizationsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingAuthorizations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingAuthorizations($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Authorization</code> object.</p>.
     *
     * @param string $authorization   the ID of the authorization to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingAuthorization|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingAuthorizationsAuthorization(string $authorization, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingAuthorizationsAuthorization($authorization, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                                         $authorization the identifier of the authorization to update
     * @param \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationPostBody $payload       body parameters for the request
     * @param string                                                         $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingAuthorization|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingAuthorizationsAuthorization(string $authorization, \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingAuthorizationsAuthorization($authorization, $payload), $fetch);
    }

    /**
     * <p>Approves a pending Issuing <code>Authorization</code> object.</p>.
     *
     * @param string                                                                $authorization the identifier of the authorization to approve
     * @param \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationApprovePostBody $payload       body parameters for the request
     * @param string                                                                $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingAuthorization|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingAuthorizationsAuthorizationApprove(string $authorization, \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationApprovePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingAuthorizationsAuthorizationApprove($authorization, $payload), $fetch);
    }

    /**
     * <p>Declines a pending Issuing <code>Authorization</code> object.</p>.
     *
     * @param string                                                                $authorization the identifier of the issuing authorization to decline
     * @param \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationDeclinePostBody $payload       body parameters for the request
     * @param string                                                                $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingAuthorization|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingAuthorizationsAuthorizationDecline(string $authorization, \Stripe\Api\Model\V1IssuingAuthorizationsAuthorizationDeclinePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingAuthorizationsAuthorizationDecline($authorization, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created only return cardholders that were created during the given date interval
     *     @var string $email only return cardholders that have the given email address
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var bool $is_default only return the default cardholder
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $phone_number only return cardholders that have the given phone number
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
     *     @var string $type Only return cardholders that have the given type. One of `individual` or `business_entity`.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingCardholdersGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCardholders(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCardholders($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>.
     *
     * @param \Stripe\Api\Model\V1IssuingCardholdersPostBody $payload body parameters for the request
     * @param string                                         $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardholder|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingCardholders(\Stripe\Api\Model\V1IssuingCardholdersPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingCardholders($payload), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Cardholder</code> object.</p>.
     *
     * @param string $cardholder      the identifier of the cardholder to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardholder|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCardholdersCardholder(string $cardholder, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCardholdersCardholder($cardholder, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                                   $cardholder the ID of the cardholder to update
     * @param \Stripe\Api\Model\V1IssuingCardholdersCardholderPostBody $payload    body parameters for the request
     * @param string                                                   $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardholder|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingCardholdersCardholder(string $cardholder, \Stripe\Api\Model\V1IssuingCardholdersCardholderPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingCardholdersCardholder($cardholder, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $cardholder only return cards belonging to the Cardholder with the provided ID
     *     @var int $created only return cards that were issued during the given date interval
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $exp_month only return cards that have the given expiration month
     *     @var int $exp_year only return cards that have the given expiration year
     *     @var string $last4 only return cards that have the given last four digits
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $name only return cards that have the given name
     *     @var string $source only return cards whose full card number matches that of this card source ID
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
     *     @var string $type Only return cards that have the given type. One of `virtual` or `physical`.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingCardsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCards(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCards($queryParameters), $fetch);
    }

    /**
     * <p>Creates an Issuing <code>Card</code> object.</p>.
     *
     * @param \Stripe\Api\Model\V1IssuingCardsPostBody $payload body parameters for the request
     * @param string                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCard|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingCards(\Stripe\Api\Model\V1IssuingCardsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingCards($payload), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Card</code> object.</p>.
     *
     * @param string $card            the identifier of the card to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCard|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCardsCard(string $card, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCardsCard($card, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                       $card    the identifier of the issued card to update
     * @param \Stripe\Api\Model\V1IssuingCardsCardPostBody $payload body parameters for the request
     * @param string                                       $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCard|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingCardsCard(string $card, \Stripe\Api\Model\V1IssuingCardsCardPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingCardsCard($card, $payload), $fetch);
    }

    /**
     * <p>For virtual cards only. Retrieves an Issuing <code>Card_details</code> object that contains <a href="/docs/issuing/cards/management#virtual-card-info">the sensitive details</a> of a virtual card.</p>.
     *
     * @param string $card            the identifier of the virtual card to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardDetails|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCardsCardDetails(string $card, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCardsCardDetails($card, $queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the PIN for a card object, subject to cardholder verification, see <a href="/docs/issuing/pin_management">Retrieve and update cardholder PIN</a></p>.
     *
     * @param string $card            The id of the `Card` that the PIN belongs to
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $verification The id of the `Verification` that was sent and the code entered by the cardholder
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardPin|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingCardsCardPin(string $card, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingCardsCardPin($card, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the PIN for a card, subject to cardholder verification. See <a href="/docs/issuing/pin_management">Retrieve and update cardholder PIN</a></p>.
     *
     * @param string                                          $card    The id of the `Card` that the PIN belongs to
     * @param \Stripe\Api\Model\V1IssuingCardsCardPinPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingCardPin|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingCardsCardPin(string $card, \Stripe\Api\Model\V1IssuingCardsCardPinPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingCardsCardPin($card, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created only return issuing disputes that were created during the given date interval
     *     @var string $disputed_transaction only return issuing disputes for the given transaction
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingDisputesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingDisputes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingDisputes($queryParameters), $fetch);
    }

    /**
     * <p>Creates an Issuing <code>Dispute</code> object.</p>.
     *
     * @param \Stripe\Api\Model\V1IssuingDisputesPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingDispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingDisputes(\Stripe\Api\Model\V1IssuingDisputesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingDisputes($payload), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Dispute</code> object.</p>.
     *
     * @param string $dispute         the ID of the dispute to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingDispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingDisputesDispute(string $dispute, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingDisputesDispute($dispute, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                             $dispute the ID of the dispute to update
     * @param \Stripe\Api\Model\V1IssuingDisputesDisputePostBody $payload body parameters for the request
     * @param string                                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingDispute|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingDisputesDispute(string $dispute, \Stripe\Api\Model\V1IssuingDisputesDisputePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingDisputesDispute($dispute, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingSettlementsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingSettlements(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingSettlements($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Settlement</code> object.</p>.
     *
     * @param string $settlement      the ID of the settlement to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingSettlement|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingSettlementsSettlement(string $settlement, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingSettlementsSettlement($settlement, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                                   $settlement the ID of the settlement to update
     * @param \Stripe\Api\Model\V1IssuingSettlementsSettlementPostBody $payload    body parameters for the request
     * @param string                                                   $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingSettlement|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingSettlementsSettlement(string $settlement, \Stripe\Api\Model\V1IssuingSettlementsSettlementPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingSettlementsSettlement($settlement, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $card only return issuing transactions that belong to the given card
     *     @var string $cardholder only return authorizations belonging to the given cardholder
     *     @var int $created only return transactions that were created during the given date interval
     *     @var string $dispute only return transactions that originate from a given dispute
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $settlement only return transactions that are associated with the given settlement
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1IssuingTransactionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingTransactions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingTransactions($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves an Issuing <code>Transaction</code> object.</p>.
     *
     * @param string $transaction     the ID of the transaction to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingTransaction|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getIssuingTransactionsTransaction(string $transaction, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetIssuingTransactionsTransaction($transaction, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                                     $transaction the identifier of the transaction to update
     * @param \Stripe\Api\Model\V1IssuingTransactionsTransactionPostBody $payload     body parameters for the request
     * @param string                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingTransaction|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingTransactionsTransaction(string $transaction, \Stripe\Api\Model\V1IssuingTransactionsTransactionPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingTransactionsTransaction($transaction, $payload), $fetch);
    }

    /**
     * <p>Some actions (eg: updating a PIN) need confirmation from the cardholder</p>.
     *
     * @param \Stripe\Api\Model\V1IssuingVerificationsPostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\IssuingVerification|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postIssuingVerifications(\Stripe\Api\Model\V1IssuingVerificationsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostIssuingVerifications($payload), $fetch);
    }

    /**
     * <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created date this return was created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $order the order to retrieve returns for
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1OrderReturnsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderReturns(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetOrderReturns($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>.
     *
     * @param string $id              the identifier of the order return to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\OrderReturn|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrderReturnsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetOrderReturnsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created date this order was created
     *     @var string $customer only return orders for the given customer
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var array $ids only return orders with the given IDs
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`.
     *     @var string $status_transitions filter orders based on when they were paid, fulfilled, canceled, or returned
     *     @var array $upstream_ids Only return orders with the given upstream order IDs.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1OrdersGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrders(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetOrders($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new order object.</p>.
     *
     * @param \Stripe\Api\Model\V1OrdersPostBody $payload body parameters for the request
     * @param string                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Order|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postOrders(\Stripe\Api\Model\V1OrdersPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostOrders($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>.
     *
     * @param string $id              the identifier of the order to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Order|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getOrdersId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetOrdersId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                               $id
     * @param \Stripe\Api\Model\V1OrdersIdPostBody $payload body parameters for the request
     * @param string                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Order|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postOrdersId(string $id, \Stripe\Api\Model\V1OrdersIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostOrdersId($id, $payload), $fetch);
    }

    /**
     * <p>Pay an order by providing a <code>source</code> to create a payment.</p>.
     *
     * @param string                                  $id
     * @param \Stripe\Api\Model\V1OrdersIdPayPostBody $payload body parameters for the request
     * @param string                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Order|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postOrdersIdPay(string $id, \Stripe\Api\Model\V1OrdersIdPayPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostOrdersIdPay($id, $payload), $fetch);
    }

    /**
     * <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>.
     *
     * @param string                                      $id
     * @param \Stripe\Api\Model\V1OrdersIdReturnsPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\OrderReturn|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postOrdersIdReturns(string $id, \Stripe\Api\Model\V1OrdersIdReturnsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostOrdersIdReturns($id, $payload), $fetch);
    }

    /**
     * <p>Returns a list of PaymentIntents.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1PaymentIntentsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPaymentIntents(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPaymentIntents($queryParameters), $fetch);
    }

    /**
     * <p>Creates a PaymentIntent object.</p>.
     *
     * @param \Stripe\Api\Model\V1PaymentIntentsPostBody $payload body parameters for the request
     * @param string                                     $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentIntents(\Stripe\Api\Model\V1PaymentIntentsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentIntents($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>.

    <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>

    <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
     *
     * @param string $intent
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $client_secret The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPaymentIntentsIntent(string $intent, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPaymentIntentsIntent($intent, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a PaymentIntent object.</p>.
     *
     * @param string                                           $intent
     * @param \Stripe\Api\Model\V1PaymentIntentsIntentPostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentIntentsIntent(string $intent, \Stripe\Api\Model\V1PaymentIntentsIntentPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentIntentsIntent($intent, $payload), $fetch);
    }

    /**
     * <p>A PaymentIntent object can be canceled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action. </p>.

    <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
     *
     * @param string                                                 $intent
     * @param \Stripe\Api\Model\V1PaymentIntentsIntentCancelPostBody $payload body parameters for the request
     * @param string                                                 $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentIntentsIntentCancel(string $intent, \Stripe\Api\Model\V1PaymentIntentsIntentCancelPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentIntentsIntentCancel($intent, $payload), $fetch);
    }

    /**
     * <p>Capture the funds of an existing uncaptured PaymentIntent where <code>required_action="requires_capture"</code>.</p>.

    <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>

    <p>Read the <a href="/docs/payments/payment-intents/creating-payment-intents#separate-auth-capture">expanded documentation</a> to learn more about separate authorization and capture.</p>
     *
     * @param string                                                  $intent
     * @param \Stripe\Api\Model\V1PaymentIntentsIntentCapturePostBody $payload body parameters for the request
     * @param string                                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentIntentsIntentCapture(string $intent, \Stripe\Api\Model\V1PaymentIntentsIntentCapturePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentIntentsIntentCapture($intent, $payload), $fetch);
    }

    /**
     * <p>Confirm that your customer intends to pay with current or provided.
    <code>source</code>. Upon confirmation, the PaymentIntent will attempt to initiate
    a payment.</p>

    <p>If the selected <code>source</code> requires additional authentication steps, the
    PaymentIntent will transition to the <code>requires_action</code> status and
    suggest additional actions via <code>next_source_action</code>. If payment fails,
    the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
    payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
    status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
    Read the <a href="/docs/payments/payment-intents/server-confirmation">expanded documentation</a>
    to learn more about server-side confirmation.</p>

    <p>When using a publishable key, the
    <a href="#payment_intent_object-client_secret">client_secret</a> must be provided
    to confirm the PaymentIntent.</p>
     *
     * @param string                                                  $intent
     * @param \Stripe\Api\Model\V1PaymentIntentsIntentConfirmPostBody $payload body parameters for the request
     * @param string                                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentIntent|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentIntentsIntentConfirm(string $intent, \Stripe\Api\Model\V1PaymentIntentsIntentConfirmPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentIntentsIntentConfirm($intent, $payload), $fetch);
    }

    /**
     * <p>Returns a list of PaymentIntents + and Charges created without PaymentIntents</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $amount
     *     @var int $created
     *     @var string $customer
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var string $invoice
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $payment_intent
     *     @var string $source
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var array $status
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1PaymentIntentsWithLegacyChargesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPaymentIntentsWithLegacyCharges(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPaymentIntentsWithLegacyCharges($queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of PaymentMethods for a given Customer</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $customer the ID of the customer whose PaymentMethods will be retrieved
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type A required filter on the list, based on the object `type` field.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1PaymentMethodsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPaymentMethods(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPaymentMethods($queryParameters), $fetch);
    }

    /**
     * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>.
     *
     * @param \Stripe\Api\Model\V1PaymentMethodsPostBody $payload body parameters for the request
     * @param string                                     $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentMethod|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentMethods(\Stripe\Api\Model\V1PaymentMethodsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentMethods($payload), $fetch);
    }

    /**
     * <p>Retrieves a PaymentMethod object.</p>.
     *
     * @param string $paymentMethod   the ID of the PaymentMethod
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentMethod|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPaymentMethodsPaymentMethod(string $paymentMethod, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPaymentMethodsPaymentMethod($paymentMethod, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>.
     *
     * @param string                                                  $paymentMethod
     * @param \Stripe\Api\Model\V1PaymentMethodsPaymentMethodPostBody $payload       body parameters for the request
     * @param string                                                  $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentMethod|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentMethodsPaymentMethod(string $paymentMethod, \Stripe\Api\Model\V1PaymentMethodsPaymentMethodPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentMethodsPaymentMethod($paymentMethod, $payload), $fetch);
    }

    /**
     * <p>Attaches a PaymentMethod object to a Customer.</p>.
     *
     * @param string                                                        $paymentMethod
     * @param \Stripe\Api\Model\V1PaymentMethodsPaymentMethodAttachPostBody $payload       body parameters for the request
     * @param string                                                        $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentMethod|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentMethodsPaymentMethodAttach(string $paymentMethod, \Stripe\Api\Model\V1PaymentMethodsPaymentMethodAttachPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentMethodsPaymentMethodAttach($paymentMethod, $payload), $fetch);
    }

    /**
     * <p>Detaches a PaymentMethod object from a Customer.</p>.
     *
     * @param string                                                        $paymentMethod
     * @param \Stripe\Api\Model\V1PaymentMethodsPaymentMethodDetachPostBody $payload       body parameters for the request
     * @param string                                                        $fetch         Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\PaymentMethod|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPaymentMethodsPaymentMethodDetach(string $paymentMethod, \Stripe\Api\Model\V1PaymentMethodsPaymentMethodDetachPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPaymentMethodsPaymentMethodDetach($paymentMethod, $payload), $fetch);
    }

    /**
     * <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $arrival_date
     *     @var int $created
     *     @var string $destination the ID of an external account - only return payouts sent to this external account
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1PayoutsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPayouts(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPayouts($queryParameters), $fetch);
    }

    /**
     * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>.

    <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>

    <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
     *
     * @param \Stripe\Api\Model\V1PayoutsPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Payout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPayouts(\Stripe\Api\Model\V1PayoutsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPayouts($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>.
     *
     * @param string $payout          the identifier of the payout to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Payout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPayoutsPayout(string $payout, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPayoutsPayout($payout, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>.
     *
     * @param string                                    $payout  the identifier of the payout to be updated
     * @param \Stripe\Api\Model\V1PayoutsPayoutPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Payout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPayoutsPayout(string $payout, \Stripe\Api\Model\V1PayoutsPayoutPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPayoutsPayout($payout, $payload), $fetch);
    }

    /**
     * <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>.
     *
     * @param string                                          $payout  the identifier of the payout to be canceled
     * @param \Stripe\Api\Model\V1PayoutsPayoutCancelPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Payout|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPayoutsPayoutCancel(string $payout, \Stripe\Api\Model\V1PayoutsPayoutCancelPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPayoutsPayoutCancel($payout, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your plans.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var bool $active Only return plans that are active or inactive (e.g., pass `false` to list all inactive products).
     *     @var int $created A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $product only return plans for the given product
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1PlansGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPlans(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPlans($queryParameters), $fetch);
    }

    /**
     * <p>You can create plans using the API, or in the Stripe <a href="https://dashboard.stripe.com/subscriptions/products">Dashboard</a>.</p>.
     *
     * @param \Stripe\Api\Model\V1PlansPostBody $payload body parameters for the request
     * @param string                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Plan|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPlans(\Stripe\Api\Model\V1PlansPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPlans($payload), $fetch);
    }

    /**
     * <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>.
     *
     * @param string $plan  the identifier of the plan to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedPlan|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deletePlansPlan(string $plan, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeletePlansPlan($plan), $fetch);
    }

    /**
     * <p>Retrieves the plan with the given ID.</p>.
     *
     * @param string $plan            the ID of the desired plan
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Plan|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getPlansPlan(string $plan, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetPlansPlan($plan, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>.
     *
     * @param string                                $plan    the identifier of the plan to be updated
     * @param \Stripe\Api\Model\V1PlansPlanPostBody $payload body parameters for the request
     * @param string                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Plan|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postPlansPlan(string $plan, \Stripe\Api\Model\V1PlansPlanPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostPlansPlan($plan, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var bool $active Only return products that are active or inactive (e.g., pass `false` to list all inactive products).
     *     @var int $created only return products that were created during the given date interval
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var array $ids only return products with the given IDs
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var bool $shippable Only return products that can be shipped (i.e., physical, not digital products).
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type only return products of this type
     *     @var string $url Only return products with the given url.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ProductsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getProducts(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetProducts($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new product object. To create a product for use with subscriptions, see <a href="#create_service_product">Subscriptions Products</a>.</p>.
     *
     * @param \Stripe\Api\Model\V1ProductsPostBody $payload body parameters for the request
     * @param string                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Product|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postProducts(\Stripe\Api\Model\V1ProductsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostProducts($payload), $fetch);
    }

    /**
     * <p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p>.
     *
     * @param string $id    the ID of the product to delete
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedProduct|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteProductsId(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteProductsId($id), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>.
     *
     * @param string $id              the identifier of the product to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Product|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getProductsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetProductsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>Note that a product’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing product and create a new one with the new attribute values.</p>
     *
     * @param string                                 $id
     * @param \Stripe\Api\Model\V1ProductsIdPostBody $payload body parameters for the request
     * @param string                                 $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Product|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postProductsId(string $id, \Stripe\Api\Model\V1ProductsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostProductsId($id, $payload), $fetch);
    }

    /**
     * <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $value return items belonging to the parent list whose value matches the specified value (using an "is like" match)
     *     @var string $value_list Identifier for the parent value list this item belongs to.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1RadarValueListItemsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRadarValueListItems(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRadarValueListItems($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>.
     *
     * @param \Stripe\Api\Model\V1RadarValueListItemsPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\RadarValueListItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRadarValueListItems(\Stripe\Api\Model\V1RadarValueListItemsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRadarValueListItems($payload), $fetch);
    }

    /**
     * <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>.
     *
     * @param string $item  the identifier of the value list item to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedRadarValueListItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteRadarValueListItemsItem(string $item, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteRadarValueListItemsItem($item), $fetch);
    }

    /**
     * <p>Retrieves a <code>ValueListItem</code> object.</p>.
     *
     * @param string $item            the identifier of the value list item to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\RadarValueListItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRadarValueListItemsItem(string $item, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRadarValueListItemsItem($item, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $alias the alias used to reference the value list when writing rules
     *     @var string $contains a value contained within a value list - returns all value lists containing this value
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1RadarValueListsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRadarValueLists(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRadarValueLists($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>.
     *
     * @param \Stripe\Api\Model\V1RadarValueListsPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\RadarValueList|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRadarValueLists(\Stripe\Api\Model\V1RadarValueListsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRadarValueLists($payload), $fetch);
    }

    /**
     * <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>.
     *
     * @param string $valueList the identifier of the value list to be deleted
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedRadarValueList|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteRadarValueListsValueList(string $valueList, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteRadarValueListsValueList($valueList), $fetch);
    }

    /**
     * <p>Retrieves a <code>ValueList</code> object.</p>.
     *
     * @param string $valueList       the identifier of the value list to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\RadarValueList|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRadarValueListsValueList(string $valueList, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRadarValueListsValueList($valueList, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>.
     *
     * @param string                                               $valueList the identifier of the value list to be updated
     * @param \Stripe\Api\Model\V1RadarValueListsValueListPostBody $payload   body parameters for the request
     * @param string                                               $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\RadarValueList|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRadarValueListsValueList(string $valueList, \Stripe\Api\Model\V1RadarValueListsValueListPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRadarValueListsValueList($valueList, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $type
     *     @var bool $verified Only return recipients that are verified or unverified.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1RecipientsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRecipients(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRecipients($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
    Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
     *
     * @param \Stripe\Api\Model\V1RecipientsPostBody $payload body parameters for the request
     * @param string                                 $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Recipient|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRecipients(\Stripe\Api\Model\V1RecipientsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRecipients($payload), $fetch);
    }

    /**
     * <p>Permanently deletes a recipient. It cannot be undone.</p>.
     *
     * @param string $id    the identifier of the recipient to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedRecipient|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteRecipientsId(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteRecipientsId($id), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>.
     *
     * @param string $id              the identifier of the recipient to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedRecipient|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRecipientsId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRecipientsId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified recipient by setting the values of the parameters passed.
    Any parameters not provided will be left unchanged.</p>

    <p>If you update the name or tax ID, the identity verification will automatically be rerun.
    If you update the bank account, the bank account validation will automatically be rerun.</p>
     *
     * @param string                                   $id
     * @param \Stripe\Api\Model\V1RecipientsIdPostBody $payload body parameters for the request
     * @param string                                   $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Recipient|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRecipientsId(string $id, \Stripe\Api\Model\V1RecipientsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRecipientsId($id, $payload), $fetch);
    }

    /**
     * <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $charge only return refunds for the charge specified by this charge ID
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1RefundsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRefunds(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRefunds($queryParameters), $fetch);
    }

    /**
     * <p>Create a refund.</p>.
     *
     * @param \Stripe\Api\Model\V1RefundsPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRefunds(\Stripe\Api\Model\V1RefundsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRefunds($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing refund.</p>.
     *
     * @param string $refund          ID of refund to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getRefundsRefund(string $refund, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetRefundsRefund($refund, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>This request only accepts <code>metadata</code> as an argument.</p>
     *
     * @param string                                    $refund
     * @param \Stripe\Api\Model\V1RefundsRefundPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Refund|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postRefundsRefund(string $refund, \Stripe\Api\Model\V1RefundsRefundPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostRefundsRefund($refund, $payload), $fetch);
    }

    /**
     * <p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ReportingReportRunsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReportingReportRuns(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReportingReportRuns($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new object and begin running the report. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
     *
     * @param \Stripe\Api\Model\V1ReportingReportRunsPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ReportingReportRun|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postReportingReportRuns(\Stripe\Api\Model\V1ReportingReportRunsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostReportingReportRuns($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing Report Run. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
     *
     * @param string $reportRun       The ID of the run to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ReportingReportRun|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReportingReportRunsReportRun(string $reportRun, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReportingReportRunsReportRun($reportRun, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a full list of Report Types. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ReportingReportTypesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReportingReportTypes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReportingReportTypes($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of a Report Type. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>.
     *
     * @param string $reportType      The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types) to retrieve, such as `balance.summary.1`.
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ReportingReportType|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReportingReportTypesReportType(string $reportType, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReportingReportTypesReportType($reportType, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1ReviewsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReviews(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReviews($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves a <code>Review</code> object.</p>.
     *
     * @param string $review          the identifier of the review to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Review|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getReviewsReview(string $review, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetReviewsReview($review, $queryParameters), $fetch);
    }

    /**
     * <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>.
     *
     * @param string                                           $review  the identifier of the review to be approved
     * @param \Stripe\Api\Model\V1ReviewsReviewApprovePostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Review|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postReviewsReviewApprove(string $review, \Stripe\Api\Model\V1ReviewsReviewApprovePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostReviewsReviewApprove($review, $payload), $fetch);
    }

    /**
     * <p>Returns a list of scheduled query runs.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SigmaScheduledQueryRunsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSigmaScheduledQueryRuns(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSigmaScheduledQueryRuns($queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of an scheduled query run.</p>.
     *
     * @param string $scheduledQueryRun unique identifier for the object
     * @param array  $queryParameters   {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\ScheduledQueryRun|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSigmaScheduledQueryRunsScheduledQueryRun(string $scheduledQueryRun, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSigmaScheduledQueryRunsScheduledQueryRun($scheduledQueryRun, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var bool $active Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products).
     *     @var string $attributes Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `["color", "size"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var array $ids only return SKUs with the given IDs
     *     @var bool $in_stock Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $product The ID of the product whose SKUs will be retrieved. Must be a product with type `good`.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SkusGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSkus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSkus($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new SKU associated with a product.</p>.
     *
     * @param \Stripe\Api\Model\V1SkusPostBody $payload body parameters for the request
     * @param string                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Sku|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSkus(\Stripe\Api\Model\V1SkusPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSkus($payload), $fetch);
    }

    /**
     * <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>.
     *
     * @param string $id    the identifier of the SKU to be deleted
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedSku|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSkusId(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteSkusId($id), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>.
     *
     * @param string $id              the identifier of the SKU to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedSku|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSkusId(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSkusId($id, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
     *
     * @param string                             $id
     * @param \Stripe\Api\Model\V1SkusIdPostBody $payload body parameters for the request
     * @param string                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Sku|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSkusId(string $id, \Stripe\Api\Model\V1SkusIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSkusId($id, $payload), $fetch);
    }

    /**
     * <p>Creates a new source object.</p>.
     *
     * @param \Stripe\Api\Model\V1SourcesPostBody $payload body parameters for the request
     * @param string                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Source|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSources(\Stripe\Api\Model\V1SourcesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSources($payload), $fetch);
    }

    /**
     * <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>.
     *
     * @param string $source          the identifier of the source to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $client_secret The client secret of the source. Required if a publishable key is used to retrieve the source.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Source|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSourcesSource(string $source, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSourcesSource($source, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
     *
     * @param string                                    $source
     * @param \Stripe\Api\Model\V1SourcesSourcePostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Source|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSourcesSource(string $source, \Stripe\Api\Model\V1SourcesSourcePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSourcesSource($source, $payload), $fetch);
    }

    /**
     * <p>Retrieves a new Source MandateNotification.</p>.
     *
     * @param string $mandateNotification the ID of the Source MandateNotification
     * @param string $source              the ID of the Source that received a ManateNotification
     * @param array  $queryParameters     {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SourceMandateNotification|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSourcesSourceMandateNotificationsMandateNotification(string $mandateNotification, string $source, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSourcesSourceMandateNotificationsMandateNotification($mandateNotification, $source, $queryParameters), $fetch);
    }

    /**
     * <p>List source transactions for a given source.</p>.
     *
     * @param string $source          the ID of the source whose source transactions will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SourcesSourceSourceTransactionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSourcesSourceSourceTransactions(string $source, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSourcesSourceSourceTransactions($source, $queryParameters), $fetch);
    }

    /**
     * <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>.
     *
     * @param string $source            the ID of the source whose source transaction will be retrieved
     * @param string $sourceTransaction the ID of the source transaction that will be retrieved
     * @param array  $queryParameters   {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SourceTransaction|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSourcesSourceSourceTransactionsSourceTransaction(string $source, string $sourceTransaction, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSourcesSourceSourceTransactionsSourceTransaction($source, $sourceTransaction, $queryParameters), $fetch);
    }

    /**
     * <p>Verify a given source.</p>.
     *
     * @param string                                          $source  the ID of the desired source
     * @param \Stripe\Api\Model\V1SourcesSourceVerifyPostBody $payload body parameters for the request
     * @param string                                          $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Source|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSourcesSourceVerify(string $source, \Stripe\Api\Model\V1SourcesSourceVerifyPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSourcesSourceVerify($source, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your subscription items for a given subscription.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $subscription The ID of the subscription whose items will be retrieved.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SubscriptionItemsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionItems(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionItems($queryParameters), $fetch);
    }

    /**
     * <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>.
     *
     * @param \Stripe\Api\Model\V1SubscriptionItemsPostBody $payload body parameters for the request
     * @param string                                        $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionItems(\Stripe\Api\Model\V1SubscriptionItemsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionItems($payload), $fetch);
    }

    /**
     * <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>.
     *
     * @param string                                              $item    the identifier of the subscription item to delete
     * @param \Stripe\Api\Model\V1SubscriptionItemsItemDeleteBody $payload body parameters for the request
     * @param string                                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedSubscriptionItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSubscriptionItemsItem(string $item, \Stripe\Api\Model\V1SubscriptionItemsItemDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteSubscriptionItemsItem($item, $payload), $fetch);
    }

    /**
     * <p>Retrieves the invoice item with the given ID.</p>.
     *
     * @param string $item            the identifier of the subscription item to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionItemsItem(string $item, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionItemsItem($item, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the plan or quantity of an item on a current subscription.</p>.
     *
     * @param string                                            $item    the identifier of the subscription item to modify
     * @param \Stripe\Api\Model\V1SubscriptionItemsItemPostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionItem|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionItemsItem(string $item, \Stripe\Api\Model\V1SubscriptionItemsItemPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionItemsItem($item, $payload), $fetch);
    }

    /**
     * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>.

    <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
     *
     * @param string $subscriptionItem only summary items for the given subscription item
     * @param array  $queryParameters  {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SubscriptionItemsSubscriptionItemUsageRecordSummariesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionItemsSubscriptionItemUsageRecordSummaries(string $subscriptionItem, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionItemsSubscriptionItemUsageRecordSummaries($subscriptionItem, $queryParameters), $fetch);
    }

    /**
     * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>.

    <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>

    <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="https://stripe.com/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>

    <p>The default pricing model for metered billing is <a href="https://stripe.com/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
     *
     * @param string                                                                    $subscriptionItem the ID of the subscription item for this usage record
     * @param \Stripe\Api\Model\V1SubscriptionItemsSubscriptionItemUsageRecordsPostBody $payload          body parameters for the request
     * @param string                                                                    $fetch            Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\UsageRecord|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionItemsSubscriptionItemUsageRecords(string $subscriptionItem, \Stripe\Api\Model\V1SubscriptionItemsSubscriptionItemUsageRecordsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionItemsSubscriptionItemUsageRecords($subscriptionItem, $payload), $fetch);
    }

    /**
     * <p>Retrieves the list of your subscription schedules.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $canceled_at only return subscription schedules that were created canceled the given date interval
     *     @var int $completed_at only return subscription schedules that completed during the given date interval
     *     @var int $created only return subscription schedules that were created during the given date interval
     *     @var string $customer only return subscription schedules for the given customer
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var int $released_at only return subscription schedules that were released during the given date interval
     *     @var bool $scheduled only return subscription schedules that have not started yet
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SubscriptionSchedulesGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionSchedules(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionSchedules($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new subscription schedule object.</p>.
     *
     * @param \Stripe\Api\Model\V1SubscriptionSchedulesPostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionSchedule|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionSchedules(\Stripe\Api\Model\V1SubscriptionSchedulesPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionSchedules($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>.
     *
     * @param string $schedule        the identifier of the subscription schedule to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionSchedule|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionSchedulesSchedule(string $schedule, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionSchedulesSchedule($schedule, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing subscription schedule.</p>.
     *
     * @param string                                                    $schedule
     * @param \Stripe\Api\Model\V1SubscriptionSchedulesSchedulePostBody $payload  body parameters for the request
     * @param string                                                    $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionSchedule|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionSchedulesSchedule(string $schedule, \Stripe\Api\Model\V1SubscriptionSchedulesSchedulePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionSchedulesSchedule($schedule, $payload), $fetch);
    }

    /**
     * <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>.
     *
     * @param string                                                          $schedule the identifier of the subscription schedule to be canceled
     * @param \Stripe\Api\Model\V1SubscriptionSchedulesScheduleCancelPostBody $payload  body parameters for the request
     * @param string                                                          $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionSchedule|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionSchedulesScheduleCancel(string $schedule, \Stripe\Api\Model\V1SubscriptionSchedulesScheduleCancelPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionSchedulesScheduleCancel($schedule, $payload), $fetch);
    }

    /**
     * <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>.
     *
     * @param string                                                           $schedule the identifier of the subscription schedule to be released
     * @param \Stripe\Api\Model\V1SubscriptionSchedulesScheduleReleasePostBody $payload  body parameters for the request
     * @param string                                                           $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionSchedule|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionSchedulesScheduleRelease(string $schedule, \Stripe\Api\Model\V1SubscriptionSchedulesScheduleReleasePostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionSchedulesScheduleRelease($schedule, $payload), $fetch);
    }

    /**
     * <p>Retrieves the list of subscription schedule revisions for a subscription schedule.</p>.
     *
     * @param string $schedule        the identifier of the subscription schedule to retrieve revisions for
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SubscriptionSchedulesScheduleRevisionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionSchedulesScheduleRevisions(string $schedule, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionSchedulesScheduleRevisions($schedule, $queryParameters), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing subscription schedule revision. You only need to supply the unique subscription schedule revision identifier that was returned upon subscription schedule creation or retrieval.</p>.
     *
     * @param string $revision        the identifier of the subscription schedule revision to be retrieved
     * @param string $schedule        the identifier of the subscription schedule the revision is associated with
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\SubscriptionScheduleRevision|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionSchedulesScheduleRevisionsRevision(string $revision, string $schedule, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionSchedulesScheduleRevisionsRevision($revision, $schedule, $queryParameters), $fetch);
    }

    /**
     * <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $billing The billing mode of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
     *     @var int $created
     *     @var int $current_period_end
     *     @var int $current_period_start
     *     @var string $customer the ID of the customer whose subscriptions will be retrieved
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $plan the ID of the plan whose subscriptions will be retrieved
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status The status of the subscriptions to retrieve. One of: `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `unpaid`, `canceled`, or `all`. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of `all` will return subscriptions of all statuses.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1SubscriptionsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptions($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new subscription on an existing customer.</p>.
     *
     * @param \Stripe\Api\Model\V1SubscriptionsPostBody $payload body parameters for the request
     * @param string                                    $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptions(\Stripe\Api\Model\V1SubscriptionsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptions($payload), $fetch);
    }

    /**
     * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>.

    <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>

    <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     *
     * @param string                                                           $subscriptionExposedId
     * @param \Stripe\Api\Model\V1SubscriptionsSubscriptionExposedIdDeleteBody $payload               body parameters for the request
     * @param string                                                           $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSubscriptionsSubscriptionExposedId(string $subscriptionExposedId, \Stripe\Api\Model\V1SubscriptionsSubscriptionExposedIdDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteSubscriptionsSubscriptionExposedId($subscriptionExposedId, $payload), $fetch);
    }

    /**
     * <p>Retrieves the subscription with the given ID.</p>.
     *
     * @param string $subscriptionExposedId
     * @param array  $queryParameters       {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getSubscriptionsSubscriptionExposedId(string $subscriptionExposedId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetSubscriptionsSubscriptionExposedId($subscriptionExposedId, $queryParameters), $fetch);
    }

    /**
     * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>.
     *
     * @param string                                                         $subscriptionExposedId
     * @param \Stripe\Api\Model\V1SubscriptionsSubscriptionExposedIdPostBody $payload               body parameters for the request
     * @param string                                                         $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Subscription|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postSubscriptionsSubscriptionExposedId(string $subscriptionExposedId, \Stripe\Api\Model\V1SubscriptionsSubscriptionExposedIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostSubscriptionsSubscriptionExposedId($subscriptionExposedId, $payload), $fetch);
    }

    /**
     * <p>Removes the currently applied discount on a subscription.</p>.
     *
     * @param string $subscriptionExposedId
     * @param string $fetch                 Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedDiscount|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteSubscriptionsSubscriptionExposedIdDiscount(string $subscriptionExposedId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteSubscriptionsSubscriptionExposedIdDiscount($subscriptionExposedId), $fetch);
    }

    /**
     * <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>.
     *
     * @param \Stripe\Api\Model\V1TerminalConnectionTokensPostBody $payload body parameters for the request
     * @param string                                               $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalConnectionToken|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTerminalConnectionTokens(\Stripe\Api\Model\V1TerminalConnectionTokensPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTerminalConnectionTokens($payload), $fetch);
    }

    /**
     * <p>Returns a list of <code>Location</code> objects.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $operator_account to group objects on your platform account by connected account, set this parameter to the connected account operating your application
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1TerminalLocationsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTerminalLocations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTerminalLocations($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new <code>Location</code> object.</p>.
     *
     * @param \Stripe\Api\Model\V1TerminalLocationsPostBody $payload body parameters for the request
     * @param string                                        $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalLocation|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTerminalLocations(\Stripe\Api\Model\V1TerminalLocationsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTerminalLocations($payload), $fetch);
    }

    /**
     * <p>Deletes a <code>Location</code> object.</p>.
     *
     * @param string                                                  $location the identifier of the location to be deleted
     * @param \Stripe\Api\Model\V1TerminalLocationsLocationDeleteBody $payload  body parameters for the request
     * @param string                                                  $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedTerminalLocation|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteTerminalLocationsLocation(string $location, \Stripe\Api\Model\V1TerminalLocationsLocationDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteTerminalLocationsLocation($location, $payload), $fetch);
    }

    /**
     * <p>Retrieves a <code>Location</code> object.</p>.
     *
     * @param string $location        the identifier of the location to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $operator_account To group objects on your platform account by connected account, set this parameter to the connected account operating your application.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalLocation|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTerminalLocationsLocation(string $location, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTerminalLocationsLocation($location, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                                $location the identifier of the location to be updated
     * @param \Stripe\Api\Model\V1TerminalLocationsLocationPostBody $payload  body parameters for the request
     * @param string                                                $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalLocation|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTerminalLocationsLocation(string $location, \Stripe\Api\Model\V1TerminalLocationsLocationPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTerminalLocationsLocation($location, $payload), $fetch);
    }

    /**
     * <p>Returns a list of <code>Reader</code> objects.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $location A location id to filter the response list to only readers at the specific location
     *     @var string $operator_account to group objects on your platform account by connected account, set this parameter to the connected account operating your application
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status A status filter to filter readers to only offline or online readers
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1TerminalReadersGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTerminalReaders(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTerminalReaders($queryParameters), $fetch);
    }

    /**
     * <p>Creates a new <code>Reader</code> object.</p>.
     *
     * @param \Stripe\Api\Model\V1TerminalReadersPostBody $payload body parameters for the request
     * @param string                                      $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalReader|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTerminalReaders(\Stripe\Api\Model\V1TerminalReadersPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTerminalReaders($payload), $fetch);
    }

    /**
     * <p>Deletes a <code>Reader</code> object.</p>.
     *
     * @param string                                              $reader  the identifier of the reader to be deleted
     * @param \Stripe\Api\Model\V1TerminalReadersReaderDeleteBody $payload body parameters for the request
     * @param string                                              $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedTerminalReader|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteTerminalReadersReader(string $reader, \Stripe\Api\Model\V1TerminalReadersReaderDeleteBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteTerminalReadersReader($reader, $payload), $fetch);
    }

    /**
     * <p>Retrieves a <code>Reader</code> object.</p>.
     *
     * @param string $reader          the identifier of the reader to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $operator_account To group objects on your platform account by connected account, set this parameter to the connected account operating your application.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalReader|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTerminalReadersReader(string $reader, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTerminalReadersReader($reader, $queryParameters), $fetch);
    }

    /**
     * <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.
     *
     * @param string                                            $reader  the identifier of the reader to be updated
     * @param \Stripe\Api\Model\V1TerminalReadersReaderPostBody $payload body parameters for the request
     * @param string                                            $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TerminalReader|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTerminalReadersReader(string $reader, \Stripe\Api\Model\V1TerminalReadersReaderPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTerminalReadersReader($reader, $payload), $fetch);
    }

    /**
     * <p>Creates a single-use token that represents a bank account’s details.
    This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
     *
     * @param \Stripe\Api\Model\V1TokensPostBody $payload body parameters for the request
     * @param string                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Token|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTokens(\Stripe\Api\Model\V1TokensPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTokens($payload), $fetch);
    }

    /**
     * <p>Retrieves the token with the given ID.</p>.
     *
     * @param string $token           the ID of the desired token
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Token|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTokensToken(string $token, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTokensToken($token, $queryParameters), $fetch);
    }

    /**
     * <p>Returns a list of top-ups.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $amount a positive integer representing how much to transfer
     *     @var int $created A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $status Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1TopupsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTopups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTopups($queryParameters), $fetch);
    }

    /**
     * <p>Top up the balance of an account</p>.
     *
     * @param \Stripe\Api\Model\V1TopupsPostBody $payload body parameters for the request
     * @param string                             $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Topup|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTopups(\Stripe\Api\Model\V1TopupsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTopups($payload), $fetch);
    }

    /**
     * <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>.
     *
     * @param string $topup           the ID of the top-up to retrieve
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Topup|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTopupsTopup(string $topup, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTopupsTopup($topup, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>.
     *
     * @param string                                  $topup   the ID of the top-up to retrieve
     * @param \Stripe\Api\Model\V1TopupsTopupPostBody $payload body parameters for the request
     * @param string                                  $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Topup|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTopupsTopup(string $topup, \Stripe\Api\Model\V1TopupsTopupPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTopupsTopup($topup, $payload), $fetch);
    }

    /**
     * <p>Cancels a top-up. Only pending top-ups can be canceled.</p>.
     *
     * @param string                                        $topup   the ID of the top-up to cancel
     * @param \Stripe\Api\Model\V1TopupsTopupCancelPostBody $payload body parameters for the request
     * @param string                                        $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Topup|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTopupsTopupCancel(string $topup, \Stripe\Api\Model\V1TopupsTopupCancelPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTopupsTopupCancel($topup, $payload), $fetch);
    }

    /**
     * <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var int $created
     *     @var string $destination only return transfers for the destination specified by this account ID
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     *     @var string $transfer_group Only return transfers with the specified transfer group.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1TransfersGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTransfers($queryParameters), $fetch);
    }

    /**
     * <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>.
     *
     * @param \Stripe\Api\Model\V1TransfersPostBody $payload body parameters for the request
     * @param string                                $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Transfer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTransfers(\Stripe\Api\Model\V1TransfersPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTransfers($payload), $fetch);
    }

    /**
     * <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>.
     *
     * @param string $id              the ID of the transfer whose reversals will be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1TransfersIdReversalsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfersIdReversals(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTransfersIdReversals($id, $queryParameters), $fetch);
    }

    /**
     * <p>When you create a new reversal, you must specify a transfer to create it on.</p>.

    <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>

    <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
     *
     * @param string                                           $id      the ID of the transfer to be reversed
     * @param \Stripe\Api\Model\V1TransfersIdReversalsPostBody $payload body parameters for the request
     * @param string                                           $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TransferReversal|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTransfersIdReversals(string $id, \Stripe\Api\Model\V1TransfersIdReversalsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTransfersIdReversals($id, $payload), $fetch);
    }

    /**
     * <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>.
     *
     * @param string $transfer        the identifier of the transfer to be retrieved
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Transfer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfersTransfer(string $transfer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTransfersTransfer($transfer, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>This request accepts only metadata as an argument.</p>
     *
     * @param string                                        $transfer the ID of the transfer to be updated
     * @param \Stripe\Api\Model\V1TransfersTransferPostBody $payload  body parameters for the request
     * @param string                                        $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\Transfer|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTransfersTransfer(string $transfer, \Stripe\Api\Model\V1TransfersTransferPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTransfersTransfer($transfer, $payload), $fetch);
    }

    /**
     * <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>.
     *
     * @param string $id              ID of reversal to retrieve
     * @param string $transfer        ID of the transfer reversed
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TransferReversal|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getTransfersTransferReversalsId(string $id, string $transfer, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetTransfersTransferReversalsId($id, $transfer, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>.

    <p>This request only accepts metadata and description as arguments.</p>
     *
     * @param string                                                   $id       ID of reversal to retrieve
     * @param string                                                   $transfer ID of the transfer reversed
     * @param \Stripe\Api\Model\V1TransfersTransferReversalsIdPostBody $payload  body parameters for the request
     * @param string                                                   $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\TransferReversal|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postTransfersTransferReversalsId(string $id, string $transfer, \Stripe\Api\Model\V1TransfersTransferReversalsIdPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostTransfersTransferReversalsId($id, $transfer, $payload), $fetch);
    }

    /**
     * <p>Returns a list of your webhook endpoints.</p>.
     *
     * @param array $queryParameters {
     *
     *     @var array $expand specifies which fields in the response should be expanded
     *     @var string $ending_before A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
     *     @var int $limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
     *     @var string $starting_after A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\V1WebhookEndpointsGetResponse200|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWebhookEndpoints(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetWebhookEndpoints($queryParameters), $fetch);
    }

    /**
     * <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>.
     *
     * @param \Stripe\Api\Model\V1WebhookEndpointsPostBody $payload body parameters for the request
     * @param string                                       $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\WebhookEndpoint|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postWebhookEndpoints(\Stripe\Api\Model\V1WebhookEndpointsPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostWebhookEndpoints($payload), $fetch);
    }

    /**
     * <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>.
     *
     * @param string $webhookEndpoint the ID of the webhook endpoint to delete
     * @param string $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\DeletedWebhookEndpoint|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function deleteWebhookEndpointsWebhookEndpoint(string $webhookEndpoint, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\DeleteWebhookEndpointsWebhookEndpoint($webhookEndpoint), $fetch);
    }

    /**
     * <p>Retrieves the webhook endpoint with the given ID.</p>.
     *
     * @param string $webhookEndpoint the ID of the desired webhook endpoint
     * @param array  $queryParameters {
     *
     *     @var array $expand Specifies which fields in the response should be expanded.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\WebhookEndpoint|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function getWebhookEndpointsWebhookEndpoint(string $webhookEndpoint, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\GetWebhookEndpointsWebhookEndpoint($webhookEndpoint, $queryParameters), $fetch);
    }

    /**
     * <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>.
     *
     * @param string                                                      $webhookEndpoint the ID of the desired webhook endpoint
     * @param \Stripe\Api\Model\V1WebhookEndpointsWebhookEndpointPostBody $payload         body parameters for the request
     * @param string                                                      $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Stripe\Api\Model\WebhookEndpoint|\Stripe\Api\Model\Error|\Psr\Http\Message\ResponseInterface|null
     */
    public function postWebhookEndpointsWebhookEndpoint(string $webhookEndpoint, \Stripe\Api\Model\V1WebhookEndpointsWebhookEndpointPostBody $payload, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executePsr7Endpoint(new \Stripe\Api\Endpoint\PostWebhookEndpointsWebhookEndpoint($webhookEndpoint, $payload), $fetch);
    }

    public static function create($httpClient = null)
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\HttpClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\UriFactoryDiscovery::find()->createUri('https://api.stripe.com');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $messageFactory = \Http\Discovery\MessageFactoryDiscovery::find();
        $streamFactory = \Http\Discovery\StreamFactoryDiscovery::find();
        $serializer = new \Symfony\Component\Serializer\Serializer(\Stripe\Api\Normalizer\NormalizerFactory::create(), [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode())]);

        return new static($httpClient, $messageFactory, $serializer, $streamFactory);
    }
}
